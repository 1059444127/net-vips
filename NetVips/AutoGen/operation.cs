// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace NetVips.AutoGen
{
    [Flags]
    public enum VipsOperationFlags
    {
        VIPS_OPERATION_NONE = 0,
        VIPS_OPERATION_SEQUENTIAL = 1,
        VIPS_OPERATION_SEQUENTIAL_UNBUFFERED = 2,
        VIPS_OPERATION_NOCACHE = 4,
        VIPS_OPERATION_DEPRECATED = 8
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int VipsOperationBuildFn(global::System.IntPtr @object);

    public unsafe partial class VipsOperation : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 96)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.AutoGen.VipsObject.__Internal parent_instance;

            [FieldOffset(80)]
            internal uint hash;

            [FieldOffset(84)]
            internal int found_hash;

            [FieldOffset(88)]
            internal int pixels;
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.AutoGen.VipsOperation> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.AutoGen.VipsOperation>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.AutoGen.VipsOperation __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.AutoGen.VipsOperation(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.AutoGen.VipsOperation __CreateInstance(global::NetVips.AutoGen.VipsOperation.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.AutoGen.VipsOperation(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.AutoGen.VipsOperation.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.AutoGen.VipsOperation.__Internal));
            *(global::NetVips.AutoGen.VipsOperation.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsOperation(global::NetVips.AutoGen.VipsOperation.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsOperation(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        ~VipsOperation()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.AutoGen.VipsOperation __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NetVips.AutoGen.VipsObject ParentInstance
        {
            get
            {
                return global::NetVips.AutoGen.VipsObject.__CreateInstance(new global::System.IntPtr(&((global::NetVips.AutoGen.VipsOperation.__Internal*) __Instance)->parent_instance));
            }

            set
            {
                ((global::NetVips.AutoGen.VipsOperation.__Internal*)__Instance)->parent_instance = ReferenceEquals(value, null) ? new global::NetVips.AutoGen.VipsObject.__Internal() : *(global::NetVips.AutoGen.VipsObject.__Internal*) value.__Instance;
            }
        }

        public uint Hash
        {
            get
            {
                return ((global::NetVips.AutoGen.VipsOperation.__Internal*) __Instance)->hash;
            }

            set
            {
                ((global::NetVips.AutoGen.VipsOperation.__Internal*)__Instance)->hash = value;
            }
        }

        public int FoundHash
        {
            get
            {
                return ((global::NetVips.AutoGen.VipsOperation.__Internal*) __Instance)->found_hash;
            }

            set
            {
                ((global::NetVips.AutoGen.VipsOperation.__Internal*)__Instance)->found_hash = value;
            }
        }

        public int Pixels
        {
            get
            {
                return ((global::NetVips.AutoGen.VipsOperation.__Internal*) __Instance)->pixels;
            }

            set
            {
                ((global::NetVips.AutoGen.VipsOperation.__Internal*)__Instance)->pixels = value;
            }
        }
    }

    public unsafe partial class VipsOperationClass : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 360)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.AutoGen.VipsObjectClass.__Internal parent_class;

            [FieldOffset(328)]
            internal global::System.IntPtr usage;

            [FieldOffset(336)]
            internal global::System.IntPtr get_flags;

            [FieldOffset(344)]
            internal global::NetVips.AutoGen.VipsOperationFlags flags;

            [FieldOffset(352)]
            internal global::System.IntPtr invalidate;
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.AutoGen.VipsOperationClass> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.AutoGen.VipsOperationClass>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.AutoGen.VipsOperationClass __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.AutoGen.VipsOperationClass(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.AutoGen.VipsOperationClass __CreateInstance(global::NetVips.AutoGen.VipsOperationClass.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.AutoGen.VipsOperationClass(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.AutoGen.VipsOperationClass.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.AutoGen.VipsOperationClass.__Internal));
            *(global::NetVips.AutoGen.VipsOperationClass.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsOperationClass(global::NetVips.AutoGen.VipsOperationClass.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsOperationClass(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        ~VipsOperationClass()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.AutoGen.VipsOperationClass __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NetVips.AutoGen.VipsObjectClass ParentClass
        {
            get
            {
                return global::NetVips.AutoGen.VipsObjectClass.__CreateInstance(new global::System.IntPtr(&((global::NetVips.AutoGen.VipsOperationClass.__Internal*) __Instance)->parent_class));
            }

            set
            {
                ((global::NetVips.AutoGen.VipsOperationClass.__Internal*)__Instance)->parent_class = ReferenceEquals(value, null) ? new global::NetVips.AutoGen.VipsObjectClass.__Internal() : *(global::NetVips.AutoGen.VipsObjectClass.__Internal*) value.__Instance;
            }
        }

        public global::NetVips.AutoGen.VipsOperationFlags Flags
        {
            get
            {
                return ((global::NetVips.AutoGen.VipsOperationClass.__Internal*) __Instance)->flags;
            }

            set
            {
                ((global::NetVips.AutoGen.VipsOperationClass.__Internal*)__Instance)->flags = value;
            }
        }
    }

    public unsafe partial class operation
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_operation_get_flags")]
            internal static extern global::NetVips.AutoGen.VipsOperationFlags VipsOperationGetFlags(global::System.IntPtr operation);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_operation_new")]
            internal static extern global::System.IntPtr VipsOperationNew([MarshalAs(UnmanagedType.LPStr)] string name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_cache_operation_build")]
            internal static extern global::System.IntPtr VipsCacheOperationBuild(global::System.IntPtr operation);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_cache_set_max")]
            internal static extern void VipsCacheSetMax(int max);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_cache_set_max_mem")]
            internal static extern void VipsCacheSetMaxMem(ulong max_mem);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_cache_set_max_files")]
            internal static extern void VipsCacheSetMaxFiles(int max_files);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_cache_set_trace")]
            internal static extern void VipsCacheSetTrace(int trace);
        }

        public static global::NetVips.AutoGen.VipsOperationFlags VipsOperationGetFlags(global::NetVips.AutoGen.VipsOperation operation)
        {
            var __arg0 = ReferenceEquals(operation, null) ? global::System.IntPtr.Zero : operation.__Instance;
            var __ret = __Internal.VipsOperationGetFlags(__arg0);
            return __ret;
        }

        public static global::NetVips.AutoGen.VipsOperation VipsOperationNew(string name)
        {
            var __ret = __Internal.VipsOperationNew(name);
            global::NetVips.AutoGen.VipsOperation __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.AutoGen.VipsOperation.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.AutoGen.VipsOperation) global::NetVips.AutoGen.VipsOperation.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.AutoGen.VipsOperation.__CreateInstance(__ret);
            return __result0;
        }

        public static global::NetVips.AutoGen.VipsOperation VipsCacheOperationBuild(global::NetVips.AutoGen.VipsOperation operation)
        {
            var __arg0 = ReferenceEquals(operation, null) ? global::System.IntPtr.Zero : operation.__Instance;
            var __ret = __Internal.VipsCacheOperationBuild(__arg0);
            global::NetVips.AutoGen.VipsOperation __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.AutoGen.VipsOperation.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.AutoGen.VipsOperation) global::NetVips.AutoGen.VipsOperation.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.AutoGen.VipsOperation.__CreateInstance(__ret);
            return __result0;
        }

        public static void VipsCacheSetMax(int max)
        {
            __Internal.VipsCacheSetMax(max);
        }

        public static void VipsCacheSetMaxMem(ulong max_mem)
        {
            __Internal.VipsCacheSetMaxMem(max_mem);
        }

        public static void VipsCacheSetMaxFiles(int max_files)
        {
            __Internal.VipsCacheSetMaxFiles(max_files);
        }

        public static void VipsCacheSetTrace(int trace)
        {
            __Internal.VipsCacheSetTrace(trace);
        }
    }
}

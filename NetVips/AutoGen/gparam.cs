// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace NetVips.AutoGen
{
    public enum GParamFlags
    {
        G_PARAM_READABLE = 1,
        G_PARAM_WRITABLE = 2,
        G_PARAM_READWRITE = 3,
        G_PARAM_CONSTRUCT = 4,
        G_PARAM_CONSTRUCT_ONLY = 8,
        G_PARAM_LAX_VALIDATION = 16,
        G_PARAM_STATIC_NAME = 32,
        G_PARAM_PRIVATE = 32,
        G_PARAM_STATIC_NICK = 64,
        G_PARAM_STATIC_BLURB = 128,
        G_PARAM_EXPLICIT_NOTIFY = 1073741824,
        G_PARAM_DEPRECATED = -2147483648
    }

    public unsafe partial class GParamSpec : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 72)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.AutoGen.GTypeInstance.__Internal g_type_instance;

            [FieldOffset(8)]
            internal global::System.IntPtr name;

            [FieldOffset(16)]
            internal global::NetVips.AutoGen.GParamFlags flags;

            [FieldOffset(24)]
            internal ulong value_type;

            [FieldOffset(32)]
            internal ulong owner_type;

            [FieldOffset(40)]
            internal global::System.IntPtr _nick;

            [FieldOffset(48)]
            internal global::System.IntPtr _blurb;

            [FieldOffset(56)]
            internal global::System.IntPtr qdata;

            [FieldOffset(64)]
            internal uint ref_count;

            [FieldOffset(68)]
            internal uint param_id;
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.AutoGen.GParamSpec> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.AutoGen.GParamSpec>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.AutoGen.GParamSpec __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.AutoGen.GParamSpec(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.AutoGen.GParamSpec __CreateInstance(global::NetVips.AutoGen.GParamSpec.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.AutoGen.GParamSpec(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.AutoGen.GParamSpec.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.AutoGen.GParamSpec.__Internal));
            *(global::NetVips.AutoGen.GParamSpec.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GParamSpec(global::NetVips.AutoGen.GParamSpec.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GParamSpec(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        ~GParamSpec()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.AutoGen.GParamSpec __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public string Name
        {
            get
            {
                return Marshal.PtrToStringAnsi(((global::NetVips.AutoGen.GParamSpec.__Internal*) __Instance)->name);
            }

            set
            {
                ((global::NetVips.AutoGen.GParamSpec.__Internal*)__Instance)->name = Marshal.StringToHGlobalAnsi(value);
            }
        }

        public ulong ValueType
        {
            get
            {
                return ((global::NetVips.AutoGen.GParamSpec.__Internal*) __Instance)->value_type;
            }

            set
            {
                ((global::NetVips.AutoGen.GParamSpec.__Internal*)__Instance)->value_type = value;
            }
        }

        public ulong OwnerType
        {
            get
            {
                return ((global::NetVips.AutoGen.GParamSpec.__Internal*) __Instance)->owner_type;
            }

            set
            {
                ((global::NetVips.AutoGen.GParamSpec.__Internal*)__Instance)->owner_type = value;
            }
        }

        public char* Nick
        {
            get
            {
                return (char*) ((global::NetVips.AutoGen.GParamSpec.__Internal*) __Instance)->_nick;
            }

            set
            {
                ((global::NetVips.AutoGen.GParamSpec.__Internal*)__Instance)->_nick = (global::System.IntPtr) (sbyte*) value;
            }
        }

        public char* Blurb
        {
            get
            {
                return (char*) ((global::NetVips.AutoGen.GParamSpec.__Internal*) __Instance)->_blurb;
            }

            set
            {
                ((global::NetVips.AutoGen.GParamSpec.__Internal*)__Instance)->_blurb = (global::System.IntPtr) (sbyte*) value;
            }
        }

        public uint RefCount
        {
            get
            {
                return ((global::NetVips.AutoGen.GParamSpec.__Internal*) __Instance)->ref_count;
            }

            set
            {
                ((global::NetVips.AutoGen.GParamSpec.__Internal*)__Instance)->ref_count = value;
            }
        }

        public uint ParamId
        {
            get
            {
                return ((global::NetVips.AutoGen.GParamSpec.__Internal*) __Instance)->param_id;
            }

            set
            {
                ((global::NetVips.AutoGen.GParamSpec.__Internal*)__Instance)->param_id = value;
            }
        }
    }

    public unsafe partial class gparam
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libgobject-2.0-0.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="g_param_spec_get_blurb")]
            internal static extern global::System.IntPtr GParamSpecGetBlurb(global::System.IntPtr pspec);
        }

        public static string GParamSpecGetBlurb(global::NetVips.AutoGen.GParamSpec pspec)
        {
            var __arg0 = ReferenceEquals(pspec, null) ? global::System.IntPtr.Zero : pspec.__Instance;
            var __ret = __Internal.GParamSpecGetBlurb(__arg0);
            return Marshal.PtrToStringAnsi(__ret);
        }
    }
}

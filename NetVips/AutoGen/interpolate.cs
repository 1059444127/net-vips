// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace NetVips.AutoGen
{
    public unsafe partial class VipsInterpolate : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.AutoGen.VipsObject.__Internal parent_object;
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.AutoGen.VipsInterpolate> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.AutoGen.VipsInterpolate>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.AutoGen.VipsInterpolate __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.AutoGen.VipsInterpolate(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.AutoGen.VipsInterpolate __CreateInstance(global::NetVips.AutoGen.VipsInterpolate.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.AutoGen.VipsInterpolate(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.AutoGen.VipsInterpolate.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.AutoGen.VipsInterpolate.__Internal));
            *(global::NetVips.AutoGen.VipsInterpolate.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsInterpolate(global::NetVips.AutoGen.VipsInterpolate.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsInterpolate(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        ~VipsInterpolate()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.AutoGen.VipsInterpolate __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NetVips.AutoGen.VipsObject ParentObject
        {
            get
            {
                return global::NetVips.AutoGen.VipsObject.__CreateInstance(new global::System.IntPtr(&((global::NetVips.AutoGen.VipsInterpolate.__Internal*) __Instance)->parent_object));
            }

            set
            {
                ((global::NetVips.AutoGen.VipsInterpolate.__Internal*)__Instance)->parent_object = ReferenceEquals(value, null) ? new global::NetVips.AutoGen.VipsObject.__Internal() : *(global::NetVips.AutoGen.VipsObject.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class interpolate
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_interpolate_new")]
            internal static extern global::System.IntPtr VipsInterpolateNew([MarshalAs(UnmanagedType.LPStr)] string nickname);
        }

        public static global::NetVips.AutoGen.VipsInterpolate VipsInterpolateNew(string nickname)
        {
            var __ret = __Internal.VipsInterpolateNew(nickname);
            global::NetVips.AutoGen.VipsInterpolate __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.AutoGen.VipsInterpolate.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.AutoGen.VipsInterpolate) global::NetVips.AutoGen.VipsInterpolate.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.AutoGen.VipsInterpolate.__CreateInstance(__ret);
            return __result0;
        }
    }
}

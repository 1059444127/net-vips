// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace NetVips
{
    public unsafe partial class vips
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_init")]
            internal static extern int VipsInit([MarshalAs(UnmanagedType.LPStr)] string argv0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_get_argv0")]
            internal static extern global::System.IntPtr VipsGetArgv0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_shutdown")]
            internal static extern void VipsShutdown();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_thread_shutdown")]
            internal static extern void VipsThreadShutdown();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_leak_set")]
            internal static extern void VipsLeakSet(int leak);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_version_string")]
            internal static extern global::System.IntPtr VipsVersionString();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_version")]
            internal static extern int VipsVersion(int flag);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_guess_prefix")]
            internal static extern global::System.IntPtr VipsGuessPrefix([MarshalAs(UnmanagedType.LPStr)] string argv0, [MarshalAs(UnmanagedType.LPStr)] string env_name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_guess_libdir")]
            internal static extern global::System.IntPtr VipsGuessLibdir([MarshalAs(UnmanagedType.LPStr)] string argv0, [MarshalAs(UnmanagedType.LPStr)] string env_name);
        }

        public static int VipsInit(string argv0)
        {
            var __ret = __Internal.VipsInit(argv0);
            return __ret;
        }

        public static string VipsGetArgv0()
        {
            var __ret = __Internal.VipsGetArgv0();
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static void VipsShutdown()
        {
            __Internal.VipsShutdown();
        }

        public static void VipsThreadShutdown()
        {
            __Internal.VipsThreadShutdown();
        }

        public static void VipsLeakSet(int leak)
        {
            __Internal.VipsLeakSet(leak);
        }

        public static string VipsVersionString()
        {
            var __ret = __Internal.VipsVersionString();
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static int VipsVersion(int flag)
        {
            var __ret = __Internal.VipsVersion(flag);
            return __ret;
        }

        public static string VipsGuessPrefix(string argv0, string env_name)
        {
            var __ret = __Internal.VipsGuessPrefix(argv0, env_name);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static string VipsGuessLibdir(string argv0, string env_name)
        {
            var __ret = __Internal.VipsGuessLibdir(argv0, env_name);
            return Marshal.PtrToStringAnsi(__ret);
        }
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int GCompareFunc(global::System.IntPtr a, global::System.IntPtr b);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int GCompareDataFunc(global::System.IntPtr a, global::System.IntPtr b, global::System.IntPtr user_data);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int GEqualFunc(global::System.IntPtr a, global::System.IntPtr b);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GDestroyNotify(global::System.IntPtr data);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GFunc(global::System.IntPtr data, global::System.IntPtr user_data);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate uint GHashFunc(global::System.IntPtr key);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GHFunc(global::System.IntPtr key, global::System.IntPtr value, global::System.IntPtr user_data);

    /// <summary>GFreeFunc:</summary>
    /// <remarks>
    /// <para>: a data pointer</para>
    /// <para>Declares a type of function which takes an arbitrary</para>
    /// <para>data pointer argument and has no return value. It is</para>
    /// <para>not currently used in GLib or GTK+.</para>
    /// </remarks>
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GFreeFunc(global::System.IntPtr data);

    /// <summary>
    /// <para>GTranslateFunc:</para>
    /// <para>the untranslated string</para>
    /// </summary>
    /// <remarks>
    /// <para>: user data specified when installing the function, e.g.</para>
    /// <para>in g_option_group_set_translate_func()</para>
    /// <para>The type of functions which are used to translate user-visible</para>
    /// <para>strings, for--helpoutput.</para>
    /// <para>Returns: a translation of the string for the current locale.</para>
    /// <para>The returned string is owned by GLib and must not be freed.</para>
    /// </remarks>
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr GTranslateFunc([MarshalAs(UnmanagedType.LPStr)] string str, global::System.IntPtr data);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr GThreadFunc(global::System.IntPtr data);

    /// <summary>GMutexLocker:</summary>
    /// <remarks>
    /// <para>Opaque type. See g_mutex_locker_new() for details.</para>
    /// <para>Since: 2.44</para>
    /// </remarks>
    /// <summary>GVoidFunc:</summary>
    /// <remarks>
    /// <para>Declares a type of function which takes no arguments</para>
    /// <para>and has no return value. It is used to specify the type</para>
    /// <para>function passed to g_atexit().</para>
    /// </remarks>
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GVoidFunc();

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GDataForeachFunc(uint key_id, global::System.IntPtr data, global::System.IntPtr user_data);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr GDuplicateFunc(global::System.IntPtr data, global::System.IntPtr user_data);

    /// <summary>GTimeSpan:</summary>
    /// <remarks>
    /// <para>A value representing an interval of time, in microseconds.</para>
    /// <para>Since: 2.26</para>
    /// </remarks>
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int GHRFunc(global::System.IntPtr key, global::System.IntPtr value, global::System.IntPtr user_data);

    public unsafe partial class gmem
    {
        public partial struct __Internal
        {
        }

        public static int GMemGcFriendly
        {
            get
            {
                var __ptr = (int*)CppSharp.SymbolResolver.ResolveSymbol("libvips-42.dll", "g_mem_gc_friendly");
                return *__ptr;
            }

            set
            {
                var __ptr = (int*)CppSharp.SymbolResolver.ResolveSymbol("libvips-42.dll", "g_mem_gc_friendly");
                *__ptr = value;
            }
        }
    }

    /// <summary>
    /// <para>GCopyFunc:</para>
    /// <para>(not nullable): A pointer to the data which should be copied</para>
    /// </summary>
    /// <remarks>
    /// <para>: Additional data</para>
    /// <para>A function of this signature is used to copy the node data</para>
    /// <para>when doing a deep-copy of a tree.</para>
    /// <para>Returns: (not nullable): A pointer to the copy</para>
    /// <para>Since: 2.4</para>
    /// </remarks>
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr GCopyFunc(global::System.IntPtr src, global::System.IntPtr data);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GHookFunc(global::System.IntPtr data);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int GHookCheckFunc(global::System.IntPtr data);

    /// <summary>
    /// <para>GSourceFunc:</para>
    /// <para>data passed to the function, set when the source was</para>
    /// <para>created with one of the above functions</para>
    /// </summary>
    /// <remarks>
    /// <para>Specifies the type of function passed to g_timeout_add(),</para>
    /// <para>g_timeout_add_full(), g_idle_add(), and g_idle_add_full().</para>
    /// <para>Returns: %FALSE if the source should be removed. #G_SOURCE_CONTINUE and</para>
    /// <para>#G_SOURCE_REMOVE are more memorable names for the return value.</para>
    /// </remarks>
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int GSourceFunc(global::System.IntPtr user_data);

    /// <summary>GSourceDummyMarshal:</summary>
    /// <remarks>
    /// <para>This is just a placeholder for #GClosureMarshal,</para>
    /// <para>which cannot be used here for dependency reasons.</para>
    /// </remarks>
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GSourceDummyMarshal();

    /// <summary>
    /// <para>GChildWatchFunc:</para>
    /// <para>the process id of the child process</para>
    /// <para>Status information about the child process, encoded</para>
    /// <para>in a platform-specific manner</para>
    /// <para>user data passed to g_child_watch_add()</para>
    /// </summary>
    /// <remarks>
    /// <para>Prototype of a #GChildWatchSource callback, called when a child</para>
    /// <para>process has exited.  To interpretsee the documentation</para>
    /// <para>for g_spawn_check_exit_status().</para>
    /// </remarks>
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GChildWatchFunc(global::System.IntPtr pid, int status, global::System.IntPtr user_data);

    /// <summary>gunichar:</summary>
    /// <remarks>
    /// <para>A type which can hold any UTF-32 or UCS-4 character code,</para>
    /// <para>also known as a Unicode code point.</para>
    /// <para>If you want to produce the UTF-8 representation of a #gunichar,</para>
    /// <para>use g_ucs4_to_utf8(). See also g_utf8_to_ucs4() for the reverse</para>
    /// <para>process.</para>
    /// <para>To print/scan values of this type as integer, use</para>
    /// <para>%G_GINT32_MODIFIER and/or %G_GUINT32_FORMAT.</para>
    /// <para>The notation to express a Unicode code point in running text is</para>
    /// <para>as a hexadecimal number with four to six digits and uppercase</para>
    /// <para>letters, prefixed by the string &quot;U+&quot;. Leading zeros are omitted,</para>
    /// <para>unless the code point would have fewer than four hexadecimal digits.</para>
    /// <para>For example, &quot;U+0041 LATIN CAPITAL LETTER A&quot;. To print a code point</para>
    /// <para>in the U+-notation, use the format string &quot;U+%04&quot;G_GINT32_FORMAT&quot;X&quot;.</para>
    /// <para>To scan, use the format string &quot;U+%06&quot;G_GINT32_FORMAT&quot;X&quot;.</para>
    /// <para>|[</para>
    /// <para>gunichar c;</para>
    /// <para>sscanf (&quot;U+0041&quot;, &quot;U+%06&quot;G_GINT32_FORMAT&quot;X&quot;,&amp;c)</para>
    /// <para>g_print (&quot;Read U+%04&quot;G_GINT32_FORMAT&quot;X&quot;, c);</para>
    /// <para>]|</para>
    /// </remarks>
    /// <summary>gunichar2:</summary>
    /// <remarks>
    /// <para>A type which can hold any UTF-16 code</para>
    /// <para>pointid=&quot;utf16_surrogate_pairs&quot;&gt;UTF-16 also has so called</para>
    /// <para>surrogate pairsto encode characters beyond</para>
    /// <para>the BMP as pairs of 16bit numbers. Surrogate pairs cannot be stored</para>
    /// <para>in a single gunichar2 field, but all GLib functions accepting gunichar2</para>
    /// <para>arrays will correctly interpret surrogate pairs..</para>
    /// <para>To print/scan values of this type to/from text you need to convert</para>
    /// <para>to/from UTF-8, using g_utf16_to_utf8()/g_utf8_to_utf16().</para>
    /// <para>To print/scan values of this type as integer, use</para>
    /// <para>%G_GINT16_MODIFIER and/or %G_GUINT16_FORMAT.</para>
    /// </remarks>
    public unsafe partial class gunicode
    {
        public partial struct __Internal
        {
        }

        public static string GUtf8Skip
        {
            get
            {
                var __ptr = (global::System.IntPtr*)CppSharp.SymbolResolver.ResolveSymbol("libvips-42.dll", "g_utf8_skip");
                return Marshal.PtrToStringAnsi(*__ptr);
            }
        }
    }

    /// <summary>
    /// <para>GPrintFunc:</para>
    /// <para>the message to output</para>
    /// </summary>
    /// <remarks>
    /// <para>Specifies the type of the print handler functions.</para>
    /// <para>These are called with the complete formatted string to output.</para>
    /// </remarks>
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GPrintFunc([MarshalAs(UnmanagedType.LPStr)] string @string);

    /// <summary>
    /// <para>GSpawnChildSetupFunc:</para>
    /// <para>user data to pass to the function.</para>
    /// </summary>
    /// <remarks>
    /// <para>Specifies the type of the setup function passed to g_spawn_async(),</para>
    /// <para>g_spawn_sync() and g_spawn_async_with_pipes(), which can, in very</para>
    /// <para>limited ways, be used to affect the child's execution.</para>
    /// <para>On POSIX platforms, the function is called in the child after GLib</para>
    /// <para>has performed all the setup it plans to perform, but before calling</para>
    /// <para>exec(). Actions taken in this function will only affect the child,</para>
    /// <para>not the parent.</para>
    /// <para>On Windows, the function is called in the parent. Its usefulness on</para>
    /// <para>Windows is thus questionable. In many cases executing the child setup</para>
    /// <para>function in the parent can have ill effects, and you should be very</para>
    /// <para>careful when porting software to Windows that uses child setup</para>
    /// <para>functions.</para>
    /// <para>However, even on POSIX, you are extremely limited in what you can</para>
    /// <para>safely do from a #GSpawnChildSetupFunc, because any mutexes that were</para>
    /// <para>held by other threads in the parent process at the time of the fork()</para>
    /// <para>will still be locked in the child process, and they will never be</para>
    /// <para>unlocked (since the threads that held them don't exist in the child).</para>
    /// <para>POSIX allows only async-signal-safe functions (see signal(7)) to be</para>
    /// <para>called in the child between fork() and exec(), which drastically limits</para>
    /// <para>the usefulness of child setup functions.</para>
    /// <para>In particular, it is not safe to call any function which may</para>
    /// <para>call malloc(), which includes POSIX functions such as setenv().</para>
    /// <para>If you need to set up the child environment differently from</para>
    /// <para>the parent, you should use g_get_environ(), g_environ_setenv(),</para>
    /// <para>and g_environ_unsetenv(), and then pass the complete environment</para>
    /// <para>list to the `g_spawn...` function.</para>
    /// </remarks>
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GSpawnChildSetupFunc(global::System.IntPtr user_data);

    public unsafe partial class gstrfuncs
    {
        public partial struct __Internal
        {
        }

        public static ushort* GAsciiTable
        {
            get
            {
                var __ptr = (ushort**)CppSharp.SymbolResolver.ResolveSymbol("libvips-42.dll", "g_ascii_table");
                return *__ptr;
            }
        }
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GTestFunc();

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GTestDataFunc(global::System.IntPtr user_data);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GTestFixtureFunc(global::System.IntPtr fixture, global::System.IntPtr user_data);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int GTraverseFunc(global::System.IntPtr key, global::System.IntPtr value, global::System.IntPtr data);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr GCacheNewFunc(global::System.IntPtr key);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr GCacheDupFunc(global::System.IntPtr value);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GCacheDestroyFunc(global::System.IntPtr value);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate sbyte* GCompletionFunc(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int GCompletionStrncmpFunc([MarshalAs(UnmanagedType.LPStr)] string s1, [MarshalAs(UnmanagedType.LPStr)] string s2, ulong n);

    public unsafe partial class gthread
    {
        public partial struct __Internal
        {
        }

        public static int GThreadUseDefaultImpl
        {
            get
            {
                var __ptr = (int*)CppSharp.SymbolResolver.ResolveSymbol("libvips-42.dll", "g_thread_use_default_impl");
                return *__ptr;
            }

            set
            {
                var __ptr = (int*)CppSharp.SymbolResolver.ResolveSymbol("libvips-42.dll", "g_thread_use_default_impl");
                *__ptr = value;
            }
        }

        public static Func<ulong> GThreadGettime
        {
            get
            {
                var __ptr = (global::System.IntPtr*)CppSharp.SymbolResolver.ResolveSymbol("libvips-42.dll", "g_thread_gettime");
                var __ptr0 = *__ptr;
                return (Func<ulong>)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(Func<ulong>));
            }

            set
            {
                var __ptr = (global::System.IntPtr*)CppSharp.SymbolResolver.ResolveSymbol("libvips-42.dll", "g_thread_gettime");
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static int GThreadsGotInitialized
        {
            get
            {
                var __ptr = (int*)CppSharp.SymbolResolver.ResolveSymbol("libvips-42.dll", "g_threads_got_initialized");
                return *__ptr;
            }

            set
            {
                var __ptr = (int*)CppSharp.SymbolResolver.ResolveSymbol("libvips-42.dll", "g_threads_got_initialized");
                *__ptr = value;
            }
        }
    }

    /// <summary>GObject:</summary>
    /// <remarks>
    /// <para>All the fields in the GObject structure are private</para>
    /// <para>to the #GObject implementation and should never be accessed directly.</para>
    /// </remarks>
    public unsafe partial class GObject
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.GTypeInstance.__Internal g_type_instance;

            [FieldOffset(8)]
            internal uint ref_count;

            [FieldOffset(16)]
            internal global::System.IntPtr qdata;
        }
    }

    /// <summary>
    /// <para>GObjectClass:</para>
    /// <para>the parent class</para>
    /// <para>thefunction is called by g_object_new () to</para>
    /// <para>complete the object initialization after all the construction properties are</para>
    /// <para>set. The first thing aimplementation must do is chain up to the</para>
    /// <para>of the parent class. Overridingshould be rarely</para>
    /// <para>needed, e.g. to handle construct properties, or to implement singletons.</para>
    /// </summary>
    /// <remarks>
    /// <para>_property: the generic setter for all properties of this type. Should be</para>
    /// <para>overridden for every type with properties. If implementations of</para>
    /// <para>_property don't emit property change notification explicitly, this will</para>
    /// <para>be done implicitly by the type system. However, if the notify signal is</para>
    /// <para>emitted explicitly, the type system will not emit it a second time.</para>
    /// <para>_property: the generic getter for all properties of this type. Should be</para>
    /// <para>overridden for every type with properties.</para>
    /// <para>: thefunction is supposed to drop all references to other</para>
    /// <para>objects, but keep the instance otherwise intact, so that client method</para>
    /// <para>invocations still work. It may be run multiple times (due to reference</para>
    /// <para>loops). Before returning,should chain up to themethod</para>
    /// <para>of the parent class.</para>
    /// <para>: instance finalization function, should finish the finalization of</para>
    /// <para>the instance begun inand chain up to themethod of the</para>
    /// <para>parent class.</para>
    /// <para>_properties_changed: emits property change notification for a bunch</para>
    /// <para>of properties. Overriding_properties_changed should be rarely</para>
    /// <para>needed.</para>
    /// <para>: the class closure for the notify signal</para>
    /// <para>: thefunction is called by g_object_new() as the</para>
    /// <para>final step of the object creation process.  At the point of the call, all</para>
    /// <para>construction properties have been set on the object.  The purpose of this</para>
    /// <para>call is to allow for object initialisation steps that can only be performed</para>
    /// <para>after construction properties have been set.implementors</para>
    /// <para>should chain up to thecall of their parent class to allow it</para>
    /// <para>to complete its initialisation.</para>
    /// <para>The class structure for the GObject type.</para>
    /// <para></para>
    /// <para>Implementing singletons using a constructor</para>
    /// <para></para>
    /// <para>static MySingleton *the_singleton = NULL;</para>
    /// <para>static GObject*</para>
    /// <para>my_singleton_constructor (GType                  type,</para>
    /// <para>guint                  n_construct_params,</para>
    /// <para>GObjectConstructParam *construct_params)</para>
    /// <para>{</para>
    /// <para>GObject *object;</para>
    /// <para>if (!the_singleton)</para>
    /// <para>{</para>
    /// <para>object = G_OBJECT_CLASS (parent_class)-&gt;constructor (type,</para>
    /// <para>n_construct_params,</para>
    /// <para>construct_params);</para>
    /// <para>the_singleton = MY_SINGLETON (object);</para>
    /// <para>}</para>
    /// <para>else</para>
    /// <para>object = g_object_ref (G_OBJECT (the_singleton));</para>
    /// <para>return object;</para>
    /// <para>}</para>
    /// </remarks>
    public unsafe partial class GObjectClass
    {
        [StructLayout(LayoutKind.Explicit, Size = 136)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.GTypeClass.__Internal g_type_class;

            [FieldOffset(8)]
            internal global::System.IntPtr construct_properties;

            [FieldOffset(16)]
            internal global::System.IntPtr constructor;

            [FieldOffset(24)]
            internal global::System.IntPtr set_property;

            [FieldOffset(32)]
            internal global::System.IntPtr get_property;

            [FieldOffset(40)]
            internal global::System.IntPtr dispose;

            [FieldOffset(48)]
            internal global::System.IntPtr finalize;

            [FieldOffset(56)]
            internal global::System.IntPtr dispatch_properties_changed;

            [FieldOffset(64)]
            internal global::System.IntPtr notify;

            [FieldOffset(72)]
            internal global::System.IntPtr constructed;

            [FieldOffset(80)]
            internal ulong flags;

            [FieldOffset(88)]
            internal void* pdummy;
        }
    }

    /// <summary>
    /// <para>GBaseInitFunc:</para>
    /// <para>(type GObject.TypeClass): The #GTypeClass structure to initialize</para>
    /// </summary>
    /// <remarks>
    /// <para>A callback function used by the type system to do base initialization</para>
    /// <para>of the class structures of derived types. It is called as part of the</para>
    /// <para>initialization process of all derived classes and should reallocate</para>
    /// <para>or reset all dynamic class members copied over from the parent class.</para>
    /// <para>For example, class members (such as strings) that are not sufficiently</para>
    /// <para>handled by a plain memory copy of the parent class into the derived class</para>
    /// <para>have to be altered. See GClassInitFunc() for a discussion of the class</para>
    /// <para>initialization process.</para>
    /// </remarks>
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GBaseInitFunc(global::System.IntPtr g_class);

    /// <summary>
    /// <para>GBaseFinalizeFunc:</para>
    /// <para>(type GObject.TypeClass): The #GTypeClass structure to finalize</para>
    /// </summary>
    /// <remarks>
    /// <para>A callback function used by the type system to finalize those portions</para>
    /// <para>of a derived types class structure that were setup from the corresponding</para>
    /// <para>GBaseInitFunc() function. Class finalization basically works the inverse</para>
    /// <para>way in which class initialization is performed.</para>
    /// <para>See GClassInitFunc() for a discussion of the class initialization process.</para>
    /// </remarks>
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GBaseFinalizeFunc(global::System.IntPtr g_class);

    /// <summary>
    /// <para>GClassInitFunc:</para>
    /// <para>(type GObject.TypeClass): The #GTypeClass structure to initialize.</para>
    /// </summary>
    /// <remarks>
    /// <para>A callback function used by the type system to initialize the class</para>
    /// <para>of a specific type. This function should initialize all static class</para>
    /// <para>members.</para>
    /// <para>The initialization process of a class involves:</para>
    /// <para>- Copying common members from the parent class over to the</para>
    /// <para>derived class structure.</para>
    /// <para>- Zero initialization of the remaining members not copied</para>
    /// <para>over from the parent class.</para>
    /// <para>- Invocation of the GBaseInitFunc() initializers of all parent</para>
    /// <para>types and the class' type.</para>
    /// <para>- Invocation of the class' GClassInitFunc() initializer.</para>
    /// <para>Since derived classes are partially initialized through a memory copy</para>
    /// <para>of the parent class, the general rule is that GBaseInitFunc() and</para>
    /// <para>GBaseFinalizeFunc() should take care of necessary reinitialization</para>
    /// <para>and release of those class members that were introduced by the type</para>
    /// <para>that specified these GBaseInitFunc()/GBaseFinalizeFunc().</para>
    /// <para>GClassInitFunc() should only care about initializing static</para>
    /// <para>class members, while dynamic class members (such as allocated strings</para>
    /// <para>or reference counted resources) are better handled by a GBaseInitFunc()</para>
    /// <para>for this type, so proper initialization of the dynamic class members</para>
    /// <para>is performed for class initialization of derived types as well.</para>
    /// <para>An example may help to correspond the intend of the different class</para>
    /// <para>initializers:</para>
    /// <para>|[&lt;&gt;!-- language=&quot;C&quot; --&gt;</para>
    /// <para>typedef struct {</para>
    /// <para>GObjectClass parent_class;</para>
    /// <para>gint         static_integer;</para>
    /// <para>gchar       *dynamic_string;</para>
    /// <para>} TypeAClass;</para>
    /// <para>static void</para>
    /// <para>type_a_base_class_init (TypeAClass *class)</para>
    /// <para>{</para>
    /// <para>class-&gt;dynamic_string = g_strdup (&quot;some string&quot;);</para>
    /// <para>}</para>
    /// <para>static void</para>
    /// <para>type_a_base_class_finalize (TypeAClass *class)</para>
    /// <para>{</para>
    /// <para>g_free (class-&gt;dynamic_string);</para>
    /// <para>}</para>
    /// <para>static void</para>
    /// <para>type_a_class_init (TypeAClass *class)</para>
    /// <para>{</para>
    /// <para>class-&gt;static_integer = 42;</para>
    /// <para>}</para>
    /// <para>typedef struct {</para>
    /// <para>TypeAClass   parent_class;</para>
    /// <para>gfloat       static_float;</para>
    /// <para>GString     *dynamic_gstring;</para>
    /// <para>} TypeBClass;</para>
    /// <para>static void</para>
    /// <para>type_b_base_class_init (TypeBClass *class)</para>
    /// <para>{</para>
    /// <para>class-&gt;dynamic_gstring = g_string_new (&quot;some other string&quot;);</para>
    /// <para>}</para>
    /// <para>static void</para>
    /// <para>type_b_base_class_finalize (TypeBClass *class)</para>
    /// <para>{</para>
    /// <para>g_string_free (class-&gt;dynamic_gstring);</para>
    /// <para>}</para>
    /// <para>static void</para>
    /// <para>type_b_class_init (TypeBClass *class)</para>
    /// <para>{</para>
    /// <para>class-&gt;static_float = 3.14159265358979323846;</para>
    /// <para>}</para>
    /// <para>]|</para>
    /// <para>Initialization of TypeBClass will first cause initialization of</para>
    /// <para>TypeAClass (derived classes reference their parent classes, see</para>
    /// <para>g_type_class_ref() on this).</para>
    /// <para>Initialization of TypeAClass roughly involves zero-initializing its fields,</para>
    /// <para>then calling its GBaseInitFunc() type_a_base_class_init() to allocate</para>
    /// <para>its dynamic members (dynamic_string), and finally calling its GClassInitFunc()</para>
    /// <para>type_a_class_init() to initialize its static members (static_integer).</para>
    /// <para>The first step in the initialization process of TypeBClass is then</para>
    /// <para>a plain memory copy of the contents of TypeAClass into TypeBClass and</para>
    /// <para>zero-initialization of the remaining fields in TypeBClass.</para>
    /// <para>The dynamic members of TypeAClass within TypeBClass now need</para>
    /// <para>reinitialization which is performed by calling type_a_base_class_init()</para>
    /// <para>with an argument of TypeBClass.</para>
    /// <para>After that, the GBaseInitFunc() of TypeBClass, type_b_base_class_init()</para>
    /// <para>is called to allocate the dynamic members of TypeBClass (dynamic_gstring),</para>
    /// <para>and finally the GClassInitFunc() of TypeBClass, type_b_class_init(),</para>
    /// <para>is called to complete the initialization process with the static members</para>
    /// <para>(static_float).</para>
    /// <para>Corresponding finalization counter parts to the GBaseInitFunc() functions</para>
    /// <para>have to be provided to release allocated resources at class finalization</para>
    /// <para>time.</para>
    /// </remarks>
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GClassInitFunc(global::System.IntPtr g_class, global::System.IntPtr class_data);

    /// <summary>
    /// <para>GClassFinalizeFunc:</para>
    /// <para>(type GObject.TypeClass): The #GTypeClass structure to finalize</para>
    /// </summary>
    /// <remarks>
    /// <para>A callback function used by the type system to finalize a class.</para>
    /// <para>This function is rarely needed, as dynamically allocated class resources</para>
    /// <para>should be handled by GBaseInitFunc() and GBaseFinalizeFunc().</para>
    /// <para>Also, specification of a GClassFinalizeFunc() in the #GTypeInfo</para>
    /// <para>structure of a static type is invalid, because classes of static types</para>
    /// <para>will never be finalized (they are artificially kept alive when their</para>
    /// <para>reference count drops to zero).</para>
    /// </remarks>
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GClassFinalizeFunc(global::System.IntPtr g_class, global::System.IntPtr class_data);

    /// <summary>
    /// <para>GInterfaceInitFunc:</para>
    /// <para>(type GObject.TypeInterface): The interface structure to initialize</para>
    /// <para>The</para>
    /// </summary>
    /// <remarks>
    /// <para>A callback function used by the type system to initialize a new</para>
    /// <para>interface.  This function should initialize all internal data and</para>
    /// <para>allocate any resources required by the interface.</para>
    /// <para>The members ofare guaranteed to have been filled with</para>
    /// <para>zeros before this function is called.</para>
    /// </remarks>
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GInterfaceInitFunc(global::System.IntPtr g_iface, global::System.IntPtr iface_data);

    /// <summary>
    /// <para>GInterfaceFinalizeFunc:</para>
    /// <para>(type GObject.TypeInterface): The interface structure to finalize</para>
    /// <para>The</para>
    /// </summary>
    /// <remarks>
    /// <para>A callback function used by the type system to finalize an interface.</para>
    /// <para>This function should destroy any internal data and release any resources</para>
    /// <para>allocated by the corresponding GInterfaceInitFunc() function.</para>
    /// </remarks>
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GInterfaceFinalizeFunc(global::System.IntPtr g_iface, global::System.IntPtr iface_data);

    /// <summary>
    /// <para>GTypeInterfaceCheckFunc:</para>
    /// <para>data passed to g_type_add_interface_check()</para>
    /// <para>(type GObject.TypeInterface): the interface that has been</para>
    /// <para>initialized</para>
    /// </summary>
    /// <remarks>
    /// <para>A callback called after an interface vtable is initialized.</para>
    /// <para>See g_type_add_interface_check().</para>
    /// <para>Since: 2.4</para>
    /// </remarks>
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GTypeInterfaceCheckFunc(global::System.IntPtr check_data, global::System.IntPtr g_iface);

    /// <summary>GTypeClass:</summary>
    /// <remarks>An opaque structure used as the base of all classes.</remarks>
    public unsafe partial class GTypeClass
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal ulong g_type;
        }
    }

    /// <summary>GTypeInstance:</summary>
    /// <remarks>An opaque structure used as the base of all type instances.</remarks>
    public unsafe partial class GTypeInstance
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr g_class;
        }
    }

    /// <summary>GCallback:</summary>
    /// <remarks>
    /// <para>The type used for callback functions in structure definitions and function</para>
    /// <para>signatures. This doesn't mean that all callback functions must take no</para>
    /// <para>parameters and return void. The required signature of a callback function</para>
    /// <para>is determined by the context in which is used (e.g. the signal to which it</para>
    /// <para>is connected). Use G_CALLBACK() to cast the callback function to a #GCallback.</para>
    /// </remarks>
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GCallback();

    /// <summary>
    /// <para>GBoxedCopyFunc:</para>
    /// <para>(not nullable): The boxed structure to be copied.</para>
    /// </summary>
    /// <remarks>
    /// <para>This function is provided by the user and should produce a copy</para>
    /// <para>of the passed in boxed structure.</para>
    /// <para>Returns: (not nullable): The newly created copy of the boxed structure.</para>
    /// </remarks>
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr GBoxedCopyFunc(global::System.IntPtr boxed);

    /// <summary>
    /// <para>GBoxedFreeFunc:</para>
    /// <para>(not nullable): The boxed structure to be freed.</para>
    /// </summary>
    /// <remarks>
    /// <para>This function is provided by the user and should free the boxed</para>
    /// <para>structure passed.</para>
    /// </remarks>
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GBoxedFreeFunc(global::System.IntPtr boxed);

    public unsafe partial class gparamspecs
    {
        public partial struct __Internal
        {
        }

        public static ulong* GParamSpecTypes
        {
            get
            {
                var __ptr = (ulong**)CppSharp.SymbolResolver.ResolveSymbol("libvips-42.dll", "g_param_spec_types");
                return *__ptr;
            }

            set
            {
                var __ptr = (ulong**)CppSharp.SymbolResolver.ResolveSymbol("libvips-42.dll", "g_param_spec_types");
                *__ptr = value;
            }
        }
    }

    /// <summary>gchararray:</summary>
    /// <remarks>A C representable type name for #G_TYPE_STRING.</remarks>
    public enum VipsPrecision
    {
        VIPS_PRECISION_INTEGER = 0,
        VIPS_PRECISION_FLOAT = 1,
        VIPS_PRECISION_APPROXIMATE = 2,
        VIPS_PRECISION_LAST = 3
    }

    /// <summary>VipsPel:</summary>
    /// <remarks>
    /// <para>A picture element. Cast this to whatever the associated VipsBandFormat says</para>
    /// <para>to get the value.</para>
    /// </remarks>
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int VipsCallbackFn(global::System.IntPtr a, global::System.IntPtr b);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr VipsSListMap2Fn(global::System.IntPtr item, global::System.IntPtr a, global::System.IntPtr b);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr VipsSListMap4Fn(global::System.IntPtr item, global::System.IntPtr a, global::System.IntPtr b, global::System.IntPtr c, global::System.IntPtr d);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr VipsSListFold2Fn(global::System.IntPtr item, global::System.IntPtr a, global::System.IntPtr b, global::System.IntPtr c);

    public unsafe partial class basic
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_path_filename7")]
            internal static extern sbyte* VipsPathFilename7([MarshalAs(UnmanagedType.LPStr)] string path);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_path_mode7")]
            internal static extern sbyte* VipsPathMode7([MarshalAs(UnmanagedType.LPStr)] string path);
        }

        public static sbyte* VipsPathFilename7(string path)
        {
            var __ret = __Internal.VipsPathFilename7(path);
            return __ret;
        }

        public static sbyte* VipsPathMode7(string path)
        {
            var __ret = __Internal.VipsPathMode7(path);
            return __ret;
        }
    }

    public unsafe partial class VipsBuf : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 32)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr @base;

            [FieldOffset(8)]
            internal int mx;

            [FieldOffset(12)]
            internal int i;

            [FieldOffset(16)]
            internal int full;

            [FieldOffset(20)]
            internal int lasti;

            [FieldOffset(24)]
            internal int dynamic;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_VipsBuf@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsBuf> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsBuf>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsBuf __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsBuf(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsBuf __CreateInstance(global::NetVips.VipsBuf.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsBuf(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsBuf.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsBuf.__Internal));
            *(global::NetVips.VipsBuf.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsBuf(global::NetVips.VipsBuf.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsBuf(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VipsBuf()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsBuf.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public VipsBuf(global::NetVips.VipsBuf _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsBuf.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NetVips.VipsBuf.__Internal*) __Instance) = *((global::NetVips.VipsBuf.__Internal*) _0.__Instance);
        }

        ~VipsBuf()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsBuf __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public sbyte* Base
        {
            get
            {
                return (sbyte*) ((global::NetVips.VipsBuf.__Internal*) __Instance)->@base;
            }

            set
            {
                ((global::NetVips.VipsBuf.__Internal*)__Instance)->@base = (global::System.IntPtr) value;
            }
        }

        public int Mx
        {
            get
            {
                return ((global::NetVips.VipsBuf.__Internal*) __Instance)->mx;
            }

            set
            {
                ((global::NetVips.VipsBuf.__Internal*)__Instance)->mx = value;
            }
        }

        public int I
        {
            get
            {
                return ((global::NetVips.VipsBuf.__Internal*) __Instance)->i;
            }

            set
            {
                ((global::NetVips.VipsBuf.__Internal*)__Instance)->i = value;
            }
        }

        public int Full
        {
            get
            {
                return ((global::NetVips.VipsBuf.__Internal*) __Instance)->full;
            }

            set
            {
                ((global::NetVips.VipsBuf.__Internal*)__Instance)->full = value;
            }
        }

        public int Lasti
        {
            get
            {
                return ((global::NetVips.VipsBuf.__Internal*) __Instance)->lasti;
            }

            set
            {
                ((global::NetVips.VipsBuf.__Internal*)__Instance)->lasti = value;
            }
        }

        public int Dynamic
        {
            get
            {
                return ((global::NetVips.VipsBuf.__Internal*) __Instance)->dynamic;
            }

            set
            {
                ((global::NetVips.VipsBuf.__Internal*)__Instance)->dynamic = value;
            }
        }
    }

    public unsafe partial class buf
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_buf_rewind")]
            internal static extern void VipsBufRewind(global::System.IntPtr buf);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_buf_destroy")]
            internal static extern void VipsBufDestroy(global::System.IntPtr buf);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_buf_init")]
            internal static extern void VipsBufInit(global::System.IntPtr buf);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_buf_set_static")]
            internal static extern void VipsBufSetStatic(global::System.IntPtr buf, sbyte* @base, int mx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_buf_set_dynamic")]
            internal static extern void VipsBufSetDynamic(global::System.IntPtr buf, int mx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_buf_init_static")]
            internal static extern void VipsBufInitStatic(global::System.IntPtr buf, sbyte* @base, int mx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_buf_init_dynamic")]
            internal static extern void VipsBufInitDynamic(global::System.IntPtr buf, int mx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_buf_appendns")]
            internal static extern int VipsBufAppendns(global::System.IntPtr buf, [MarshalAs(UnmanagedType.LPStr)] string str, int sz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_buf_appends")]
            internal static extern int VipsBufAppends(global::System.IntPtr buf, [MarshalAs(UnmanagedType.LPStr)] string str);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_buf_appendf")]
            internal static extern int VipsBufAppendf(global::System.IntPtr buf, [MarshalAs(UnmanagedType.LPStr)] string fmt, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_buf_appendc")]
            internal static extern int VipsBufAppendc(global::System.IntPtr buf, sbyte ch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_buf_appendsc")]
            internal static extern int VipsBufAppendsc(global::System.IntPtr buf, int quote, [MarshalAs(UnmanagedType.LPStr)] string str);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_buf_append_size")]
            internal static extern int VipsBufAppendSize(global::System.IntPtr buf, ulong n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_buf_removec")]
            internal static extern int VipsBufRemovec(global::System.IntPtr buf, sbyte ch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_buf_change")]
            internal static extern int VipsBufChange(global::System.IntPtr buf, [MarshalAs(UnmanagedType.LPStr)] string o, [MarshalAs(UnmanagedType.LPStr)] string n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_buf_is_empty")]
            internal static extern int VipsBufIsEmpty(global::System.IntPtr buf);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_buf_is_full")]
            internal static extern int VipsBufIsFull(global::System.IntPtr buf);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_buf_all")]
            internal static extern global::System.IntPtr VipsBufAll(global::System.IntPtr buf);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_buf_firstline")]
            internal static extern global::System.IntPtr VipsBufFirstline(global::System.IntPtr buf);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_buf_appendg")]
            internal static extern int VipsBufAppendg(global::System.IntPtr buf, double g);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_buf_appendd")]
            internal static extern int VipsBufAppendd(global::System.IntPtr buf, int d);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_buf_len")]
            internal static extern int VipsBufLen(global::System.IntPtr buf);
        }

        public static void VipsBufRewind(global::NetVips.VipsBuf buf)
        {
            var __arg0 = ReferenceEquals(buf, null) ? global::System.IntPtr.Zero : buf.__Instance;
            __Internal.VipsBufRewind(__arg0);
        }

        public static void VipsBufDestroy(global::NetVips.VipsBuf buf)
        {
            var __arg0 = ReferenceEquals(buf, null) ? global::System.IntPtr.Zero : buf.__Instance;
            __Internal.VipsBufDestroy(__arg0);
        }

        public static void VipsBufInit(global::NetVips.VipsBuf buf)
        {
            var __arg0 = ReferenceEquals(buf, null) ? global::System.IntPtr.Zero : buf.__Instance;
            __Internal.VipsBufInit(__arg0);
        }

        public static void VipsBufSetStatic(global::NetVips.VipsBuf buf, sbyte* @base, int mx)
        {
            var __arg0 = ReferenceEquals(buf, null) ? global::System.IntPtr.Zero : buf.__Instance;
            __Internal.VipsBufSetStatic(__arg0, @base, mx);
        }

        public static void VipsBufSetDynamic(global::NetVips.VipsBuf buf, int mx)
        {
            var __arg0 = ReferenceEquals(buf, null) ? global::System.IntPtr.Zero : buf.__Instance;
            __Internal.VipsBufSetDynamic(__arg0, mx);
        }

        public static void VipsBufInitStatic(global::NetVips.VipsBuf buf, sbyte* @base, int mx)
        {
            var __arg0 = ReferenceEquals(buf, null) ? global::System.IntPtr.Zero : buf.__Instance;
            __Internal.VipsBufInitStatic(__arg0, @base, mx);
        }

        public static void VipsBufInitDynamic(global::NetVips.VipsBuf buf, int mx)
        {
            var __arg0 = ReferenceEquals(buf, null) ? global::System.IntPtr.Zero : buf.__Instance;
            __Internal.VipsBufInitDynamic(__arg0, mx);
        }

        public static int VipsBufAppendns(global::NetVips.VipsBuf buf, string str, int sz)
        {
            var __arg0 = ReferenceEquals(buf, null) ? global::System.IntPtr.Zero : buf.__Instance;
            var __ret = __Internal.VipsBufAppendns(__arg0, str, sz);
            return __ret;
        }

        public static int VipsBufAppends(global::NetVips.VipsBuf buf, string str)
        {
            var __arg0 = ReferenceEquals(buf, null) ? global::System.IntPtr.Zero : buf.__Instance;
            var __ret = __Internal.VipsBufAppends(__arg0, str);
            return __ret;
        }

        public static int VipsBufAppendf(global::NetVips.VipsBuf buf, string fmt, string[] options = null)
        {
            var __arg0 = ReferenceEquals(buf, null) ? global::System.IntPtr.Zero : buf.__Instance;
            var __ret = __Internal.VipsBufAppendf(__arg0, fmt, options);
            return __ret;
        }

        public static int VipsBufAppendc(global::NetVips.VipsBuf buf, sbyte ch)
        {
            var __arg0 = ReferenceEquals(buf, null) ? global::System.IntPtr.Zero : buf.__Instance;
            var __ret = __Internal.VipsBufAppendc(__arg0, ch);
            return __ret;
        }

        public static int VipsBufAppendsc(global::NetVips.VipsBuf buf, int quote, string str)
        {
            var __arg0 = ReferenceEquals(buf, null) ? global::System.IntPtr.Zero : buf.__Instance;
            var __ret = __Internal.VipsBufAppendsc(__arg0, quote, str);
            return __ret;
        }

        public static int VipsBufAppendSize(global::NetVips.VipsBuf buf, ulong n)
        {
            var __arg0 = ReferenceEquals(buf, null) ? global::System.IntPtr.Zero : buf.__Instance;
            var __ret = __Internal.VipsBufAppendSize(__arg0, n);
            return __ret;
        }

        public static int VipsBufRemovec(global::NetVips.VipsBuf buf, sbyte ch)
        {
            var __arg0 = ReferenceEquals(buf, null) ? global::System.IntPtr.Zero : buf.__Instance;
            var __ret = __Internal.VipsBufRemovec(__arg0, ch);
            return __ret;
        }

        public static int VipsBufChange(global::NetVips.VipsBuf buf, string o, string n)
        {
            var __arg0 = ReferenceEquals(buf, null) ? global::System.IntPtr.Zero : buf.__Instance;
            var __ret = __Internal.VipsBufChange(__arg0, o, n);
            return __ret;
        }

        public static int VipsBufIsEmpty(global::NetVips.VipsBuf buf)
        {
            var __arg0 = ReferenceEquals(buf, null) ? global::System.IntPtr.Zero : buf.__Instance;
            var __ret = __Internal.VipsBufIsEmpty(__arg0);
            return __ret;
        }

        public static int VipsBufIsFull(global::NetVips.VipsBuf buf)
        {
            var __arg0 = ReferenceEquals(buf, null) ? global::System.IntPtr.Zero : buf.__Instance;
            var __ret = __Internal.VipsBufIsFull(__arg0);
            return __ret;
        }

        public static string VipsBufAll(global::NetVips.VipsBuf buf)
        {
            var __arg0 = ReferenceEquals(buf, null) ? global::System.IntPtr.Zero : buf.__Instance;
            var __ret = __Internal.VipsBufAll(__arg0);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static string VipsBufFirstline(global::NetVips.VipsBuf buf)
        {
            var __arg0 = ReferenceEquals(buf, null) ? global::System.IntPtr.Zero : buf.__Instance;
            var __ret = __Internal.VipsBufFirstline(__arg0);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static int VipsBufAppendg(global::NetVips.VipsBuf buf, double g)
        {
            var __arg0 = ReferenceEquals(buf, null) ? global::System.IntPtr.Zero : buf.__Instance;
            var __ret = __Internal.VipsBufAppendg(__arg0, g);
            return __ret;
        }

        public static int VipsBufAppendd(global::NetVips.VipsBuf buf, int d)
        {
            var __arg0 = ReferenceEquals(buf, null) ? global::System.IntPtr.Zero : buf.__Instance;
            var __ret = __Internal.VipsBufAppendd(__arg0, d);
            return __ret;
        }

        public static int VipsBufLen(global::NetVips.VipsBuf buf)
        {
            var __arg0 = ReferenceEquals(buf, null) ? global::System.IntPtr.Zero : buf.__Instance;
            var __ret = __Internal.VipsBufLen(__arg0);
            return __ret;
        }
    }

    public unsafe partial class VipsDbuf : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 32)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr data;

            [FieldOffset(8)]
            internal ulong allocated_size;

            [FieldOffset(16)]
            internal ulong data_size;

            [FieldOffset(24)]
            internal ulong write_point;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_VipsDbuf@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsDbuf> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsDbuf>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsDbuf __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsDbuf(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsDbuf __CreateInstance(global::NetVips.VipsDbuf.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsDbuf(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsDbuf.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsDbuf.__Internal));
            *(global::NetVips.VipsDbuf.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsDbuf(global::NetVips.VipsDbuf.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsDbuf(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VipsDbuf()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsDbuf.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public VipsDbuf(global::NetVips.VipsDbuf _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsDbuf.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NetVips.VipsDbuf.__Internal*) __Instance) = *((global::NetVips.VipsDbuf.__Internal*) _0.__Instance);
        }

        ~VipsDbuf()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsDbuf __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public byte* Data
        {
            get
            {
                return (byte*) ((global::NetVips.VipsDbuf.__Internal*) __Instance)->data;
            }

            set
            {
                ((global::NetVips.VipsDbuf.__Internal*)__Instance)->data = (global::System.IntPtr) value;
            }
        }

        public ulong AllocatedSize
        {
            get
            {
                return ((global::NetVips.VipsDbuf.__Internal*) __Instance)->allocated_size;
            }

            set
            {
                ((global::NetVips.VipsDbuf.__Internal*)__Instance)->allocated_size = value;
            }
        }

        public ulong DataSize
        {
            get
            {
                return ((global::NetVips.VipsDbuf.__Internal*) __Instance)->data_size;
            }

            set
            {
                ((global::NetVips.VipsDbuf.__Internal*)__Instance)->data_size = value;
            }
        }

        public ulong WritePoint
        {
            get
            {
                return ((global::NetVips.VipsDbuf.__Internal*) __Instance)->write_point;
            }

            set
            {
                ((global::NetVips.VipsDbuf.__Internal*)__Instance)->write_point = value;
            }
        }
    }

    public unsafe partial class dbuf
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_dbuf_destroy")]
            internal static extern void VipsDbufDestroy(global::System.IntPtr dbuf);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_dbuf_init")]
            internal static extern void VipsDbufInit(global::System.IntPtr dbuf);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_dbuf_allocate")]
            internal static extern int VipsDbufAllocate(global::System.IntPtr dbuf, ulong size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_dbuf_read")]
            internal static extern ulong VipsDbufRead(global::System.IntPtr dbuf, byte* data, ulong size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_dbuf_get_write")]
            internal static extern byte* VipsDbufGetWrite(global::System.IntPtr dbuf, ulong* size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_dbuf_write")]
            internal static extern int VipsDbufWrite(global::System.IntPtr dbuf, byte* data, ulong size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_dbuf_writef")]
            internal static extern int VipsDbufWritef(global::System.IntPtr dbuf, [MarshalAs(UnmanagedType.LPStr)] string fmt, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_dbuf_write_amp")]
            internal static extern int VipsDbufWriteAmp(global::System.IntPtr dbuf, [MarshalAs(UnmanagedType.LPStr)] string str);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_dbuf_reset")]
            internal static extern void VipsDbufReset(global::System.IntPtr dbuf);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_dbuf_seek")]
            internal static extern int VipsDbufSeek(global::System.IntPtr dbuf, int offset, int whence);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_dbuf_truncate")]
            internal static extern void VipsDbufTruncate(global::System.IntPtr dbuf);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_dbuf_tell")]
            internal static extern int VipsDbufTell(global::System.IntPtr dbuf);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_dbuf_string")]
            internal static extern byte* VipsDbufString(global::System.IntPtr dbuf, ulong* size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_dbuf_steal")]
            internal static extern byte* VipsDbufSteal(global::System.IntPtr dbuf, ulong* size);
        }

        public static void VipsDbufDestroy(global::NetVips.VipsDbuf dbuf)
        {
            var __arg0 = ReferenceEquals(dbuf, null) ? global::System.IntPtr.Zero : dbuf.__Instance;
            __Internal.VipsDbufDestroy(__arg0);
        }

        public static void VipsDbufInit(global::NetVips.VipsDbuf dbuf)
        {
            var __arg0 = ReferenceEquals(dbuf, null) ? global::System.IntPtr.Zero : dbuf.__Instance;
            __Internal.VipsDbufInit(__arg0);
        }

        public static int VipsDbufAllocate(global::NetVips.VipsDbuf dbuf, ulong size)
        {
            var __arg0 = ReferenceEquals(dbuf, null) ? global::System.IntPtr.Zero : dbuf.__Instance;
            var __ret = __Internal.VipsDbufAllocate(__arg0, size);
            return __ret;
        }

        public static ulong VipsDbufRead(global::NetVips.VipsDbuf dbuf, byte* data, ulong size)
        {
            var __arg0 = ReferenceEquals(dbuf, null) ? global::System.IntPtr.Zero : dbuf.__Instance;
            var __ret = __Internal.VipsDbufRead(__arg0, data, size);
            return __ret;
        }

        public static byte* VipsDbufGetWrite(global::NetVips.VipsDbuf dbuf, ref ulong size)
        {
            var __arg0 = ReferenceEquals(dbuf, null) ? global::System.IntPtr.Zero : dbuf.__Instance;
            fixed (ulong* __refParamPtr1 = &size)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.VipsDbufGetWrite(__arg0, __arg1);
                return __ret;
            }
        }

        public static int VipsDbufWrite(global::NetVips.VipsDbuf dbuf, byte* data, ulong size)
        {
            var __arg0 = ReferenceEquals(dbuf, null) ? global::System.IntPtr.Zero : dbuf.__Instance;
            var __ret = __Internal.VipsDbufWrite(__arg0, data, size);
            return __ret;
        }

        public static int VipsDbufWritef(global::NetVips.VipsDbuf dbuf, string fmt, string[] options = null)
        {
            var __arg0 = ReferenceEquals(dbuf, null) ? global::System.IntPtr.Zero : dbuf.__Instance;
            var __ret = __Internal.VipsDbufWritef(__arg0, fmt, options);
            return __ret;
        }

        public static int VipsDbufWriteAmp(global::NetVips.VipsDbuf dbuf, string str)
        {
            var __arg0 = ReferenceEquals(dbuf, null) ? global::System.IntPtr.Zero : dbuf.__Instance;
            var __ret = __Internal.VipsDbufWriteAmp(__arg0, str);
            return __ret;
        }

        public static void VipsDbufReset(global::NetVips.VipsDbuf dbuf)
        {
            var __arg0 = ReferenceEquals(dbuf, null) ? global::System.IntPtr.Zero : dbuf.__Instance;
            __Internal.VipsDbufReset(__arg0);
        }

        public static int VipsDbufSeek(global::NetVips.VipsDbuf dbuf, int offset, int whence)
        {
            var __arg0 = ReferenceEquals(dbuf, null) ? global::System.IntPtr.Zero : dbuf.__Instance;
            var __ret = __Internal.VipsDbufSeek(__arg0, offset, whence);
            return __ret;
        }

        public static void VipsDbufTruncate(global::NetVips.VipsDbuf dbuf)
        {
            var __arg0 = ReferenceEquals(dbuf, null) ? global::System.IntPtr.Zero : dbuf.__Instance;
            __Internal.VipsDbufTruncate(__arg0);
        }

        public static int VipsDbufTell(global::NetVips.VipsDbuf dbuf)
        {
            var __arg0 = ReferenceEquals(dbuf, null) ? global::System.IntPtr.Zero : dbuf.__Instance;
            var __ret = __Internal.VipsDbufTell(__arg0);
            return __ret;
        }

        public static byte* VipsDbufString(global::NetVips.VipsDbuf dbuf, ref ulong size)
        {
            var __arg0 = ReferenceEquals(dbuf, null) ? global::System.IntPtr.Zero : dbuf.__Instance;
            fixed (ulong* __refParamPtr1 = &size)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.VipsDbufString(__arg0, __arg1);
                return __ret;
            }
        }

        public static byte* VipsDbufSteal(global::NetVips.VipsDbuf dbuf, ref ulong size)
        {
            var __arg0 = ReferenceEquals(dbuf, null) ? global::System.IntPtr.Zero : dbuf.__Instance;
            fixed (ulong* __refParamPtr1 = &size)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.VipsDbufSteal(__arg0, __arg1);
                return __ret;
            }
        }
    }

    /// <summary>
    /// <para>VipsToken:</para>
    /// <para>left bracket</para>
    /// <para>right bracket</para>
    /// <para>string constant</para>
    /// <para>equals sign</para>
    /// <para>comma</para>
    /// </summary>
    /// <remarks>
    /// <para>Tokens returned by the vips lexical analyzer, see vips__token_get(). This</para>
    /// <para>is used to parse option strings for arguments.</para>
    /// <para>Left and right brackets can be any of (, {, [,&lt;&gt;.</para>
    /// <para>Strings may be in double quotes, and may contain escaped quote characters,</para>
    /// <para>for example string, &quot;string&quot; and &quot;str&quot;ing&quot;.</para>
    /// </remarks>
    public enum VipsToken
    {
        VIPS_TOKEN_LEFT = 1,
        VIPS_TOKEN_RIGHT = 2,
        VIPS_TOKEN_STRING = 3,
        VIPS_TOKEN_EQUALS = 4,
        VIPS_TOKEN_COMMA = 5
    }

    public unsafe partial class util
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_enum_string")]
            internal static extern global::System.IntPtr VipsEnumString(ulong enm, int value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_enum_nick")]
            internal static extern global::System.IntPtr VipsEnumNick(ulong enm, int value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_enum_from_nick")]
            internal static extern int VipsEnumFromNick([MarshalAs(UnmanagedType.LPStr)] string domain, ulong type, [MarshalAs(UnmanagedType.LPStr)] string str);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_flags_from_nick")]
            internal static extern int VipsFlagsFromNick([MarshalAs(UnmanagedType.LPStr)] string domain, ulong type, [MarshalAs(UnmanagedType.LPStr)] string nick);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_map_equal")]
            internal static extern global::System.IntPtr VipsMapEqual(global::System.IntPtr a, global::System.IntPtr b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_strncpy")]
            internal static extern sbyte* VipsStrncpy(sbyte* dest, [MarshalAs(UnmanagedType.LPStr)] string src, int n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_strrstr")]
            internal static extern sbyte* VipsStrrstr([MarshalAs(UnmanagedType.LPStr)] string haystack, [MarshalAs(UnmanagedType.LPStr)] string needle);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_ispostfix")]
            internal static extern int VipsIspostfix([MarshalAs(UnmanagedType.LPStr)] string a, [MarshalAs(UnmanagedType.LPStr)] string b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_iscasepostfix")]
            internal static extern int VipsIscasepostfix([MarshalAs(UnmanagedType.LPStr)] string a, [MarshalAs(UnmanagedType.LPStr)] string b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_isprefix")]
            internal static extern int VipsIsprefix([MarshalAs(UnmanagedType.LPStr)] string a, [MarshalAs(UnmanagedType.LPStr)] string b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_break_token")]
            internal static extern sbyte* VipsBreakToken(sbyte* str, [MarshalAs(UnmanagedType.LPStr)] string brk);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__chomp")]
            internal static extern void VipsChomp(sbyte* str);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_snprintf")]
            internal static extern int VipsSnprintf(sbyte* str, ulong size, [MarshalAs(UnmanagedType.LPStr)] string format, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_filename_suffix_match")]
            internal static extern int VipsFilenameSuffixMatch([MarshalAs(UnmanagedType.LPStr)] string path, [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPStr)] string[] suffixes);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_file_length")]
            internal static extern long VipsFileLength(int fd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__write")]
            internal static extern int VipsWrite(int fd, global::System.IntPtr buf, ulong count);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__open")]
            internal static extern int VipsOpen([MarshalAs(UnmanagedType.LPStr)] string filename, int flags, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__open_read")]
            internal static extern int VipsOpenRead([MarshalAs(UnmanagedType.LPStr)] string filename);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__fopen")]
            internal static extern global::System.IntPtr VipsFopen([MarshalAs(UnmanagedType.LPStr)] string filename, [MarshalAs(UnmanagedType.LPStr)] string mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__file_open_read")]
            internal static extern global::System.IntPtr VipsFileOpenRead([MarshalAs(UnmanagedType.LPStr)] string filename, [MarshalAs(UnmanagedType.LPStr)] string fallback_dir, int text_mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__file_open_write")]
            internal static extern global::System.IntPtr VipsFileOpenWrite([MarshalAs(UnmanagedType.LPStr)] string filename, int text_mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__file_read")]
            internal static extern sbyte* VipsFileRead(global::System.IntPtr fp, [MarshalAs(UnmanagedType.LPStr)] string name, ulong* length_out);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__file_read_name")]
            internal static extern sbyte* VipsFileReadName([MarshalAs(UnmanagedType.LPStr)] string name, [MarshalAs(UnmanagedType.LPStr)] string fallback_dir, ulong* length_out);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__file_write")]
            internal static extern int VipsFileWrite(global::System.IntPtr data, ulong size, ulong nmemb, global::System.IntPtr stream);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__get_bytes")]
            internal static extern int VipsGetBytes([MarshalAs(UnmanagedType.LPStr)] string filename, byte[] buf, int len);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__fgetc")]
            internal static extern int VipsFgetc(global::System.IntPtr fp);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__seek")]
            internal static extern int VipsSeek(int fd, long pos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__ftruncate")]
            internal static extern int VipsFtruncate(int fd, long pos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_existsf")]
            internal static extern int VipsExistsf([MarshalAs(UnmanagedType.LPStr)] string name, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_mkdirf")]
            internal static extern int VipsMkdirf([MarshalAs(UnmanagedType.LPStr)] string name, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_rmdirf")]
            internal static extern int VipsRmdirf([MarshalAs(UnmanagedType.LPStr)] string name, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_rename")]
            internal static extern int VipsRename([MarshalAs(UnmanagedType.LPStr)] string old_name, [MarshalAs(UnmanagedType.LPStr)] string new_name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_popenf")]
            internal static extern global::System.IntPtr VipsPopenf([MarshalAs(UnmanagedType.LPStr)] string fmt, [MarshalAs(UnmanagedType.LPStr)] string mode, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__token_get")]
            internal static extern global::System.IntPtr VipsTokenGet([MarshalAs(UnmanagedType.LPStr)] string buffer, global::NetVips.VipsToken* token, sbyte* @string, int size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__token_must")]
            internal static extern global::System.IntPtr VipsTokenMust([MarshalAs(UnmanagedType.LPStr)] string buffer, global::NetVips.VipsToken* token, sbyte* @string, int size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__token_need")]
            internal static extern global::System.IntPtr VipsTokenNeed([MarshalAs(UnmanagedType.LPStr)] string buffer, global::NetVips.VipsToken need_token, sbyte* @string, int size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__token_segment")]
            internal static extern global::System.IntPtr VipsTokenSegment([MarshalAs(UnmanagedType.LPStr)] string p, global::NetVips.VipsToken* token, sbyte* @string, int size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__token_segment_need")]
            internal static extern global::System.IntPtr VipsTokenSegmentNeed([MarshalAs(UnmanagedType.LPStr)] string p, global::NetVips.VipsToken need_token, sbyte* @string, int size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__find_rightmost_brackets")]
            internal static extern global::System.IntPtr VipsFindRightmostBrackets([MarshalAs(UnmanagedType.LPStr)] string p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__filename_split8")]
            internal static extern void VipsFilenameSplit8([MarshalAs(UnmanagedType.LPStr)] string name, sbyte* filename, sbyte* option_string);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_ispoweroftwo")]
            internal static extern int VipsIspoweroftwo(int p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_amiMSBfirst")]
            internal static extern int VipsAmiMSBfirst();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__temp_name")]
            internal static extern sbyte* VipsTempName([MarshalAs(UnmanagedType.LPStr)] string format);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__change_suffix")]
            internal static extern void VipsChangeSuffix([MarshalAs(UnmanagedType.LPStr)] string name, sbyte* @out, int mx, [MarshalAs(UnmanagedType.LPStr)] string new_suff, sbyte** olds, int nolds);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_realpath")]
            internal static extern sbyte* VipsRealpath([MarshalAs(UnmanagedType.LPStr)] string path);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__random")]
            internal static extern uint VipsRandom(uint seed);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__random_add")]
            internal static extern uint VipsRandomAdd(uint seed, int value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__icc_dir")]
            internal static extern global::System.IntPtr VipsIccDir();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__windows_prefix")]
            internal static extern global::System.IntPtr VipsWindowsPrefix();
        }

        public static string VipsEnumString(ulong enm, int value)
        {
            var __ret = __Internal.VipsEnumString(enm, value);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static string VipsEnumNick(ulong enm, int value)
        {
            var __ret = __Internal.VipsEnumNick(enm, value);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static int VipsEnumFromNick(string domain, ulong type, string str)
        {
            var __ret = __Internal.VipsEnumFromNick(domain, type, str);
            return __ret;
        }

        public static int VipsFlagsFromNick(string domain, ulong type, string nick)
        {
            var __ret = __Internal.VipsFlagsFromNick(domain, type, nick);
            return __ret;
        }

        public static global::System.IntPtr VipsMapEqual(global::System.IntPtr a, global::System.IntPtr b)
        {
            var __ret = __Internal.VipsMapEqual(a, b);
            return __ret;
        }

        public static sbyte* VipsStrncpy(sbyte* dest, string src, int n)
        {
            var __ret = __Internal.VipsStrncpy(dest, src, n);
            return __ret;
        }

        public static sbyte* VipsStrrstr(string haystack, string needle)
        {
            var __ret = __Internal.VipsStrrstr(haystack, needle);
            return __ret;
        }

        public static int VipsIspostfix(string a, string b)
        {
            var __ret = __Internal.VipsIspostfix(a, b);
            return __ret;
        }

        public static int VipsIscasepostfix(string a, string b)
        {
            var __ret = __Internal.VipsIscasepostfix(a, b);
            return __ret;
        }

        public static int VipsIsprefix(string a, string b)
        {
            var __ret = __Internal.VipsIsprefix(a, b);
            return __ret;
        }

        public static sbyte* VipsBreakToken(sbyte* str, string brk)
        {
            var __ret = __Internal.VipsBreakToken(str, brk);
            return __ret;
        }

        public static void VipsChomp(sbyte* str)
        {
            __Internal.VipsChomp(str);
        }

        public static int VipsSnprintf(sbyte* str, ulong size, string format, string[] options = null)
        {
            var __ret = __Internal.VipsSnprintf(str, size, format, options);
            return __ret;
        }

        public static int VipsFilenameSuffixMatch(string path, string[] suffixes)
        {
            var __ret = __Internal.VipsFilenameSuffixMatch(path, suffixes);
            return __ret;
        }

        public static long VipsFileLength(int fd)
        {
            var __ret = __Internal.VipsFileLength(fd);
            return __ret;
        }

        public static int VipsWrite(int fd, global::System.IntPtr buf, ulong count)
        {
            var __ret = __Internal.VipsWrite(fd, buf, count);
            return __ret;
        }

        public static int VipsOpen(string filename, int flags, string[] options = null)
        {
            var __ret = __Internal.VipsOpen(filename, flags, options);
            return __ret;
        }

        public static int VipsOpenRead(string filename)
        {
            var __ret = __Internal.VipsOpenRead(filename);
            return __ret;
        }

        public static global::System.IntPtr VipsFopen(string filename, string mode)
        {
            var __ret = __Internal.VipsFopen(filename, mode);
            return __ret;
        }

        public static global::System.IntPtr VipsFileOpenRead(string filename, string fallback_dir, int text_mode)
        {
            var __ret = __Internal.VipsFileOpenRead(filename, fallback_dir, text_mode);
            return __ret;
        }

        public static global::System.IntPtr VipsFileOpenWrite(string filename, int text_mode)
        {
            var __ret = __Internal.VipsFileOpenWrite(filename, text_mode);
            return __ret;
        }

        public static sbyte* VipsFileRead(global::System.IntPtr fp, string name, ref ulong length_out)
        {
            fixed (ulong* __refParamPtr2 = &length_out)
            {
                var __arg2 = __refParamPtr2;
                var __ret = __Internal.VipsFileRead(fp, name, __arg2);
                return __ret;
            }
        }

        public static sbyte* VipsFileReadName(string name, string fallback_dir, ref ulong length_out)
        {
            fixed (ulong* __refParamPtr2 = &length_out)
            {
                var __arg2 = __refParamPtr2;
                var __ret = __Internal.VipsFileReadName(name, fallback_dir, __arg2);
                return __ret;
            }
        }

        public static int VipsFileWrite(global::System.IntPtr data, ulong size, ulong nmemb, global::System.IntPtr stream)
        {
            var __ret = __Internal.VipsFileWrite(data, size, nmemb, stream);
            return __ret;
        }

        public static int VipsGetBytes(string filename, byte[] buf, int len)
        {
            var __ret = __Internal.VipsGetBytes(filename, buf, len);
            return __ret;
        }

        public static int VipsFgetc(global::System.IntPtr fp)
        {
            var __ret = __Internal.VipsFgetc(fp);
            return __ret;
        }

        public static int VipsSeek(int fd, long pos)
        {
            var __ret = __Internal.VipsSeek(fd, pos);
            return __ret;
        }

        public static int VipsFtruncate(int fd, long pos)
        {
            var __ret = __Internal.VipsFtruncate(fd, pos);
            return __ret;
        }

        public static int VipsExistsf(string name, string[] options = null)
        {
            var __ret = __Internal.VipsExistsf(name, options);
            return __ret;
        }

        public static int VipsMkdirf(string name, string[] options = null)
        {
            var __ret = __Internal.VipsMkdirf(name, options);
            return __ret;
        }

        public static int VipsRmdirf(string name, string[] options = null)
        {
            var __ret = __Internal.VipsRmdirf(name, options);
            return __ret;
        }

        public static int VipsRename(string old_name, string new_name)
        {
            var __ret = __Internal.VipsRename(old_name, new_name);
            return __ret;
        }

        public static global::System.IntPtr VipsPopenf(string fmt, string mode, string[] options = null)
        {
            var __ret = __Internal.VipsPopenf(fmt, mode, options);
            return __ret;
        }

        public static string VipsTokenGet(string buffer, global::NetVips.VipsToken* token, sbyte* @string, int size)
        {
            var __ret = __Internal.VipsTokenGet(buffer, token, @string, size);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static string VipsTokenMust(string buffer, global::NetVips.VipsToken* token, sbyte* @string, int size)
        {
            var __ret = __Internal.VipsTokenMust(buffer, token, @string, size);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static string VipsTokenNeed(string buffer, global::NetVips.VipsToken need_token, sbyte* @string, int size)
        {
            var __ret = __Internal.VipsTokenNeed(buffer, need_token, @string, size);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static string VipsTokenSegment(string p, global::NetVips.VipsToken* token, sbyte* @string, int size)
        {
            var __ret = __Internal.VipsTokenSegment(p, token, @string, size);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static string VipsTokenSegmentNeed(string p, global::NetVips.VipsToken need_token, sbyte* @string, int size)
        {
            var __ret = __Internal.VipsTokenSegmentNeed(p, need_token, @string, size);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static string VipsFindRightmostBrackets(string p)
        {
            var __ret = __Internal.VipsFindRightmostBrackets(p);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static void VipsFilenameSplit8(string name, sbyte* filename, sbyte* option_string)
        {
            __Internal.VipsFilenameSplit8(name, filename, option_string);
        }

        public static int VipsIspoweroftwo(int p)
        {
            var __ret = __Internal.VipsIspoweroftwo(p);
            return __ret;
        }

        public static int VipsAmiMSBfirst()
        {
            var __ret = __Internal.VipsAmiMSBfirst();
            return __ret;
        }

        public static sbyte* VipsTempName(string format)
        {
            var __ret = __Internal.VipsTempName(format);
            return __ret;
        }

        public static void VipsChangeSuffix(string name, sbyte* @out, int mx, string new_suff, sbyte** olds, int nolds)
        {
            __Internal.VipsChangeSuffix(name, @out, mx, new_suff, olds, nolds);
        }

        public static sbyte* VipsRealpath(string path)
        {
            var __ret = __Internal.VipsRealpath(path);
            return __ret;
        }

        public static uint VipsRandom(uint seed)
        {
            var __ret = __Internal.VipsRandom(seed);
            return __ret;
        }

        public static uint VipsRandomAdd(uint seed, int value)
        {
            var __ret = __Internal.VipsRandomAdd(seed, value);
            return __ret;
        }

        public static string VipsIccDir()
        {
            var __ret = __Internal.VipsIccDir();
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static string VipsWindowsPrefix()
        {
            var __ret = __Internal.VipsWindowsPrefix();
            return Marshal.PtrToStringAnsi(__ret);
        }
    }

    [Flags]
    public enum VipsArgumentFlags
    {
        VIPS_ARGUMENT_NONE = 0,
        VIPS_ARGUMENT_REQUIRED = 1,
        VIPS_ARGUMENT_CONSTRUCT = 2,
        VIPS_ARGUMENT_SET_ONCE = 4,
        VIPS_ARGUMENT_SET_ALWAYS = 8,
        VIPS_ARGUMENT_INPUT = 16,
        VIPS_ARGUMENT_OUTPUT = 32,
        VIPS_ARGUMENT_DEPRECATED = 64,
        VIPS_ARGUMENT_MODIFY = 128
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr VipsObjectSetArguments(global::System.IntPtr @object, global::System.IntPtr a, global::System.IntPtr b);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr VipsTypeMapFn(ulong type, global::System.IntPtr a);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr VipsTypeMap2Fn(ulong type, global::System.IntPtr a, global::System.IntPtr b);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr VipsClassMapFn(global::System.IntPtr cls, global::System.IntPtr a);

    public unsafe partial class VipsObject : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.GObject.__Internal parent_instance;

            [FieldOffset(24)]
            internal int constructed;

            [FieldOffset(28)]
            internal int static_object;

            [FieldOffset(32)]
            internal global::System.IntPtr argument_table;

            [FieldOffset(40)]
            internal global::System.IntPtr nickname;

            [FieldOffset(48)]
            internal global::System.IntPtr description;

            [FieldOffset(56)]
            internal int preclose;

            [FieldOffset(60)]
            internal int close;

            [FieldOffset(64)]
            internal int postclose;

            [FieldOffset(72)]
            internal ulong local_memory;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_VipsObject@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsObject> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsObject>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsObject __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsObject(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsObject __CreateInstance(global::NetVips.VipsObject.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsObject(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsObject.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsObject.__Internal));
            *(global::NetVips.VipsObject.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsObject(global::NetVips.VipsObject.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsObject(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VipsObject()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsObject.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public VipsObject(global::NetVips.VipsObject _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsObject.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NetVips.VipsObject.__Internal*) __Instance) = *((global::NetVips.VipsObject.__Internal*) _0.__Instance);
        }

        ~VipsObject()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsObject __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Constructed
        {
            get
            {
                return ((global::NetVips.VipsObject.__Internal*) __Instance)->constructed;
            }

            set
            {
                ((global::NetVips.VipsObject.__Internal*)__Instance)->constructed = value;
            }
        }

        public int StaticObject
        {
            get
            {
                return ((global::NetVips.VipsObject.__Internal*) __Instance)->static_object;
            }

            set
            {
                ((global::NetVips.VipsObject.__Internal*)__Instance)->static_object = value;
            }
        }

        public sbyte* Nickname
        {
            get
            {
                return (sbyte*) ((global::NetVips.VipsObject.__Internal*) __Instance)->nickname;
            }

            set
            {
                ((global::NetVips.VipsObject.__Internal*)__Instance)->nickname = (global::System.IntPtr) value;
            }
        }

        public sbyte* Description
        {
            get
            {
                return (sbyte*) ((global::NetVips.VipsObject.__Internal*) __Instance)->description;
            }

            set
            {
                ((global::NetVips.VipsObject.__Internal*)__Instance)->description = (global::System.IntPtr) value;
            }
        }

        public int Preclose
        {
            get
            {
                return ((global::NetVips.VipsObject.__Internal*) __Instance)->preclose;
            }

            set
            {
                ((global::NetVips.VipsObject.__Internal*)__Instance)->preclose = value;
            }
        }

        public int Close
        {
            get
            {
                return ((global::NetVips.VipsObject.__Internal*) __Instance)->close;
            }

            set
            {
                ((global::NetVips.VipsObject.__Internal*)__Instance)->close = value;
            }
        }

        public int Postclose
        {
            get
            {
                return ((global::NetVips.VipsObject.__Internal*) __Instance)->postclose;
            }

            set
            {
                ((global::NetVips.VipsObject.__Internal*)__Instance)->postclose = value;
            }
        }

        public ulong LocalMemory
        {
            get
            {
                return ((global::NetVips.VipsObject.__Internal*) __Instance)->local_memory;
            }

            set
            {
                ((global::NetVips.VipsObject.__Internal*)__Instance)->local_memory = value;
            }
        }
    }

    public unsafe partial class VipsObjectClass : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 328)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.GObjectClass.__Internal parent_class;

            [FieldOffset(136)]
            internal global::System.IntPtr build;

            [FieldOffset(144)]
            internal global::System.IntPtr postbuild;

            [FieldOffset(152)]
            internal global::System.IntPtr summary_class;

            [FieldOffset(160)]
            internal global::System.IntPtr summary;

            [FieldOffset(168)]
            internal global::System.IntPtr dump;

            [FieldOffset(176)]
            internal global::System.IntPtr sanity;

            [FieldOffset(184)]
            internal global::System.IntPtr rewind;

            [FieldOffset(192)]
            internal global::System.IntPtr preclose;

            [FieldOffset(200)]
            internal global::System.IntPtr close;

            [FieldOffset(208)]
            internal global::System.IntPtr postclose;

            [FieldOffset(216)]
            internal global::System.IntPtr new_from_string;

            [FieldOffset(224)]
            internal global::System.IntPtr to_string;

            [FieldOffset(232)]
            internal int output_needs_arg;

            [FieldOffset(240)]
            internal global::System.IntPtr output_to_arg;

            [FieldOffset(248)]
            internal global::System.IntPtr nickname;

            [FieldOffset(256)]
            internal global::System.IntPtr description;

            [FieldOffset(264)]
            internal global::System.IntPtr argument_table;

            [FieldOffset(272)]
            internal global::System.IntPtr argument_table_traverse;

            [FieldOffset(280)]
            internal ulong argument_table_traverse_gtype;

            [FieldOffset(288)]
            internal int deprecated;

            [FieldOffset(296)]
            internal global::System.IntPtr _vips_reserved1;

            [FieldOffset(304)]
            internal global::System.IntPtr _vips_reserved2;

            [FieldOffset(312)]
            internal global::System.IntPtr _vips_reserved3;

            [FieldOffset(320)]
            internal global::System.IntPtr _vips_reserved4;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_VipsObjectClass@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsObjectClass> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsObjectClass>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsObjectClass __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsObjectClass(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsObjectClass __CreateInstance(global::NetVips.VipsObjectClass.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsObjectClass(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsObjectClass.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsObjectClass.__Internal));
            *(global::NetVips.VipsObjectClass.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsObjectClass(global::NetVips.VipsObjectClass.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsObjectClass(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VipsObjectClass()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsObjectClass.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public VipsObjectClass(global::NetVips.VipsObjectClass _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsObjectClass.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NetVips.VipsObjectClass.__Internal*) __Instance) = *((global::NetVips.VipsObjectClass.__Internal*) _0.__Instance);
        }

        ~VipsObjectClass()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsObjectClass __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int OutputNeedsArg
        {
            get
            {
                return ((global::NetVips.VipsObjectClass.__Internal*) __Instance)->output_needs_arg;
            }

            set
            {
                ((global::NetVips.VipsObjectClass.__Internal*)__Instance)->output_needs_arg = value;
            }
        }

        public string Nickname
        {
            get
            {
                return Marshal.PtrToStringAnsi(((global::NetVips.VipsObjectClass.__Internal*) __Instance)->nickname);
            }

            set
            {
                ((global::NetVips.VipsObjectClass.__Internal*)__Instance)->nickname = Marshal.StringToHGlobalAnsi(value);
            }
        }

        public string Description
        {
            get
            {
                return Marshal.PtrToStringAnsi(((global::NetVips.VipsObjectClass.__Internal*) __Instance)->description);
            }

            set
            {
                ((global::NetVips.VipsObjectClass.__Internal*)__Instance)->description = Marshal.StringToHGlobalAnsi(value);
            }
        }

        public ulong ArgumentTableTraverseGtype
        {
            get
            {
                return ((global::NetVips.VipsObjectClass.__Internal*) __Instance)->argument_table_traverse_gtype;
            }

            set
            {
                ((global::NetVips.VipsObjectClass.__Internal*)__Instance)->argument_table_traverse_gtype = value;
            }
        }

        public int Deprecated
        {
            get
            {
                return ((global::NetVips.VipsObjectClass.__Internal*) __Instance)->deprecated;
            }

            set
            {
                ((global::NetVips.VipsObjectClass.__Internal*)__Instance)->deprecated = value;
            }
        }
    }

    public unsafe partial class VipsArgument : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr pspec;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_VipsArgument@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsArgument> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsArgument>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsArgument __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsArgument(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsArgument __CreateInstance(global::NetVips.VipsArgument.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsArgument(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsArgument.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsArgument.__Internal));
            *(global::NetVips.VipsArgument.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsArgument(global::NetVips.VipsArgument.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsArgument(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VipsArgument()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsArgument.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public VipsArgument(global::NetVips.VipsArgument _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsArgument.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NetVips.VipsArgument.__Internal*) __Instance) = *((global::NetVips.VipsArgument.__Internal*) _0.__Instance);
        }

        ~VipsArgument()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsArgument __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    public unsafe partial class VipsArgumentClass : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 32)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.VipsArgument.__Internal parent;

            [FieldOffset(8)]
            internal global::System.IntPtr object_class;

            [FieldOffset(16)]
            internal global::NetVips.VipsArgumentFlags flags;

            [FieldOffset(20)]
            internal int priority;

            [FieldOffset(24)]
            internal uint offset;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_VipsArgumentClass@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsArgumentClass> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsArgumentClass>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsArgumentClass __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsArgumentClass(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsArgumentClass __CreateInstance(global::NetVips.VipsArgumentClass.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsArgumentClass(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsArgumentClass.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsArgumentClass.__Internal));
            *(global::NetVips.VipsArgumentClass.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsArgumentClass(global::NetVips.VipsArgumentClass.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsArgumentClass(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VipsArgumentClass()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsArgumentClass.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public VipsArgumentClass(global::NetVips.VipsArgumentClass _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsArgumentClass.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NetVips.VipsArgumentClass.__Internal*) __Instance) = *((global::NetVips.VipsArgumentClass.__Internal*) _0.__Instance);
        }

        ~VipsArgumentClass()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsArgumentClass __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NetVips.VipsArgument Parent
        {
            get
            {
                return global::NetVips.VipsArgument.__CreateInstance(new global::System.IntPtr(&((global::NetVips.VipsArgumentClass.__Internal*) __Instance)->parent));
            }

            set
            {
                ((global::NetVips.VipsArgumentClass.__Internal*)__Instance)->parent = ReferenceEquals(value, null) ? new global::NetVips.VipsArgument.__Internal() : *(global::NetVips.VipsArgument.__Internal*) value.__Instance;
            }
        }

        public global::NetVips.VipsObjectClass ObjectClass
        {
            get
            {
                global::NetVips.VipsObjectClass __result0;
                if (((global::NetVips.VipsArgumentClass.__Internal*) __Instance)->object_class == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsObjectClass.NativeToManagedMap.ContainsKey(((global::NetVips.VipsArgumentClass.__Internal*) __Instance)->object_class))
                    __result0 = (global::NetVips.VipsObjectClass) global::NetVips.VipsObjectClass.NativeToManagedMap[((global::NetVips.VipsArgumentClass.__Internal*) __Instance)->object_class];
                else __result0 = global::NetVips.VipsObjectClass.__CreateInstance(((global::NetVips.VipsArgumentClass.__Internal*) __Instance)->object_class);
                return __result0;
            }

            set
            {
                ((global::NetVips.VipsArgumentClass.__Internal*)__Instance)->object_class = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::NetVips.VipsArgumentFlags Flags
        {
            get
            {
                return ((global::NetVips.VipsArgumentClass.__Internal*) __Instance)->flags;
            }

            set
            {
                ((global::NetVips.VipsArgumentClass.__Internal*)__Instance)->flags = value;
            }
        }

        public int Priority
        {
            get
            {
                return ((global::NetVips.VipsArgumentClass.__Internal*) __Instance)->priority;
            }

            set
            {
                ((global::NetVips.VipsArgumentClass.__Internal*)__Instance)->priority = value;
            }
        }

        public uint Offset
        {
            get
            {
                return ((global::NetVips.VipsArgumentClass.__Internal*) __Instance)->offset;
            }

            set
            {
                ((global::NetVips.VipsArgumentClass.__Internal*)__Instance)->offset = value;
            }
        }
    }

    public unsafe partial class VipsArgumentInstance : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.VipsArgument.__Internal parent;

            [FieldOffset(8)]
            internal global::System.IntPtr argument_class;

            [FieldOffset(16)]
            internal global::System.IntPtr @object;

            [FieldOffset(24)]
            internal int assigned;

            [FieldOffset(28)]
            internal uint close_id;

            [FieldOffset(32)]
            internal uint invalidate_id;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_VipsArgumentInstance@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsArgumentInstance> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsArgumentInstance>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsArgumentInstance __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsArgumentInstance(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsArgumentInstance __CreateInstance(global::NetVips.VipsArgumentInstance.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsArgumentInstance(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsArgumentInstance.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsArgumentInstance.__Internal));
            *(global::NetVips.VipsArgumentInstance.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsArgumentInstance(global::NetVips.VipsArgumentInstance.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsArgumentInstance(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VipsArgumentInstance()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsArgumentInstance.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public VipsArgumentInstance(global::NetVips.VipsArgumentInstance _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsArgumentInstance.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NetVips.VipsArgumentInstance.__Internal*) __Instance) = *((global::NetVips.VipsArgumentInstance.__Internal*) _0.__Instance);
        }

        ~VipsArgumentInstance()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsArgumentInstance __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NetVips.VipsArgument Parent
        {
            get
            {
                return global::NetVips.VipsArgument.__CreateInstance(new global::System.IntPtr(&((global::NetVips.VipsArgumentInstance.__Internal*) __Instance)->parent));
            }

            set
            {
                ((global::NetVips.VipsArgumentInstance.__Internal*)__Instance)->parent = ReferenceEquals(value, null) ? new global::NetVips.VipsArgument.__Internal() : *(global::NetVips.VipsArgument.__Internal*) value.__Instance;
            }
        }

        public global::NetVips.VipsArgumentClass ArgumentClass
        {
            get
            {
                global::NetVips.VipsArgumentClass __result0;
                if (((global::NetVips.VipsArgumentInstance.__Internal*) __Instance)->argument_class == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsArgumentClass.NativeToManagedMap.ContainsKey(((global::NetVips.VipsArgumentInstance.__Internal*) __Instance)->argument_class))
                    __result0 = (global::NetVips.VipsArgumentClass) global::NetVips.VipsArgumentClass.NativeToManagedMap[((global::NetVips.VipsArgumentInstance.__Internal*) __Instance)->argument_class];
                else __result0 = global::NetVips.VipsArgumentClass.__CreateInstance(((global::NetVips.VipsArgumentInstance.__Internal*) __Instance)->argument_class);
                return __result0;
            }

            set
            {
                ((global::NetVips.VipsArgumentInstance.__Internal*)__Instance)->argument_class = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::NetVips.VipsObject Object
        {
            get
            {
                global::NetVips.VipsObject __result0;
                if (((global::NetVips.VipsArgumentInstance.__Internal*) __Instance)->@object == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsObject.NativeToManagedMap.ContainsKey(((global::NetVips.VipsArgumentInstance.__Internal*) __Instance)->@object))
                    __result0 = (global::NetVips.VipsObject) global::NetVips.VipsObject.NativeToManagedMap[((global::NetVips.VipsArgumentInstance.__Internal*) __Instance)->@object];
                else __result0 = global::NetVips.VipsObject.__CreateInstance(((global::NetVips.VipsArgumentInstance.__Internal*) __Instance)->@object);
                return __result0;
            }

            set
            {
                ((global::NetVips.VipsArgumentInstance.__Internal*)__Instance)->@object = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public int Assigned
        {
            get
            {
                return ((global::NetVips.VipsArgumentInstance.__Internal*) __Instance)->assigned;
            }

            set
            {
                ((global::NetVips.VipsArgumentInstance.__Internal*)__Instance)->assigned = value;
            }
        }

        public uint CloseId
        {
            get
            {
                return ((global::NetVips.VipsArgumentInstance.__Internal*) __Instance)->close_id;
            }

            set
            {
                ((global::NetVips.VipsArgumentInstance.__Internal*)__Instance)->close_id = value;
            }
        }

        public uint InvalidateId
        {
            get
            {
                return ((global::NetVips.VipsArgumentInstance.__Internal*) __Instance)->invalidate_id;
            }

            set
            {
                ((global::NetVips.VipsArgumentInstance.__Internal*)__Instance)->invalidate_id = value;
            }
        }
    }

    public unsafe partial class @object
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_argument_class_needsstring")]
            internal static extern int VipsArgumentClassNeedsstring(global::System.IntPtr argument_class);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_object_argument_isset")]
            internal static extern int VipsObjectArgumentIsset(global::System.IntPtr @object, [MarshalAs(UnmanagedType.LPStr)] string name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_object_get_argument_flags")]
            internal static extern global::NetVips.VipsArgumentFlags VipsObjectGetArgumentFlags(global::System.IntPtr @object, [MarshalAs(UnmanagedType.LPStr)] string name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_object_get_argument_priority")]
            internal static extern int VipsObjectGetArgumentPriority(global::System.IntPtr @object, [MarshalAs(UnmanagedType.LPStr)] string name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_object_preclose")]
            internal static extern void VipsObjectPreclose(global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_object_build")]
            internal static extern int VipsObjectBuild(global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_object_summary_class")]
            internal static extern void VipsObjectSummaryClass(global::System.IntPtr klass, global::System.IntPtr buf);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_object_summary")]
            internal static extern void VipsObjectSummary(global::System.IntPtr @object, global::System.IntPtr buf);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_object_dump")]
            internal static extern void VipsObjectDump(global::System.IntPtr @object, global::System.IntPtr buf);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_object_print_summary_class")]
            internal static extern void VipsObjectPrintSummaryClass(global::System.IntPtr klass);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_object_print_summary")]
            internal static extern void VipsObjectPrintSummary(global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_object_print_dump")]
            internal static extern void VipsObjectPrintDump(global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_object_print_name")]
            internal static extern void VipsObjectPrintName(global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_object_sanity")]
            internal static extern int VipsObjectSanity(global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_object_get_type")]
            internal static extern ulong VipsObjectGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_object_set_argument_from_string")]
            internal static extern int VipsObjectSetArgumentFromString(global::System.IntPtr @object, [MarshalAs(UnmanagedType.LPStr)] string name, [MarshalAs(UnmanagedType.LPStr)] string value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_object_argument_needsstring")]
            internal static extern int VipsObjectArgumentNeedsstring(global::System.IntPtr @object, [MarshalAs(UnmanagedType.LPStr)] string name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_object_get_argument_to_string")]
            internal static extern int VipsObjectGetArgumentToString(global::System.IntPtr @object, [MarshalAs(UnmanagedType.LPStr)] string name, [MarshalAs(UnmanagedType.LPStr)] string arg);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_object_set_required")]
            internal static extern int VipsObjectSetRequired(global::System.IntPtr @object, [MarshalAs(UnmanagedType.LPStr)] string value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_object_new")]
            internal static extern global::System.IntPtr VipsObjectNew(ulong type, global::System.IntPtr set, global::System.IntPtr a, global::System.IntPtr b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_object_set")]
            internal static extern int VipsObjectSet(global::System.IntPtr @object, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_object_set_from_string")]
            internal static extern int VipsObjectSetFromString(global::System.IntPtr @object, [MarshalAs(UnmanagedType.LPStr)] string @string);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_object_new_from_string")]
            internal static extern global::System.IntPtr VipsObjectNewFromString(global::System.IntPtr object_class, [MarshalAs(UnmanagedType.LPStr)] string p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_object_to_string")]
            internal static extern void VipsObjectToString(global::System.IntPtr @object, global::System.IntPtr buf);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_object_map")]
            internal static extern global::System.IntPtr VipsObjectMap(global::System.IntPtr fn, global::System.IntPtr a, global::System.IntPtr b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_type_map")]
            internal static extern global::System.IntPtr VipsTypeMap(ulong @base, global::System.IntPtr fn, global::System.IntPtr a, global::System.IntPtr b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_type_map_all")]
            internal static extern global::System.IntPtr VipsTypeMapAll(ulong @base, global::System.IntPtr fn, global::System.IntPtr a);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_type_depth")]
            internal static extern int VipsTypeDepth(ulong type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_type_find")]
            internal static extern ulong VipsTypeFind([MarshalAs(UnmanagedType.LPStr)] string basename, [MarshalAs(UnmanagedType.LPStr)] string nickname);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_nickname_find")]
            internal static extern global::System.IntPtr VipsNicknameFind(ulong type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_class_map_all")]
            internal static extern global::System.IntPtr VipsClassMapAll(ulong type, global::System.IntPtr fn, global::System.IntPtr a);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_class_find")]
            internal static extern global::System.IntPtr VipsClassFind([MarshalAs(UnmanagedType.LPStr)] string basename, [MarshalAs(UnmanagedType.LPStr)] string nickname);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_object_local_array")]
            internal static extern global::System.IntPtr VipsObjectLocalArray(global::System.IntPtr parent, int n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_object_set_static")]
            internal static extern void VipsObjectSetStatic(global::System.IntPtr @object, int static_object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_object_print_all")]
            internal static extern void VipsObjectPrintAll();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_object_sanity_all")]
            internal static extern void VipsObjectSanityAll();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_object_rewind")]
            internal static extern void VipsObjectRewind(global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_object_unref_outputs")]
            internal static extern void VipsObjectUnrefOutputs(global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_object_get_description")]
            internal static extern global::System.IntPtr VipsObjectGetDescription(global::System.IntPtr @object);
        }

        public static int VipsArgumentClassNeedsstring(global::NetVips.VipsArgumentClass argument_class)
        {
            var __arg0 = ReferenceEquals(argument_class, null) ? global::System.IntPtr.Zero : argument_class.__Instance;
            var __ret = __Internal.VipsArgumentClassNeedsstring(__arg0);
            return __ret;
        }

        public static int VipsObjectArgumentIsset(global::NetVips.VipsObject @object, string name)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = __Internal.VipsObjectArgumentIsset(__arg0, name);
            return __ret;
        }

        public static global::NetVips.VipsArgumentFlags VipsObjectGetArgumentFlags(global::NetVips.VipsObject @object, string name)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = __Internal.VipsObjectGetArgumentFlags(__arg0, name);
            return __ret;
        }

        public static int VipsObjectGetArgumentPriority(global::NetVips.VipsObject @object, string name)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = __Internal.VipsObjectGetArgumentPriority(__arg0, name);
            return __ret;
        }

        public static void VipsObjectPreclose(global::NetVips.VipsObject @object)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            __Internal.VipsObjectPreclose(__arg0);
        }

        public static int VipsObjectBuild(global::NetVips.VipsObject @object)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = __Internal.VipsObjectBuild(__arg0);
            return __ret;
        }

        public static void VipsObjectSummaryClass(global::NetVips.VipsObjectClass klass, global::NetVips.VipsBuf buf)
        {
            var __arg0 = ReferenceEquals(klass, null) ? global::System.IntPtr.Zero : klass.__Instance;
            var __arg1 = ReferenceEquals(buf, null) ? global::System.IntPtr.Zero : buf.__Instance;
            __Internal.VipsObjectSummaryClass(__arg0, __arg1);
        }

        public static void VipsObjectSummary(global::NetVips.VipsObject @object, global::NetVips.VipsBuf buf)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __arg1 = ReferenceEquals(buf, null) ? global::System.IntPtr.Zero : buf.__Instance;
            __Internal.VipsObjectSummary(__arg0, __arg1);
        }

        public static void VipsObjectDump(global::NetVips.VipsObject @object, global::NetVips.VipsBuf buf)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __arg1 = ReferenceEquals(buf, null) ? global::System.IntPtr.Zero : buf.__Instance;
            __Internal.VipsObjectDump(__arg0, __arg1);
        }

        public static void VipsObjectPrintSummaryClass(global::NetVips.VipsObjectClass klass)
        {
            var __arg0 = ReferenceEquals(klass, null) ? global::System.IntPtr.Zero : klass.__Instance;
            __Internal.VipsObjectPrintSummaryClass(__arg0);
        }

        public static void VipsObjectPrintSummary(global::NetVips.VipsObject @object)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            __Internal.VipsObjectPrintSummary(__arg0);
        }

        public static void VipsObjectPrintDump(global::NetVips.VipsObject @object)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            __Internal.VipsObjectPrintDump(__arg0);
        }

        public static void VipsObjectPrintName(global::NetVips.VipsObject @object)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            __Internal.VipsObjectPrintName(__arg0);
        }

        public static int VipsObjectSanity(global::NetVips.VipsObject @object)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = __Internal.VipsObjectSanity(__arg0);
            return __ret;
        }

        public static ulong VipsObjectGetType()
        {
            var __ret = __Internal.VipsObjectGetType();
            return __ret;
        }

        public static int VipsObjectSetArgumentFromString(global::NetVips.VipsObject @object, string name, string value)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = __Internal.VipsObjectSetArgumentFromString(__arg0, name, value);
            return __ret;
        }

        public static int VipsObjectArgumentNeedsstring(global::NetVips.VipsObject @object, string name)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = __Internal.VipsObjectArgumentNeedsstring(__arg0, name);
            return __ret;
        }

        public static int VipsObjectGetArgumentToString(global::NetVips.VipsObject @object, string name, string arg)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = __Internal.VipsObjectGetArgumentToString(__arg0, name, arg);
            return __ret;
        }

        public static int VipsObjectSetRequired(global::NetVips.VipsObject @object, string value)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = __Internal.VipsObjectSetRequired(__arg0, value);
            return __ret;
        }

        public static global::NetVips.VipsObject VipsObjectNew(ulong type, global::NetVips.VipsObjectSetArguments set, global::System.IntPtr a, global::System.IntPtr b)
        {
            var __arg1 = set == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(set);
            var __ret = __Internal.VipsObjectNew(type, __arg1, a, b);
            global::NetVips.VipsObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsObject) global::NetVips.VipsObject.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsObject.__CreateInstance(__ret);
            return __result0;
        }

        public static int VipsObjectSet(global::NetVips.VipsObject @object, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = __Internal.VipsObjectSet(__arg0, options);
            return __ret;
        }

        public static int VipsObjectSetFromString(global::NetVips.VipsObject @object, string @string)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = __Internal.VipsObjectSetFromString(__arg0, @string);
            return __ret;
        }

        public static global::NetVips.VipsObject VipsObjectNewFromString(global::NetVips.VipsObjectClass object_class, string p)
        {
            var __arg0 = ReferenceEquals(object_class, null) ? global::System.IntPtr.Zero : object_class.__Instance;
            var __ret = __Internal.VipsObjectNewFromString(__arg0, p);
            global::NetVips.VipsObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsObject) global::NetVips.VipsObject.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsObject.__CreateInstance(__ret);
            return __result0;
        }

        public static void VipsObjectToString(global::NetVips.VipsObject @object, global::NetVips.VipsBuf buf)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __arg1 = ReferenceEquals(buf, null) ? global::System.IntPtr.Zero : buf.__Instance;
            __Internal.VipsObjectToString(__arg0, __arg1);
        }

        public static global::System.IntPtr VipsObjectMap(global::NetVips.VipsSListMap2Fn fn, global::System.IntPtr a, global::System.IntPtr b)
        {
            var __arg0 = fn == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fn);
            var __ret = __Internal.VipsObjectMap(__arg0, a, b);
            return __ret;
        }

        public static global::System.IntPtr VipsTypeMap(ulong @base, global::NetVips.VipsTypeMap2Fn fn, global::System.IntPtr a, global::System.IntPtr b)
        {
            var __arg1 = fn == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fn);
            var __ret = __Internal.VipsTypeMap(@base, __arg1, a, b);
            return __ret;
        }

        public static global::System.IntPtr VipsTypeMapAll(ulong @base, global::NetVips.VipsTypeMapFn fn, global::System.IntPtr a)
        {
            var __arg1 = fn == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fn);
            var __ret = __Internal.VipsTypeMapAll(@base, __arg1, a);
            return __ret;
        }

        public static int VipsTypeDepth(ulong type)
        {
            var __ret = __Internal.VipsTypeDepth(type);
            return __ret;
        }

        public static ulong VipsTypeFind(string basename, string nickname)
        {
            var __ret = __Internal.VipsTypeFind(basename, nickname);
            return __ret;
        }

        public static string VipsNicknameFind(ulong type)
        {
            var __ret = __Internal.VipsNicknameFind(type);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static global::System.IntPtr VipsClassMapAll(ulong type, global::NetVips.VipsClassMapFn fn, global::System.IntPtr a)
        {
            var __arg1 = fn == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fn);
            var __ret = __Internal.VipsClassMapAll(type, __arg1, a);
            return __ret;
        }

        public static global::NetVips.VipsObjectClass VipsClassFind(string basename, string nickname)
        {
            var __ret = __Internal.VipsClassFind(basename, nickname);
            global::NetVips.VipsObjectClass __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsObjectClass.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsObjectClass) global::NetVips.VipsObjectClass.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsObjectClass.__CreateInstance(__ret);
            return __result0;
        }

        public static global::NetVips.VipsObject VipsObjectLocalArray(global::NetVips.VipsObject parent, int n)
        {
            var __arg0 = ReferenceEquals(parent, null) ? global::System.IntPtr.Zero : parent.__Instance;
            var __ret = __Internal.VipsObjectLocalArray(__arg0, n);
            global::NetVips.VipsObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsObject) global::NetVips.VipsObject.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsObject.__CreateInstance(__ret);
            return __result0;
        }

        public static void VipsObjectSetStatic(global::NetVips.VipsObject @object, int static_object)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            __Internal.VipsObjectSetStatic(__arg0, static_object);
        }

        public static void VipsObjectPrintAll()
        {
            __Internal.VipsObjectPrintAll();
        }

        public static void VipsObjectSanityAll()
        {
            __Internal.VipsObjectSanityAll();
        }

        public static void VipsObjectRewind(global::NetVips.VipsObject @object)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            __Internal.VipsObjectRewind(__arg0);
        }

        public static void VipsObjectUnrefOutputs(global::NetVips.VipsObject @object)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            __Internal.VipsObjectUnrefOutputs(__arg0);
        }

        public static string VipsObjectGetDescription(global::NetVips.VipsObject @object)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = __Internal.VipsObjectGetDescription(__arg0);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static int VipsArgumentId
        {
            get
            {
                var __ptr = (int*)CppSharp.SymbolResolver.ResolveSymbol("libvips-42.dll", "_vips__argument_id");
                return *__ptr;
            }

            set
            {
                var __ptr = (int*)CppSharp.SymbolResolver.ResolveSymbol("libvips-42.dll", "_vips__argument_id");
                *__ptr = value;
            }
        }
    }

    public unsafe partial class VipsThing : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int i;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_VipsThing@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsThing> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsThing>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsThing __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsThing(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsThing __CreateInstance(global::NetVips.VipsThing.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsThing(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsThing.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsThing.__Internal));
            *(global::NetVips.VipsThing.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsThing(global::NetVips.VipsThing.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsThing(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VipsThing()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsThing.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public VipsThing(global::NetVips.VipsThing _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsThing.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NetVips.VipsThing.__Internal*) __Instance) = *((global::NetVips.VipsThing.__Internal*) _0.__Instance);
        }

        ~VipsThing()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsThing __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int I
        {
            get
            {
                return ((global::NetVips.VipsThing.__Internal*) __Instance)->i;
            }

            set
            {
                ((global::NetVips.VipsThing.__Internal*)__Instance)->i = value;
            }
        }
    }

    public unsafe partial class VipsArea : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr data;

            [FieldOffset(8)]
            internal ulong length;

            [FieldOffset(16)]
            internal int n;

            [FieldOffset(20)]
            internal int count;

            [FieldOffset(24)]
            internal global::System.IntPtr @lock;

            [FieldOffset(32)]
            internal global::System.IntPtr free_fn;

            [FieldOffset(40)]
            internal ulong type;

            [FieldOffset(48)]
            internal ulong sizeof_type;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_VipsArea@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsArea> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsArea>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsArea __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsArea(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsArea __CreateInstance(global::NetVips.VipsArea.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsArea(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsArea.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsArea.__Internal));
            *(global::NetVips.VipsArea.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsArea(global::NetVips.VipsArea.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsArea(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VipsArea()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsArea.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public VipsArea(global::NetVips.VipsArea _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsArea.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NetVips.VipsArea.__Internal*) __Instance) = *((global::NetVips.VipsArea.__Internal*) _0.__Instance);
        }

        ~VipsArea()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsArea __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::System.IntPtr Data
        {
            get
            {
                return ((global::NetVips.VipsArea.__Internal*) __Instance)->data;
            }

            set
            {
                ((global::NetVips.VipsArea.__Internal*)__Instance)->data = (global::System.IntPtr) value;
            }
        }

        public ulong Length
        {
            get
            {
                return ((global::NetVips.VipsArea.__Internal*) __Instance)->length;
            }

            set
            {
                ((global::NetVips.VipsArea.__Internal*)__Instance)->length = value;
            }
        }

        public int N
        {
            get
            {
                return ((global::NetVips.VipsArea.__Internal*) __Instance)->n;
            }

            set
            {
                ((global::NetVips.VipsArea.__Internal*)__Instance)->n = value;
            }
        }

        public int Count
        {
            get
            {
                return ((global::NetVips.VipsArea.__Internal*) __Instance)->count;
            }

            set
            {
                ((global::NetVips.VipsArea.__Internal*)__Instance)->count = value;
            }
        }

        public global::NetVips.VipsCallbackFn FreeFn
        {
            get
            {
                var __ptr0 = ((global::NetVips.VipsArea.__Internal*) __Instance)->free_fn;
                return __ptr0 == IntPtr.Zero? null : (global::NetVips.VipsCallbackFn) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::NetVips.VipsCallbackFn));
            }

            set
            {
                ((global::NetVips.VipsArea.__Internal*)__Instance)->free_fn = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public ulong Type
        {
            get
            {
                return ((global::NetVips.VipsArea.__Internal*) __Instance)->type;
            }

            set
            {
                ((global::NetVips.VipsArea.__Internal*)__Instance)->type = value;
            }
        }

        public ulong SizeofType
        {
            get
            {
                return ((global::NetVips.VipsArea.__Internal*) __Instance)->sizeof_type;
            }

            set
            {
                ((global::NetVips.VipsArea.__Internal*)__Instance)->sizeof_type = value;
            }
        }
    }

    public unsafe partial class VipsRefString : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.VipsArea.__Internal area;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_VipsRefString@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsRefString> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsRefString>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsRefString __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsRefString(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsRefString __CreateInstance(global::NetVips.VipsRefString.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsRefString(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsRefString.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsRefString.__Internal));
            *(global::NetVips.VipsRefString.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsRefString(global::NetVips.VipsRefString.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsRefString(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VipsRefString()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsRefString.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public VipsRefString(global::NetVips.VipsRefString _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsRefString.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NetVips.VipsRefString.__Internal*) __Instance) = *((global::NetVips.VipsRefString.__Internal*) _0.__Instance);
        }

        ~VipsRefString()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsRefString __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NetVips.VipsArea Area
        {
            get
            {
                return global::NetVips.VipsArea.__CreateInstance(new global::System.IntPtr(&((global::NetVips.VipsRefString.__Internal*) __Instance)->area));
            }

            set
            {
                ((global::NetVips.VipsRefString.__Internal*)__Instance)->area = ReferenceEquals(value, null) ? new global::NetVips.VipsArea.__Internal() : *(global::NetVips.VipsArea.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class VipsBlob : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.VipsArea.__Internal area;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_VipsBlob@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsBlob> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsBlob>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsBlob __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsBlob(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsBlob __CreateInstance(global::NetVips.VipsBlob.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsBlob(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsBlob.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsBlob.__Internal));
            *(global::NetVips.VipsBlob.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsBlob(global::NetVips.VipsBlob.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsBlob(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VipsBlob()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsBlob.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public VipsBlob(global::NetVips.VipsBlob _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsBlob.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NetVips.VipsBlob.__Internal*) __Instance) = *((global::NetVips.VipsBlob.__Internal*) _0.__Instance);
        }

        ~VipsBlob()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsBlob __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NetVips.VipsArea Area
        {
            get
            {
                return global::NetVips.VipsArea.__CreateInstance(new global::System.IntPtr(&((global::NetVips.VipsBlob.__Internal*) __Instance)->area));
            }

            set
            {
                ((global::NetVips.VipsBlob.__Internal*)__Instance)->area = ReferenceEquals(value, null) ? new global::NetVips.VipsArea.__Internal() : *(global::NetVips.VipsArea.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class VipsArrayDouble : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.VipsArea.__Internal area;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_VipsArrayDouble@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsArrayDouble> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsArrayDouble>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsArrayDouble __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsArrayDouble(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsArrayDouble __CreateInstance(global::NetVips.VipsArrayDouble.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsArrayDouble(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsArrayDouble.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsArrayDouble.__Internal));
            *(global::NetVips.VipsArrayDouble.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsArrayDouble(global::NetVips.VipsArrayDouble.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsArrayDouble(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VipsArrayDouble()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsArrayDouble.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public VipsArrayDouble(global::NetVips.VipsArrayDouble _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsArrayDouble.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NetVips.VipsArrayDouble.__Internal*) __Instance) = *((global::NetVips.VipsArrayDouble.__Internal*) _0.__Instance);
        }

        ~VipsArrayDouble()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsArrayDouble __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NetVips.VipsArea Area
        {
            get
            {
                return global::NetVips.VipsArea.__CreateInstance(new global::System.IntPtr(&((global::NetVips.VipsArrayDouble.__Internal*) __Instance)->area));
            }

            set
            {
                ((global::NetVips.VipsArrayDouble.__Internal*)__Instance)->area = ReferenceEquals(value, null) ? new global::NetVips.VipsArea.__Internal() : *(global::NetVips.VipsArea.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class VipsArrayInt : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.VipsArea.__Internal area;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_VipsArrayInt@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsArrayInt> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsArrayInt>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsArrayInt __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsArrayInt(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsArrayInt __CreateInstance(global::NetVips.VipsArrayInt.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsArrayInt(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsArrayInt.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsArrayInt.__Internal));
            *(global::NetVips.VipsArrayInt.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsArrayInt(global::NetVips.VipsArrayInt.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsArrayInt(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VipsArrayInt()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsArrayInt.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public VipsArrayInt(global::NetVips.VipsArrayInt _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsArrayInt.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NetVips.VipsArrayInt.__Internal*) __Instance) = *((global::NetVips.VipsArrayInt.__Internal*) _0.__Instance);
        }

        ~VipsArrayInt()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsArrayInt __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NetVips.VipsArea Area
        {
            get
            {
                return global::NetVips.VipsArea.__CreateInstance(new global::System.IntPtr(&((global::NetVips.VipsArrayInt.__Internal*) __Instance)->area));
            }

            set
            {
                ((global::NetVips.VipsArrayInt.__Internal*)__Instance)->area = ReferenceEquals(value, null) ? new global::NetVips.VipsArea.__Internal() : *(global::NetVips.VipsArea.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class VipsArrayImage : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.VipsArea.__Internal area;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_VipsArrayImage@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsArrayImage> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsArrayImage>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsArrayImage __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsArrayImage(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsArrayImage __CreateInstance(global::NetVips.VipsArrayImage.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsArrayImage(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsArrayImage.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsArrayImage.__Internal));
            *(global::NetVips.VipsArrayImage.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsArrayImage(global::NetVips.VipsArrayImage.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsArrayImage(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VipsArrayImage()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsArrayImage.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public VipsArrayImage(global::NetVips.VipsArrayImage _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsArrayImage.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NetVips.VipsArrayImage.__Internal*) __Instance) = *((global::NetVips.VipsArrayImage.__Internal*) _0.__Instance);
        }

        ~VipsArrayImage()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsArrayImage __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NetVips.VipsArea Area
        {
            get
            {
                return global::NetVips.VipsArea.__CreateInstance(new global::System.IntPtr(&((global::NetVips.VipsArrayImage.__Internal*) __Instance)->area));
            }

            set
            {
                ((global::NetVips.VipsArrayImage.__Internal*)__Instance)->area = ReferenceEquals(value, null) ? new global::NetVips.VipsArea.__Internal() : *(global::NetVips.VipsArea.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class type
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_thing_get_type")]
            internal static extern ulong VipsThingGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_thing_new")]
            internal static extern global::System.IntPtr VipsThingNew(int i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_area_copy")]
            internal static extern global::System.IntPtr VipsAreaCopy(global::System.IntPtr area);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_area_unref")]
            internal static extern void VipsAreaUnref(global::System.IntPtr area);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_area_new")]
            internal static extern global::System.IntPtr VipsAreaNew(global::System.IntPtr free_fn, global::System.IntPtr data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_area_new_array")]
            internal static extern global::System.IntPtr VipsAreaNewArray(ulong type, ulong sizeof_type, int n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_area_new_array_object")]
            internal static extern global::System.IntPtr VipsAreaNewArrayObject(int n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_area_get_data")]
            internal static extern global::System.IntPtr VipsAreaGetData(global::System.IntPtr area, ulong* length, int* n, ulong* type, ulong* sizeof_type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_area_get_type")]
            internal static extern ulong VipsAreaGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_save_string_get_type")]
            internal static extern ulong VipsSaveStringGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_ref_string_new")]
            internal static extern global::System.IntPtr VipsRefStringNew([MarshalAs(UnmanagedType.LPStr)] string str);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_ref_string_get")]
            internal static extern global::System.IntPtr VipsRefStringGet(global::System.IntPtr refstr, ulong* length);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_ref_string_get_type")]
            internal static extern ulong VipsRefStringGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_blob_new")]
            internal static extern global::System.IntPtr VipsBlobNew(global::System.IntPtr free_fn, global::System.IntPtr data, ulong size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_blob_copy")]
            internal static extern global::System.IntPtr VipsBlobCopy(global::System.IntPtr data, ulong size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_blob_get")]
            internal static extern global::System.IntPtr VipsBlobGet(global::System.IntPtr blob, ulong* size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_blob_get_type")]
            internal static extern ulong VipsBlobGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_array_double_new")]
            internal static extern global::System.IntPtr VipsArrayDoubleNew(double* array, int n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_array_double_newv")]
            internal static extern global::System.IntPtr VipsArrayDoubleNewv(int n, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_array_double_get")]
            internal static extern double* VipsArrayDoubleGet(global::System.IntPtr array, int* n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_array_double_get_type")]
            internal static extern ulong VipsArrayDoubleGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_array_int_new")]
            internal static extern global::System.IntPtr VipsArrayIntNew(int* array, int n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_array_int_newv")]
            internal static extern global::System.IntPtr VipsArrayIntNewv(int n, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_array_int_get")]
            internal static extern int* VipsArrayIntGet(global::System.IntPtr array, int* n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_array_int_get_type")]
            internal static extern ulong VipsArrayIntGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_array_image_get_type")]
            internal static extern ulong VipsArrayImageGetType();
        }

        public static ulong VipsThingGetType()
        {
            var __ret = __Internal.VipsThingGetType();
            return __ret;
        }

        public static global::NetVips.VipsThing VipsThingNew(int i)
        {
            var __ret = __Internal.VipsThingNew(i);
            global::NetVips.VipsThing __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsThing.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsThing) global::NetVips.VipsThing.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsThing.__CreateInstance(__ret);
            return __result0;
        }

        public static global::NetVips.VipsArea VipsAreaCopy(global::NetVips.VipsArea area)
        {
            var __arg0 = ReferenceEquals(area, null) ? global::System.IntPtr.Zero : area.__Instance;
            var __ret = __Internal.VipsAreaCopy(__arg0);
            global::NetVips.VipsArea __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsArea.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsArea) global::NetVips.VipsArea.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsArea.__CreateInstance(__ret);
            return __result0;
        }

        public static void VipsAreaUnref(global::NetVips.VipsArea area)
        {
            var __arg0 = ReferenceEquals(area, null) ? global::System.IntPtr.Zero : area.__Instance;
            __Internal.VipsAreaUnref(__arg0);
        }

        public static global::NetVips.VipsArea VipsAreaNew(global::NetVips.VipsCallbackFn free_fn, global::System.IntPtr data)
        {
            var __arg0 = free_fn == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(free_fn);
            var __ret = __Internal.VipsAreaNew(__arg0, data);
            global::NetVips.VipsArea __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsArea.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsArea) global::NetVips.VipsArea.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsArea.__CreateInstance(__ret);
            return __result0;
        }

        public static global::NetVips.VipsArea VipsAreaNewArray(ulong type, ulong sizeof_type, int n)
        {
            var __ret = __Internal.VipsAreaNewArray(type, sizeof_type, n);
            global::NetVips.VipsArea __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsArea.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsArea) global::NetVips.VipsArea.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsArea.__CreateInstance(__ret);
            return __result0;
        }

        public static global::NetVips.VipsArea VipsAreaNewArrayObject(int n)
        {
            var __ret = __Internal.VipsAreaNewArrayObject(n);
            global::NetVips.VipsArea __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsArea.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsArea) global::NetVips.VipsArea.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsArea.__CreateInstance(__ret);
            return __result0;
        }

        public static global::System.IntPtr VipsAreaGetData(global::NetVips.VipsArea area, ref ulong length, ref int n, ref ulong type, ref ulong sizeof_type)
        {
            var __arg0 = ReferenceEquals(area, null) ? global::System.IntPtr.Zero : area.__Instance;
            fixed (ulong* __refParamPtr1 = &length)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &n)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (ulong* __refParamPtr3 = &type)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (ulong* __refParamPtr4 = &sizeof_type)
                        {
                            var __arg4 = __refParamPtr4;
                            var __ret = __Internal.VipsAreaGetData(__arg0, __arg1, __arg2, __arg3, __arg4);
                            return __ret;
                        }
                    }
                }
            }
        }

        public static ulong VipsAreaGetType()
        {
            var __ret = __Internal.VipsAreaGetType();
            return __ret;
        }

        public static ulong VipsSaveStringGetType()
        {
            var __ret = __Internal.VipsSaveStringGetType();
            return __ret;
        }

        public static global::NetVips.VipsRefString VipsRefStringNew(string str)
        {
            var __ret = __Internal.VipsRefStringNew(str);
            global::NetVips.VipsRefString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsRefString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsRefString) global::NetVips.VipsRefString.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsRefString.__CreateInstance(__ret);
            return __result0;
        }

        public static string VipsRefStringGet(global::NetVips.VipsRefString refstr, ref ulong length)
        {
            var __arg0 = ReferenceEquals(refstr, null) ? global::System.IntPtr.Zero : refstr.__Instance;
            fixed (ulong* __refParamPtr1 = &length)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.VipsRefStringGet(__arg0, __arg1);
                return Marshal.PtrToStringAnsi(__ret);
            }
        }

        public static ulong VipsRefStringGetType()
        {
            var __ret = __Internal.VipsRefStringGetType();
            return __ret;
        }

        public static global::NetVips.VipsBlob VipsBlobNew(global::NetVips.VipsCallbackFn free_fn, global::System.IntPtr data, ulong size)
        {
            var __arg0 = free_fn == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(free_fn);
            var __ret = __Internal.VipsBlobNew(__arg0, data, size);
            global::NetVips.VipsBlob __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsBlob.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsBlob) global::NetVips.VipsBlob.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsBlob.__CreateInstance(__ret);
            return __result0;
        }

        public static global::NetVips.VipsBlob VipsBlobCopy(global::System.IntPtr data, ulong size)
        {
            var __ret = __Internal.VipsBlobCopy(data, size);
            global::NetVips.VipsBlob __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsBlob.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsBlob) global::NetVips.VipsBlob.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsBlob.__CreateInstance(__ret);
            return __result0;
        }

        public static global::System.IntPtr VipsBlobGet(global::NetVips.VipsBlob blob, ref ulong size)
        {
            var __arg0 = ReferenceEquals(blob, null) ? global::System.IntPtr.Zero : blob.__Instance;
            fixed (ulong* __refParamPtr1 = &size)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.VipsBlobGet(__arg0, __arg1);
                return __ret;
            }
        }

        public static ulong VipsBlobGetType()
        {
            var __ret = __Internal.VipsBlobGetType();
            return __ret;
        }

        public static global::NetVips.VipsArrayDouble VipsArrayDoubleNew(ref double array, int n)
        {
            fixed (double* __refParamPtr0 = &array)
            {
                var __arg0 = __refParamPtr0;
                var __ret = __Internal.VipsArrayDoubleNew(__arg0, n);
                global::NetVips.VipsArrayDouble __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsArrayDouble.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::NetVips.VipsArrayDouble) global::NetVips.VipsArrayDouble.NativeToManagedMap[__ret];
                else __result0 = global::NetVips.VipsArrayDouble.__CreateInstance(__ret);
                return __result0;
            }
        }

        public static global::NetVips.VipsArrayDouble VipsArrayDoubleNewv(int n, string[] options = null)
        {
            var __ret = __Internal.VipsArrayDoubleNewv(n, options);
            global::NetVips.VipsArrayDouble __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsArrayDouble.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsArrayDouble) global::NetVips.VipsArrayDouble.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsArrayDouble.__CreateInstance(__ret);
            return __result0;
        }

        public static double* VipsArrayDoubleGet(global::NetVips.VipsArrayDouble array, ref int n)
        {
            var __arg0 = ReferenceEquals(array, null) ? global::System.IntPtr.Zero : array.__Instance;
            fixed (int* __refParamPtr1 = &n)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.VipsArrayDoubleGet(__arg0, __arg1);
                return __ret;
            }
        }

        public static ulong VipsArrayDoubleGetType()
        {
            var __ret = __Internal.VipsArrayDoubleGetType();
            return __ret;
        }

        public static global::NetVips.VipsArrayInt VipsArrayIntNew(ref int array, int n)
        {
            fixed (int* __refParamPtr0 = &array)
            {
                var __arg0 = __refParamPtr0;
                var __ret = __Internal.VipsArrayIntNew(__arg0, n);
                global::NetVips.VipsArrayInt __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsArrayInt.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::NetVips.VipsArrayInt) global::NetVips.VipsArrayInt.NativeToManagedMap[__ret];
                else __result0 = global::NetVips.VipsArrayInt.__CreateInstance(__ret);
                return __result0;
            }
        }

        public static global::NetVips.VipsArrayInt VipsArrayIntNewv(int n, string[] options = null)
        {
            var __ret = __Internal.VipsArrayIntNewv(n, options);
            global::NetVips.VipsArrayInt __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsArrayInt.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsArrayInt) global::NetVips.VipsArrayInt.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsArrayInt.__CreateInstance(__ret);
            return __result0;
        }

        public static int* VipsArrayIntGet(global::NetVips.VipsArrayInt array, ref int n)
        {
            var __arg0 = ReferenceEquals(array, null) ? global::System.IntPtr.Zero : array.__Instance;
            fixed (int* __refParamPtr1 = &n)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.VipsArrayIntGet(__arg0, __arg1);
                return __ret;
            }
        }

        public static ulong VipsArrayIntGetType()
        {
            var __ret = __Internal.VipsArrayIntGetType();
            return __ret;
        }

        public static ulong VipsArrayImageGetType()
        {
            var __ret = __Internal.VipsArrayImageGetType();
            return __ret;
        }
    }

    public unsafe partial class gate
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_profile_set")]
            internal static extern void VipsProfileSet(int profile);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__thread_profile_attach")]
            internal static extern void VipsThreadProfileAttach([MarshalAs(UnmanagedType.LPStr)] string thread_name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__thread_profile_detach")]
            internal static extern void VipsThreadProfileDetach();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__thread_profile_stop")]
            internal static extern void VipsThreadProfileStop();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__thread_gate_start")]
            internal static extern void VipsThreadGateStart([MarshalAs(UnmanagedType.LPStr)] string gate_name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__thread_gate_stop")]
            internal static extern void VipsThreadGateStop([MarshalAs(UnmanagedType.LPStr)] string gate_name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__thread_malloc_free")]
            internal static extern void VipsThreadMallocFree(long size);
        }

        public static void VipsProfileSet(int profile)
        {
            __Internal.VipsProfileSet(profile);
        }

        public static void VipsThreadProfileAttach(string thread_name)
        {
            __Internal.VipsThreadProfileAttach(thread_name);
        }

        public static void VipsThreadProfileDetach()
        {
            __Internal.VipsThreadProfileDetach();
        }

        public static void VipsThreadProfileStop()
        {
            __Internal.VipsThreadProfileStop();
        }

        public static void VipsThreadGateStart(string gate_name)
        {
            __Internal.VipsThreadGateStart(gate_name);
        }

        public static void VipsThreadGateStop(string gate_name)
        {
            __Internal.VipsThreadGateStop(gate_name);
        }

        public static void VipsThreadMallocFree(long size)
        {
            __Internal.VipsThreadMallocFree(size);
        }

        public static int VipsThreadProfile
        {
            get
            {
                var __ptr = (int*)CppSharp.SymbolResolver.ResolveSymbol("libvips-42.dll", "vips__thread_profile");
                return *__ptr;
            }

            set
            {
                var __ptr = (int*)CppSharp.SymbolResolver.ResolveSymbol("libvips-42.dll", "vips__thread_profile");
                *__ptr = value;
            }
        }
    }

    public unsafe partial class VipsRect : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int left;

            [FieldOffset(4)]
            internal int top;

            [FieldOffset(8)]
            internal int width;

            [FieldOffset(12)]
            internal int height;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_VipsRect@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsRect> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsRect>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsRect __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsRect(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsRect __CreateInstance(global::NetVips.VipsRect.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsRect(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsRect.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsRect.__Internal));
            *(global::NetVips.VipsRect.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsRect(global::NetVips.VipsRect.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsRect(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VipsRect()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsRect.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public VipsRect(global::NetVips.VipsRect _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsRect.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NetVips.VipsRect.__Internal*) __Instance) = *((global::NetVips.VipsRect.__Internal*) _0.__Instance);
        }

        ~VipsRect()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsRect __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Left
        {
            get
            {
                return ((global::NetVips.VipsRect.__Internal*) __Instance)->left;
            }

            set
            {
                ((global::NetVips.VipsRect.__Internal*)__Instance)->left = value;
            }
        }

        public int Top
        {
            get
            {
                return ((global::NetVips.VipsRect.__Internal*) __Instance)->top;
            }

            set
            {
                ((global::NetVips.VipsRect.__Internal*)__Instance)->top = value;
            }
        }

        public int Width
        {
            get
            {
                return ((global::NetVips.VipsRect.__Internal*) __Instance)->width;
            }

            set
            {
                ((global::NetVips.VipsRect.__Internal*)__Instance)->width = value;
            }
        }

        public int Height
        {
            get
            {
                return ((global::NetVips.VipsRect.__Internal*) __Instance)->height;
            }

            set
            {
                ((global::NetVips.VipsRect.__Internal*)__Instance)->height = value;
            }
        }
    }

    public unsafe partial class rect
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_rect_isempty")]
            internal static extern int VipsRectIsempty(global::System.IntPtr r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_rect_includespoint")]
            internal static extern int VipsRectIncludespoint(global::System.IntPtr r, int x, int y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_rect_includesrect")]
            internal static extern int VipsRectIncludesrect(global::System.IntPtr r1, global::System.IntPtr r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_rect_equalsrect")]
            internal static extern int VipsRectEqualsrect(global::System.IntPtr r1, global::System.IntPtr r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_rect_marginadjust")]
            internal static extern void VipsRectMarginadjust(global::System.IntPtr r, int n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_rect_intersectrect")]
            internal static extern void VipsRectIntersectrect(global::System.IntPtr r1, global::System.IntPtr r2, global::System.IntPtr @out);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_rect_unionrect")]
            internal static extern void VipsRectUnionrect(global::System.IntPtr r1, global::System.IntPtr r2, global::System.IntPtr @out);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_rect_dup")]
            internal static extern global::System.IntPtr VipsRectDup(global::System.IntPtr r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_rect_normalise")]
            internal static extern void VipsRectNormalise(global::System.IntPtr r);
        }

        public static int VipsRectIsempty(global::NetVips.VipsRect r)
        {
            var __arg0 = ReferenceEquals(r, null) ? global::System.IntPtr.Zero : r.__Instance;
            var __ret = __Internal.VipsRectIsempty(__arg0);
            return __ret;
        }

        public static int VipsRectIncludespoint(global::NetVips.VipsRect r, int x, int y)
        {
            var __arg0 = ReferenceEquals(r, null) ? global::System.IntPtr.Zero : r.__Instance;
            var __ret = __Internal.VipsRectIncludespoint(__arg0, x, y);
            return __ret;
        }

        public static int VipsRectIncludesrect(global::NetVips.VipsRect r1, global::NetVips.VipsRect r2)
        {
            var __arg0 = ReferenceEquals(r1, null) ? global::System.IntPtr.Zero : r1.__Instance;
            var __arg1 = ReferenceEquals(r2, null) ? global::System.IntPtr.Zero : r2.__Instance;
            var __ret = __Internal.VipsRectIncludesrect(__arg0, __arg1);
            return __ret;
        }

        public static int VipsRectEqualsrect(global::NetVips.VipsRect r1, global::NetVips.VipsRect r2)
        {
            var __arg0 = ReferenceEquals(r1, null) ? global::System.IntPtr.Zero : r1.__Instance;
            var __arg1 = ReferenceEquals(r2, null) ? global::System.IntPtr.Zero : r2.__Instance;
            var __ret = __Internal.VipsRectEqualsrect(__arg0, __arg1);
            return __ret;
        }

        public static void VipsRectMarginadjust(global::NetVips.VipsRect r, int n)
        {
            var __arg0 = ReferenceEquals(r, null) ? global::System.IntPtr.Zero : r.__Instance;
            __Internal.VipsRectMarginadjust(__arg0, n);
        }

        public static void VipsRectIntersectrect(global::NetVips.VipsRect r1, global::NetVips.VipsRect r2, global::NetVips.VipsRect @out)
        {
            var __arg0 = ReferenceEquals(r1, null) ? global::System.IntPtr.Zero : r1.__Instance;
            var __arg1 = ReferenceEquals(r2, null) ? global::System.IntPtr.Zero : r2.__Instance;
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            __Internal.VipsRectIntersectrect(__arg0, __arg1, __arg2);
        }

        public static void VipsRectUnionrect(global::NetVips.VipsRect r1, global::NetVips.VipsRect r2, global::NetVips.VipsRect @out)
        {
            var __arg0 = ReferenceEquals(r1, null) ? global::System.IntPtr.Zero : r1.__Instance;
            var __arg1 = ReferenceEquals(r2, null) ? global::System.IntPtr.Zero : r2.__Instance;
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            __Internal.VipsRectUnionrect(__arg0, __arg1, __arg2);
        }

        public static global::NetVips.VipsRect VipsRectDup(global::NetVips.VipsRect r)
        {
            var __arg0 = ReferenceEquals(r, null) ? global::System.IntPtr.Zero : r.__Instance;
            var __ret = __Internal.VipsRectDup(__arg0);
            global::NetVips.VipsRect __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsRect.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsRect) global::NetVips.VipsRect.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsRect.__CreateInstance(__ret);
            return __result0;
        }

        public static void VipsRectNormalise(global::NetVips.VipsRect r)
        {
            var __arg0 = ReferenceEquals(r, null) ? global::System.IntPtr.Zero : r.__Instance;
            __Internal.VipsRectNormalise(__arg0);
        }
    }

    public enum RegionType
    {
        VIPS_REGION_NONE = 0,
        VIPS_REGION_BUFFER = 1,
        VIPS_REGION_OTHER_REGION = 2,
        VIPS_REGION_OTHER_IMAGE = 3,
        VIPS_REGION_WINDOW = 4
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int VipsRegionFillFn(global::System.IntPtr _0, global::System.IntPtr _1);

    public unsafe partial class VipsWindow : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 48)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int ref_count;

            [FieldOffset(8)]
            internal global::System.IntPtr im;

            [FieldOffset(16)]
            internal int top;

            [FieldOffset(20)]
            internal int height;

            [FieldOffset(24)]
            internal global::System.IntPtr data;

            [FieldOffset(32)]
            internal global::System.IntPtr baseaddr;

            [FieldOffset(40)]
            internal ulong length;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0VipsWindow@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsWindow> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsWindow>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsWindow __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsWindow(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsWindow __CreateInstance(global::NetVips.VipsWindow.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsWindow(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsWindow.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsWindow.__Internal));
            *(global::NetVips.VipsWindow.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsWindow(global::NetVips.VipsWindow.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsWindow(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VipsWindow()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsWindow.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public VipsWindow(global::NetVips.VipsWindow _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsWindow.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NetVips.VipsWindow.__Internal*) __Instance) = *((global::NetVips.VipsWindow.__Internal*) _0.__Instance);
        }

        ~VipsWindow()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsWindow __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int RefCount
        {
            get
            {
                return ((global::NetVips.VipsWindow.__Internal*) __Instance)->ref_count;
            }

            set
            {
                ((global::NetVips.VipsWindow.__Internal*)__Instance)->ref_count = value;
            }
        }

        public global::NetVips.VipsImage Im
        {
            get
            {
                global::NetVips.VipsImage __result0;
                if (((global::NetVips.VipsWindow.__Internal*) __Instance)->im == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(((global::NetVips.VipsWindow.__Internal*) __Instance)->im))
                    __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[((global::NetVips.VipsWindow.__Internal*) __Instance)->im];
                else __result0 = global::NetVips.VipsImage.__CreateInstance(((global::NetVips.VipsWindow.__Internal*) __Instance)->im);
                return __result0;
            }

            set
            {
                ((global::NetVips.VipsWindow.__Internal*)__Instance)->im = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public int Top
        {
            get
            {
                return ((global::NetVips.VipsWindow.__Internal*) __Instance)->top;
            }

            set
            {
                ((global::NetVips.VipsWindow.__Internal*)__Instance)->top = value;
            }
        }

        public int Height
        {
            get
            {
                return ((global::NetVips.VipsWindow.__Internal*) __Instance)->height;
            }

            set
            {
                ((global::NetVips.VipsWindow.__Internal*)__Instance)->height = value;
            }
        }

        public byte* Data
        {
            get
            {
                return (byte*) ((global::NetVips.VipsWindow.__Internal*) __Instance)->data;
            }

            set
            {
                ((global::NetVips.VipsWindow.__Internal*)__Instance)->data = (global::System.IntPtr) value;
            }
        }

        public global::System.IntPtr Baseaddr
        {
            get
            {
                return ((global::NetVips.VipsWindow.__Internal*) __Instance)->baseaddr;
            }

            set
            {
                ((global::NetVips.VipsWindow.__Internal*)__Instance)->baseaddr = (global::System.IntPtr) value;
            }
        }

        public ulong Length
        {
            get
            {
                return ((global::NetVips.VipsWindow.__Internal*) __Instance)->length;
            }

            set
            {
                ((global::NetVips.VipsWindow.__Internal*)__Instance)->length = value;
            }
        }
    }

    public unsafe partial class VipsBuffer : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 64)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int ref_count;

            [FieldOffset(8)]
            internal global::System.IntPtr im;

            [FieldOffset(16)]
            internal global::NetVips.VipsRect.__Internal area;

            [FieldOffset(32)]
            internal int done;

            [FieldOffset(40)]
            internal global::System.IntPtr cache;

            [FieldOffset(48)]
            internal global::System.IntPtr buf;

            [FieldOffset(56)]
            internal ulong bsize;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_VipsBuffer@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsBuffer> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsBuffer>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsBuffer __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsBuffer(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsBuffer __CreateInstance(global::NetVips.VipsBuffer.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsBuffer(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsBuffer.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsBuffer.__Internal));
            *(global::NetVips.VipsBuffer.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsBuffer(global::NetVips.VipsBuffer.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsBuffer(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VipsBuffer()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsBuffer.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public VipsBuffer(global::NetVips.VipsBuffer _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsBuffer.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NetVips.VipsBuffer.__Internal*) __Instance) = *((global::NetVips.VipsBuffer.__Internal*) _0.__Instance);
        }

        ~VipsBuffer()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsBuffer __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int RefCount
        {
            get
            {
                return ((global::NetVips.VipsBuffer.__Internal*) __Instance)->ref_count;
            }

            set
            {
                ((global::NetVips.VipsBuffer.__Internal*)__Instance)->ref_count = value;
            }
        }

        public global::NetVips.VipsImage Im
        {
            get
            {
                global::NetVips.VipsImage __result0;
                if (((global::NetVips.VipsBuffer.__Internal*) __Instance)->im == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(((global::NetVips.VipsBuffer.__Internal*) __Instance)->im))
                    __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[((global::NetVips.VipsBuffer.__Internal*) __Instance)->im];
                else __result0 = global::NetVips.VipsImage.__CreateInstance(((global::NetVips.VipsBuffer.__Internal*) __Instance)->im);
                return __result0;
            }

            set
            {
                ((global::NetVips.VipsBuffer.__Internal*)__Instance)->im = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::NetVips.VipsRect Area
        {
            get
            {
                return global::NetVips.VipsRect.__CreateInstance(new global::System.IntPtr(&((global::NetVips.VipsBuffer.__Internal*) __Instance)->area));
            }

            set
            {
                ((global::NetVips.VipsBuffer.__Internal*)__Instance)->area = ReferenceEquals(value, null) ? new global::NetVips.VipsRect.__Internal() : *(global::NetVips.VipsRect.__Internal*) value.__Instance;
            }
        }

        public int Done
        {
            get
            {
                return ((global::NetVips.VipsBuffer.__Internal*) __Instance)->done;
            }

            set
            {
                ((global::NetVips.VipsBuffer.__Internal*)__Instance)->done = value;
            }
        }

        public global::NetVips.VipsBufferCache Cache
        {
            get
            {
                global::NetVips.VipsBufferCache __result0;
                if (((global::NetVips.VipsBuffer.__Internal*) __Instance)->cache == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsBufferCache.NativeToManagedMap.ContainsKey(((global::NetVips.VipsBuffer.__Internal*) __Instance)->cache))
                    __result0 = (global::NetVips.VipsBufferCache) global::NetVips.VipsBufferCache.NativeToManagedMap[((global::NetVips.VipsBuffer.__Internal*) __Instance)->cache];
                else __result0 = global::NetVips.VipsBufferCache.__CreateInstance(((global::NetVips.VipsBuffer.__Internal*) __Instance)->cache);
                return __result0;
            }

            set
            {
                ((global::NetVips.VipsBuffer.__Internal*)__Instance)->cache = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public byte* Buf
        {
            get
            {
                return (byte*) ((global::NetVips.VipsBuffer.__Internal*) __Instance)->buf;
            }

            set
            {
                ((global::NetVips.VipsBuffer.__Internal*)__Instance)->buf = (global::System.IntPtr) value;
            }
        }

        public ulong Bsize
        {
            get
            {
                return ((global::NetVips.VipsBuffer.__Internal*) __Instance)->bsize;
            }

            set
            {
                ((global::NetVips.VipsBuffer.__Internal*)__Instance)->bsize = value;
            }
        }
    }

    public unsafe partial class VipsBufferCache : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 48)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr buffers;

            [FieldOffset(8)]
            internal global::System.IntPtr thread;

            [FieldOffset(16)]
            internal global::System.IntPtr im;

            [FieldOffset(24)]
            internal global::System.IntPtr buffer_thread;

            [FieldOffset(32)]
            internal global::System.IntPtr reserve;

            [FieldOffset(40)]
            internal int n_reserve;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_VipsBufferCache@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsBufferCache> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsBufferCache>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsBufferCache __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsBufferCache(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsBufferCache __CreateInstance(global::NetVips.VipsBufferCache.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsBufferCache(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsBufferCache.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsBufferCache.__Internal));
            *(global::NetVips.VipsBufferCache.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsBufferCache(global::NetVips.VipsBufferCache.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsBufferCache(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VipsBufferCache()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsBufferCache.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public VipsBufferCache(global::NetVips.VipsBufferCache _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsBufferCache.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NetVips.VipsBufferCache.__Internal*) __Instance) = *((global::NetVips.VipsBufferCache.__Internal*) _0.__Instance);
        }

        ~VipsBufferCache()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsBufferCache __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NetVips.VipsImage Im
        {
            get
            {
                global::NetVips.VipsImage __result0;
                if (((global::NetVips.VipsBufferCache.__Internal*) __Instance)->im == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(((global::NetVips.VipsBufferCache.__Internal*) __Instance)->im))
                    __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[((global::NetVips.VipsBufferCache.__Internal*) __Instance)->im];
                else __result0 = global::NetVips.VipsImage.__CreateInstance(((global::NetVips.VipsBufferCache.__Internal*) __Instance)->im);
                return __result0;
            }

            set
            {
                ((global::NetVips.VipsBufferCache.__Internal*)__Instance)->im = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::NetVips.VipsBufferThread BufferThread
        {
            get
            {
                global::NetVips.VipsBufferThread __result0;
                if (((global::NetVips.VipsBufferCache.__Internal*) __Instance)->buffer_thread == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsBufferThread.NativeToManagedMap.ContainsKey(((global::NetVips.VipsBufferCache.__Internal*) __Instance)->buffer_thread))
                    __result0 = (global::NetVips.VipsBufferThread) global::NetVips.VipsBufferThread.NativeToManagedMap[((global::NetVips.VipsBufferCache.__Internal*) __Instance)->buffer_thread];
                else __result0 = global::NetVips.VipsBufferThread.__CreateInstance(((global::NetVips.VipsBufferCache.__Internal*) __Instance)->buffer_thread);
                return __result0;
            }

            set
            {
                ((global::NetVips.VipsBufferCache.__Internal*)__Instance)->buffer_thread = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public int NReserve
        {
            get
            {
                return ((global::NetVips.VipsBufferCache.__Internal*) __Instance)->n_reserve;
            }

            set
            {
                ((global::NetVips.VipsBufferCache.__Internal*)__Instance)->n_reserve = value;
            }
        }
    }

    public unsafe partial class VipsBufferThread : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr hash;

            [FieldOffset(8)]
            internal global::System.IntPtr thread;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0VipsBufferThread@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsBufferThread> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsBufferThread>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsBufferThread __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsBufferThread(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsBufferThread __CreateInstance(global::NetVips.VipsBufferThread.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsBufferThread(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsBufferThread.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsBufferThread.__Internal));
            *(global::NetVips.VipsBufferThread.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsBufferThread(global::NetVips.VipsBufferThread.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsBufferThread(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VipsBufferThread()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsBufferThread.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public VipsBufferThread(global::NetVips.VipsBufferThread _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsBufferThread.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NetVips.VipsBufferThread.__Internal*) __Instance) = *((global::NetVips.VipsBufferThread.__Internal*) _0.__Instance);
        }

        ~VipsBufferThread()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsBufferThread __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    public unsafe partial class @private
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_window_unref")]
            internal static extern int VipsWindowUnref(global::System.IntPtr window);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_window_print")]
            internal static extern void VipsWindowPrint(global::System.IntPtr window);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_buffer_dump_all")]
            internal static extern void VipsBufferDumpAll();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_buffer_done")]
            internal static extern void VipsBufferDone(global::System.IntPtr buffer);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_buffer_undone")]
            internal static extern void VipsBufferUndone(global::System.IntPtr buffer);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_buffer_unref")]
            internal static extern void VipsBufferUnref(global::System.IntPtr buffer);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_buffer_new")]
            internal static extern global::System.IntPtr VipsBufferNew(global::System.IntPtr im, global::System.IntPtr area);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_buffer_ref")]
            internal static extern global::System.IntPtr VipsBufferRef(global::System.IntPtr im, global::System.IntPtr area);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_buffer_unref_ref")]
            internal static extern global::System.IntPtr VipsBufferUnrefRef(global::System.IntPtr buffer, global::System.IntPtr im, global::System.IntPtr area);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_buffer_print")]
            internal static extern void VipsBufferPrint(global::System.IntPtr buffer);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__render_shutdown")]
            internal static extern void VipsRenderShutdown();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__region_take_ownership")]
            internal static extern void VipsRegionTakeOwnership(global::System.IntPtr reg);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__region_check_ownership")]
            internal static extern void VipsRegionCheckOwnership(global::System.IntPtr reg);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__region_no_ownership")]
            internal static extern void VipsRegionNoOwnership(global::System.IntPtr reg);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_region_fill")]
            internal static extern int VipsRegionFill(global::System.IntPtr reg, global::System.IntPtr r, global::System.IntPtr fn, global::System.IntPtr a);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__image_wio_output")]
            internal static extern int VipsImageWioOutput(global::System.IntPtr image);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__image_pio_output")]
            internal static extern int VipsImagePioOutput(global::System.IntPtr image);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__argument_get_instance")]
            internal static extern global::System.IntPtr VipsArgumentGetInstance(global::System.IntPtr argument_class, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__demand_hint_array")]
            internal static extern void VipsDemandHintArray(global::System.IntPtr image, int hint, global::System.IntPtr @in);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__region_count_pixels")]
            internal static extern void VipsRegionCountPixels(global::System.IntPtr region, [MarshalAs(UnmanagedType.LPStr)] string nickname);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_region_dump_all")]
            internal static extern void VipsRegionDumpAll();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__init")]
            internal static extern int VipsInit([MarshalAs(UnmanagedType.LPStr)] string argv0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__get_sizeof_vipsobject")]
            internal static extern ulong VipsGetSizeofVipsobject();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_region_prepare_many")]
            internal static extern int VipsRegionPrepareMany(global::System.IntPtr reg, global::System.IntPtr r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__view_image")]
            internal static extern int VipsViewImage(global::System.IntPtr image);
        }

        public static int VipsWindowUnref(global::NetVips.VipsWindow window)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            var __ret = __Internal.VipsWindowUnref(__arg0);
            return __ret;
        }

        public static void VipsWindowPrint(global::NetVips.VipsWindow window)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            __Internal.VipsWindowPrint(__arg0);
        }

        public static void VipsBufferDumpAll()
        {
            __Internal.VipsBufferDumpAll();
        }

        public static void VipsBufferDone(global::NetVips.VipsBuffer buffer)
        {
            var __arg0 = ReferenceEquals(buffer, null) ? global::System.IntPtr.Zero : buffer.__Instance;
            __Internal.VipsBufferDone(__arg0);
        }

        public static void VipsBufferUndone(global::NetVips.VipsBuffer buffer)
        {
            var __arg0 = ReferenceEquals(buffer, null) ? global::System.IntPtr.Zero : buffer.__Instance;
            __Internal.VipsBufferUndone(__arg0);
        }

        public static void VipsBufferUnref(global::NetVips.VipsBuffer buffer)
        {
            var __arg0 = ReferenceEquals(buffer, null) ? global::System.IntPtr.Zero : buffer.__Instance;
            __Internal.VipsBufferUnref(__arg0);
        }

        public static global::NetVips.VipsBuffer VipsBufferNew(global::NetVips.VipsImage im, global::NetVips.VipsRect area)
        {
            var __arg0 = ReferenceEquals(im, null) ? global::System.IntPtr.Zero : im.__Instance;
            var __arg1 = ReferenceEquals(area, null) ? global::System.IntPtr.Zero : area.__Instance;
            var __ret = __Internal.VipsBufferNew(__arg0, __arg1);
            global::NetVips.VipsBuffer __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsBuffer.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsBuffer) global::NetVips.VipsBuffer.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsBuffer.__CreateInstance(__ret);
            return __result0;
        }

        public static global::NetVips.VipsBuffer VipsBufferRef(global::NetVips.VipsImage im, global::NetVips.VipsRect area)
        {
            var __arg0 = ReferenceEquals(im, null) ? global::System.IntPtr.Zero : im.__Instance;
            var __arg1 = ReferenceEquals(area, null) ? global::System.IntPtr.Zero : area.__Instance;
            var __ret = __Internal.VipsBufferRef(__arg0, __arg1);
            global::NetVips.VipsBuffer __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsBuffer.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsBuffer) global::NetVips.VipsBuffer.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsBuffer.__CreateInstance(__ret);
            return __result0;
        }

        public static global::NetVips.VipsBuffer VipsBufferUnrefRef(global::NetVips.VipsBuffer buffer, global::NetVips.VipsImage im, global::NetVips.VipsRect area)
        {
            var __arg0 = ReferenceEquals(buffer, null) ? global::System.IntPtr.Zero : buffer.__Instance;
            var __arg1 = ReferenceEquals(im, null) ? global::System.IntPtr.Zero : im.__Instance;
            var __arg2 = ReferenceEquals(area, null) ? global::System.IntPtr.Zero : area.__Instance;
            var __ret = __Internal.VipsBufferUnrefRef(__arg0, __arg1, __arg2);
            global::NetVips.VipsBuffer __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsBuffer.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsBuffer) global::NetVips.VipsBuffer.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsBuffer.__CreateInstance(__ret);
            return __result0;
        }

        public static void VipsBufferPrint(global::NetVips.VipsBuffer buffer)
        {
            var __arg0 = ReferenceEquals(buffer, null) ? global::System.IntPtr.Zero : buffer.__Instance;
            __Internal.VipsBufferPrint(__arg0);
        }

        public static void VipsRenderShutdown()
        {
            __Internal.VipsRenderShutdown();
        }

        public static void VipsRegionTakeOwnership(global::NetVips.VipsRegion reg)
        {
            var __arg0 = ReferenceEquals(reg, null) ? global::System.IntPtr.Zero : reg.__Instance;
            __Internal.VipsRegionTakeOwnership(__arg0);
        }

        public static void VipsRegionCheckOwnership(global::NetVips.VipsRegion reg)
        {
            var __arg0 = ReferenceEquals(reg, null) ? global::System.IntPtr.Zero : reg.__Instance;
            __Internal.VipsRegionCheckOwnership(__arg0);
        }

        public static void VipsRegionNoOwnership(global::NetVips.VipsRegion reg)
        {
            var __arg0 = ReferenceEquals(reg, null) ? global::System.IntPtr.Zero : reg.__Instance;
            __Internal.VipsRegionNoOwnership(__arg0);
        }

        public static int VipsRegionFill(global::NetVips.VipsRegion reg, global::NetVips.VipsRect r, global::NetVips.VipsRegionFillFn fn, global::System.IntPtr a)
        {
            var __arg0 = ReferenceEquals(reg, null) ? global::System.IntPtr.Zero : reg.__Instance;
            var __arg1 = ReferenceEquals(r, null) ? global::System.IntPtr.Zero : r.__Instance;
            var __arg2 = fn == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fn);
            var __ret = __Internal.VipsRegionFill(__arg0, __arg1, __arg2, a);
            return __ret;
        }

        public static int VipsImageWioOutput(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageWioOutput(__arg0);
            return __ret;
        }

        public static int VipsImagePioOutput(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImagePioOutput(__arg0);
            return __ret;
        }

        public static global::NetVips.VipsArgumentInstance VipsArgumentGetInstance(global::NetVips.VipsArgumentClass argument_class, global::NetVips.VipsObject @object)
        {
            var __arg0 = ReferenceEquals(argument_class, null) ? global::System.IntPtr.Zero : argument_class.__Instance;
            var __arg1 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = __Internal.VipsArgumentGetInstance(__arg0, __arg1);
            global::NetVips.VipsArgumentInstance __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsArgumentInstance.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsArgumentInstance) global::NetVips.VipsArgumentInstance.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsArgumentInstance.__CreateInstance(__ret);
            return __result0;
        }

        public static void VipsDemandHintArray(global::NetVips.VipsImage image, int hint, global::NetVips.VipsImage @in)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __arg2 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            __Internal.VipsDemandHintArray(__arg0, hint, __arg2);
        }

        public static void VipsRegionCountPixels(global::NetVips.VipsRegion region, string nickname)
        {
            var __arg0 = ReferenceEquals(region, null) ? global::System.IntPtr.Zero : region.__Instance;
            __Internal.VipsRegionCountPixels(__arg0, nickname);
        }

        public static void VipsRegionDumpAll()
        {
            __Internal.VipsRegionDumpAll();
        }

        public static int VipsInit(string argv0)
        {
            var __ret = __Internal.VipsInit(argv0);
            return __ret;
        }

        public static ulong VipsGetSizeofVipsobject()
        {
            var __ret = __Internal.VipsGetSizeofVipsobject();
            return __ret;
        }

        public static int VipsRegionPrepareMany(global::NetVips.VipsRegion reg, global::NetVips.VipsRect r)
        {
            var __arg0 = ReferenceEquals(reg, null) ? global::System.IntPtr.Zero : reg.__Instance;
            var __arg1 = ReferenceEquals(r, null) ? global::System.IntPtr.Zero : r.__Instance;
            var __ret = __Internal.VipsRegionPrepareMany(__arg0, __arg1);
            return __ret;
        }

        public static int VipsViewImage(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsViewImage(__arg0);
            return __ret;
        }
    }

    public enum VipsBandFormat
    {
        VIPS_FORMAT_NOTSET = -1,
        VIPS_FORMAT_UCHAR = 0,
        VIPS_FORMAT_CHAR = 1,
        VIPS_FORMAT_USHORT = 2,
        VIPS_FORMAT_SHORT = 3,
        VIPS_FORMAT_UINT = 4,
        VIPS_FORMAT_INT = 5,
        VIPS_FORMAT_FLOAT = 6,
        VIPS_FORMAT_COMPLEX = 7,
        VIPS_FORMAT_DOUBLE = 8,
        VIPS_FORMAT_DPCOMPLEX = 9,
        VIPS_FORMAT_LAST = 10
    }

    public enum VipsCoding
    {
        VIPS_CODING_ERROR = -1,
        VIPS_CODING_NONE = 0,
        VIPS_CODING_LABQ = 2,
        VIPS_CODING_RAD = 6,
        VIPS_CODING_LAST = 7
    }

    public enum VipsInterpretation
    {
        VIPS_INTERPRETATION_ERROR = -1,
        VIPS_INTERPRETATION_MULTIBAND = 0,
        VIPS_INTERPRETATION_B_W = 1,
        VIPS_INTERPRETATION_HISTOGRAM = 10,
        VIPS_INTERPRETATION_XYZ = 12,
        VIPS_INTERPRETATION_LAB = 13,
        VIPS_INTERPRETATION_CMYK = 15,
        VIPS_INTERPRETATION_LABQ = 16,
        VIPS_INTERPRETATION_RGB = 17,
        VIPS_INTERPRETATION_CMC = 18,
        VIPS_INTERPRETATION_LCH = 19,
        VIPS_INTERPRETATION_LABS = 21,
        VIPS_INTERPRETATION_sRGB = 22,
        VIPS_INTERPRETATION_YXY = 23,
        VIPS_INTERPRETATION_FOURIER = 24,
        VIPS_INTERPRETATION_RGB16 = 25,
        VIPS_INTERPRETATION_GREY16 = 26,
        VIPS_INTERPRETATION_MATRIX = 27,
        VIPS_INTERPRETATION_scRGB = 28,
        VIPS_INTERPRETATION_HSV = 29,
        VIPS_INTERPRETATION_LAST = 30
    }

    public enum VipsImageType
    {
        VIPS_IMAGE_ERROR = -1,
        VIPS_IMAGE_NONE = 0,
        VIPS_IMAGE_SETBUF = 1,
        VIPS_IMAGE_SETBUF_FOREIGN = 2,
        VIPS_IMAGE_OPENIN = 3,
        VIPS_IMAGE_MMAPIN = 4,
        VIPS_IMAGE_MMAPINRW = 5,
        VIPS_IMAGE_OPENOUT = 6,
        VIPS_IMAGE_PARTIAL = 7
    }

    public enum VipsDemandStyle
    {
        VIPS_DEMAND_STYLE_ERROR = -1,
        VIPS_DEMAND_STYLE_SMALLTILE = 0,
        VIPS_DEMAND_STYLE_FATSTRIP = 1,
        VIPS_DEMAND_STYLE_THINSTRIP = 2,
        VIPS_DEMAND_STYLE_ANY = 3
    }

    public enum VipsAccess
    {
        VIPS_ACCESS_RANDOM = 0,
        VIPS_ACCESS_SEQUENTIAL = 1,
        VIPS_ACCESS_SEQUENTIAL_UNBUFFERED = 2,
        VIPS_ACCESS_LAST = 3
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr VipsStartFn(global::System.IntPtr @out, global::System.IntPtr a, global::System.IntPtr b);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int VipsGenerateFn(global::System.IntPtr @out, global::System.IntPtr seq, global::System.IntPtr a, global::System.IntPtr b, int* stop);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int VipsStopFn(global::System.IntPtr seq, global::System.IntPtr a, global::System.IntPtr b);

    public unsafe partial class VipsImage : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 392)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.VipsObject.__Internal parent_instance;

            [FieldOffset(80)]
            internal int Xsize;

            [FieldOffset(84)]
            internal int Ysize;

            [FieldOffset(88)]
            internal int Bands;

            [FieldOffset(92)]
            internal global::NetVips.VipsBandFormat BandFmt;

            [FieldOffset(96)]
            internal global::NetVips.VipsCoding Coding;

            [FieldOffset(100)]
            internal global::NetVips.VipsInterpretation Type;

            [FieldOffset(104)]
            internal double Xres;

            [FieldOffset(112)]
            internal double Yres;

            [FieldOffset(120)]
            internal int Xoffset;

            [FieldOffset(124)]
            internal int Yoffset;

            [FieldOffset(128)]
            internal int Length;

            [FieldOffset(132)]
            internal short Compression;

            [FieldOffset(134)]
            internal short Level;

            [FieldOffset(136)]
            internal int Bbits;

            [FieldOffset(144)]
            internal global::System.IntPtr time;

            [FieldOffset(152)]
            internal global::System.IntPtr Hist;

            [FieldOffset(160)]
            internal global::System.IntPtr filename;

            [FieldOffset(168)]
            internal global::System.IntPtr data;

            [FieldOffset(176)]
            internal int kill;

            [FieldOffset(180)]
            internal float Xres_float;

            [FieldOffset(184)]
            internal float Yres_float;

            [FieldOffset(192)]
            internal global::System.IntPtr mode;

            [FieldOffset(200)]
            internal global::NetVips.VipsImageType dtype;

            [FieldOffset(204)]
            internal int fd;

            [FieldOffset(208)]
            internal global::System.IntPtr baseaddr;

            [FieldOffset(216)]
            internal ulong length;

            [FieldOffset(224)]
            internal uint magic;

            [FieldOffset(232)]
            internal global::System.IntPtr start_fn;

            [FieldOffset(240)]
            internal global::System.IntPtr generate_fn;

            [FieldOffset(248)]
            internal global::System.IntPtr stop_fn;

            [FieldOffset(256)]
            internal global::System.IntPtr client1;

            [FieldOffset(264)]
            internal global::System.IntPtr client2;

            [FieldOffset(272)]
            internal global::System.IntPtr sslock;

            [FieldOffset(280)]
            internal global::System.IntPtr regions;

            [FieldOffset(288)]
            internal global::NetVips.VipsDemandStyle dhint;

            [FieldOffset(296)]
            internal global::System.IntPtr meta;

            [FieldOffset(304)]
            internal global::System.IntPtr meta_traverse;

            [FieldOffset(312)]
            internal long sizeof_header;

            [FieldOffset(320)]
            internal global::System.IntPtr windows;

            [FieldOffset(328)]
            internal global::System.IntPtr upstream;

            [FieldOffset(336)]
            internal global::System.IntPtr downstream;

            [FieldOffset(344)]
            internal int serial;

            [FieldOffset(352)]
            internal global::System.IntPtr history_list;

            [FieldOffset(360)]
            internal global::System.IntPtr progress_signal;

            [FieldOffset(368)]
            internal long file_length;

            [FieldOffset(376)]
            internal int hint_set;

            [FieldOffset(380)]
            internal int delete_on_close;

            [FieldOffset(384)]
            internal global::System.IntPtr delete_on_close_filename;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_VipsImage@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsImage> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsImage>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsImage __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsImage(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsImage __CreateInstance(global::NetVips.VipsImage.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsImage(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsImage.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsImage.__Internal));
            *(global::NetVips.VipsImage.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsImage(global::NetVips.VipsImage.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsImage(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VipsImage()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsImage.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public VipsImage(global::NetVips.VipsImage _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsImage.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NetVips.VipsImage.__Internal*) __Instance) = *((global::NetVips.VipsImage.__Internal*) _0.__Instance);
        }

        ~VipsImage()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsImage __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NetVips.VipsObject ParentInstance
        {
            get
            {
                return global::NetVips.VipsObject.__CreateInstance(new global::System.IntPtr(&((global::NetVips.VipsImage.__Internal*) __Instance)->parent_instance));
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->parent_instance = ReferenceEquals(value, null) ? new global::NetVips.VipsObject.__Internal() : *(global::NetVips.VipsObject.__Internal*) value.__Instance;
            }
        }

        public int Xsize
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->Xsize;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->Xsize = value;
            }
        }

        public int Ysize
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->Ysize;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->Ysize = value;
            }
        }

        public int Bands
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->Bands;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->Bands = value;
            }
        }

        public global::NetVips.VipsBandFormat BandFmt
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->BandFmt;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->BandFmt = value;
            }
        }

        public global::NetVips.VipsCoding Coding
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->Coding;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->Coding = value;
            }
        }

        public global::NetVips.VipsInterpretation Type
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->Type;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->Type = value;
            }
        }

        public double Xres
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->Xres;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->Xres = value;
            }
        }

        public double Yres
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->Yres;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->Yres = value;
            }
        }

        public int Xoffset
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->Xoffset;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->Xoffset = value;
            }
        }

        public int Yoffset
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->Yoffset;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->Yoffset = value;
            }
        }

        public int Length
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->Length;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->Length = value;
            }
        }

        public short Compression
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->Compression;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->Compression = value;
            }
        }

        public short Level
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->Level;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->Level = value;
            }
        }

        public int Bbits
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->Bbits;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->Bbits = value;
            }
        }

        public global::NetVips.VipsProgress Time
        {
            get
            {
                global::NetVips.VipsProgress __result0;
                if (((global::NetVips.VipsImage.__Internal*) __Instance)->time == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsProgress.NativeToManagedMap.ContainsKey(((global::NetVips.VipsImage.__Internal*) __Instance)->time))
                    __result0 = (global::NetVips.VipsProgress) global::NetVips.VipsProgress.NativeToManagedMap[((global::NetVips.VipsImage.__Internal*) __Instance)->time];
                else __result0 = global::NetVips.VipsProgress.__CreateInstance(((global::NetVips.VipsImage.__Internal*) __Instance)->time);
                return __result0;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->time = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public sbyte* Hist
        {
            get
            {
                return (sbyte*) ((global::NetVips.VipsImage.__Internal*) __Instance)->Hist;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->Hist = (global::System.IntPtr) value;
            }
        }

        public sbyte* Filename
        {
            get
            {
                return (sbyte*) ((global::NetVips.VipsImage.__Internal*) __Instance)->filename;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->filename = (global::System.IntPtr) value;
            }
        }

        public byte* Data
        {
            get
            {
                return (byte*) ((global::NetVips.VipsImage.__Internal*) __Instance)->data;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->data = (global::System.IntPtr) value;
            }
        }

        public int Kill
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->kill;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->kill = value;
            }
        }

        public float XresFloat
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->Xres_float;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->Xres_float = value;
            }
        }

        public float YresFloat
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->Yres_float;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->Yres_float = value;
            }
        }

        public sbyte* Mode
        {
            get
            {
                return (sbyte*) ((global::NetVips.VipsImage.__Internal*) __Instance)->mode;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->mode = (global::System.IntPtr) value;
            }
        }

        public global::NetVips.VipsImageType Dtype
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->dtype;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->dtype = value;
            }
        }

        public int Fd
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->fd;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->fd = value;
            }
        }

        public global::System.IntPtr Baseaddr
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->baseaddr;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->baseaddr = (global::System.IntPtr) value;
            }
        }

        public ulong length
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->length;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->length = value;
            }
        }

        public uint Magic
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->magic;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->magic = value;
            }
        }

        public global::NetVips.VipsStartFn StartFn
        {
            get
            {
                var __ptr0 = ((global::NetVips.VipsImage.__Internal*) __Instance)->start_fn;
                return __ptr0 == IntPtr.Zero? null : (global::NetVips.VipsStartFn) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::NetVips.VipsStartFn));
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->start_fn = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::NetVips.VipsGenerateFn GenerateFn
        {
            get
            {
                var __ptr0 = ((global::NetVips.VipsImage.__Internal*) __Instance)->generate_fn;
                return __ptr0 == IntPtr.Zero? null : (global::NetVips.VipsGenerateFn) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::NetVips.VipsGenerateFn));
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->generate_fn = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::NetVips.VipsStopFn StopFn
        {
            get
            {
                var __ptr0 = ((global::NetVips.VipsImage.__Internal*) __Instance)->stop_fn;
                return __ptr0 == IntPtr.Zero? null : (global::NetVips.VipsStopFn) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::NetVips.VipsStopFn));
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->stop_fn = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::System.IntPtr Client1
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->client1;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->client1 = (global::System.IntPtr) value;
            }
        }

        public global::System.IntPtr Client2
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->client2;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->client2 = (global::System.IntPtr) value;
            }
        }

        public global::NetVips.VipsDemandStyle Dhint
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->dhint;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->dhint = value;
            }
        }

        public long SizeofHeader
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->sizeof_header;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->sizeof_header = value;
            }
        }

        public int Serial
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->serial;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->serial = value;
            }
        }

        public global::NetVips.VipsImage ProgressSignal
        {
            get
            {
                global::NetVips.VipsImage __result0;
                if (((global::NetVips.VipsImage.__Internal*) __Instance)->progress_signal == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(((global::NetVips.VipsImage.__Internal*) __Instance)->progress_signal))
                    __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[((global::NetVips.VipsImage.__Internal*) __Instance)->progress_signal];
                else __result0 = global::NetVips.VipsImage.__CreateInstance(((global::NetVips.VipsImage.__Internal*) __Instance)->progress_signal);
                return __result0;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->progress_signal = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public long FileLength
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->file_length;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->file_length = value;
            }
        }

        public int HintSet
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->hint_set;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->hint_set = value;
            }
        }

        public int DeleteOnClose
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->delete_on_close;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->delete_on_close = value;
            }
        }

        public sbyte* DeleteOnCloseFilename
        {
            get
            {
                return (sbyte*) ((global::NetVips.VipsImage.__Internal*) __Instance)->delete_on_close_filename;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->delete_on_close_filename = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class VipsProgress : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 48)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr im;

            [FieldOffset(8)]
            internal int run;

            [FieldOffset(12)]
            internal int eta;

            [FieldOffset(16)]
            internal long tpels;

            [FieldOffset(24)]
            internal long npels;

            [FieldOffset(32)]
            internal int percent;

            [FieldOffset(40)]
            internal global::System.IntPtr start;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_VipsProgress@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsProgress> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsProgress>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsProgress __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsProgress(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsProgress __CreateInstance(global::NetVips.VipsProgress.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsProgress(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsProgress.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsProgress.__Internal));
            *(global::NetVips.VipsProgress.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsProgress(global::NetVips.VipsProgress.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsProgress(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VipsProgress()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsProgress.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public VipsProgress(global::NetVips.VipsProgress _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsProgress.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NetVips.VipsProgress.__Internal*) __Instance) = *((global::NetVips.VipsProgress.__Internal*) _0.__Instance);
        }

        ~VipsProgress()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsProgress __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NetVips.VipsImage Im
        {
            get
            {
                global::NetVips.VipsImage __result0;
                if (((global::NetVips.VipsProgress.__Internal*) __Instance)->im == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(((global::NetVips.VipsProgress.__Internal*) __Instance)->im))
                    __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[((global::NetVips.VipsProgress.__Internal*) __Instance)->im];
                else __result0 = global::NetVips.VipsImage.__CreateInstance(((global::NetVips.VipsProgress.__Internal*) __Instance)->im);
                return __result0;
            }

            set
            {
                ((global::NetVips.VipsProgress.__Internal*)__Instance)->im = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public int Run
        {
            get
            {
                return ((global::NetVips.VipsProgress.__Internal*) __Instance)->run;
            }

            set
            {
                ((global::NetVips.VipsProgress.__Internal*)__Instance)->run = value;
            }
        }

        public int Eta
        {
            get
            {
                return ((global::NetVips.VipsProgress.__Internal*) __Instance)->eta;
            }

            set
            {
                ((global::NetVips.VipsProgress.__Internal*)__Instance)->eta = value;
            }
        }

        public long Tpels
        {
            get
            {
                return ((global::NetVips.VipsProgress.__Internal*) __Instance)->tpels;
            }

            set
            {
                ((global::NetVips.VipsProgress.__Internal*)__Instance)->tpels = value;
            }
        }

        public long Npels
        {
            get
            {
                return ((global::NetVips.VipsProgress.__Internal*) __Instance)->npels;
            }

            set
            {
                ((global::NetVips.VipsProgress.__Internal*)__Instance)->npels = value;
            }
        }

        public int Percent
        {
            get
            {
                return ((global::NetVips.VipsProgress.__Internal*) __Instance)->percent;
            }

            set
            {
                ((global::NetVips.VipsProgress.__Internal*)__Instance)->percent = value;
            }
        }
    }

    public unsafe partial class VipsImageClass : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 376)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.VipsObjectClass.__Internal parent_class;

            [FieldOffset(328)]
            internal global::System.IntPtr preeval;

            [FieldOffset(336)]
            internal global::System.IntPtr eval;

            [FieldOffset(344)]
            internal global::System.IntPtr posteval;

            [FieldOffset(352)]
            internal global::System.IntPtr written;

            [FieldOffset(360)]
            internal global::System.IntPtr invalidate;

            [FieldOffset(368)]
            internal global::System.IntPtr minimise;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_VipsImageClass@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsImageClass> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsImageClass>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsImageClass __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsImageClass(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsImageClass __CreateInstance(global::NetVips.VipsImageClass.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsImageClass(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsImageClass.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsImageClass.__Internal));
            *(global::NetVips.VipsImageClass.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsImageClass(global::NetVips.VipsImageClass.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsImageClass(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VipsImageClass()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsImageClass.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public VipsImageClass(global::NetVips.VipsImageClass _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsImageClass.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NetVips.VipsImageClass.__Internal*) __Instance) = *((global::NetVips.VipsImageClass.__Internal*) _0.__Instance);
        }

        ~VipsImageClass()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsImageClass __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NetVips.VipsObjectClass ParentClass
        {
            get
            {
                return global::NetVips.VipsObjectClass.__CreateInstance(new global::System.IntPtr(&((global::NetVips.VipsImageClass.__Internal*) __Instance)->parent_class));
            }

            set
            {
                ((global::NetVips.VipsImageClass.__Internal*)__Instance)->parent_class = ReferenceEquals(value, null) ? new global::NetVips.VipsObjectClass.__Internal() : *(global::NetVips.VipsObjectClass.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class image
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_get_type")]
            internal static extern ulong VipsImageGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_progress_set")]
            internal static extern void VipsProgressSet(int progress);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_invalidate_all")]
            internal static extern void VipsImageInvalidateAll(global::System.IntPtr image);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_minimise_all")]
            internal static extern void VipsImageMinimiseAll(global::System.IntPtr image);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_set_progress")]
            internal static extern void VipsImageSetProgress(global::System.IntPtr image, int progress);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_filename_get_filename")]
            internal static extern sbyte* VipsFilenameGetFilename([MarshalAs(UnmanagedType.LPStr)] string vips_filename);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_filename_get_options")]
            internal static extern sbyte* VipsFilenameGetOptions([MarshalAs(UnmanagedType.LPStr)] string vips_filename);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_new")]
            internal static extern global::System.IntPtr VipsImageNew();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_new_memory")]
            internal static extern global::System.IntPtr VipsImageNewMemory();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_memory")]
            internal static extern global::System.IntPtr VipsImageMemory();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_new_from_file")]
            internal static extern global::System.IntPtr VipsImageNewFromFile([MarshalAs(UnmanagedType.LPStr)] string name, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_new_from_file_RW")]
            internal static extern global::System.IntPtr VipsImageNewFromFileRW([MarshalAs(UnmanagedType.LPStr)] string filename);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_new_from_file_raw")]
            internal static extern global::System.IntPtr VipsImageNewFromFileRaw([MarshalAs(UnmanagedType.LPStr)] string filename, int xsize, int ysize, int bands, ulong offset);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_new_from_memory")]
            internal static extern global::System.IntPtr VipsImageNewFromMemory(global::System.IntPtr data, ulong size, int width, int height, int bands, global::NetVips.VipsBandFormat format);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_new_from_memory_copy")]
            internal static extern global::System.IntPtr VipsImageNewFromMemoryCopy(global::System.IntPtr data, ulong size, int width, int height, int bands, global::NetVips.VipsBandFormat format);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_new_from_buffer")]
            internal static extern global::System.IntPtr VipsImageNewFromBuffer(global::System.IntPtr buf, ulong len, [MarshalAs(UnmanagedType.LPStr)] string option_string, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_new_matrix")]
            internal static extern global::System.IntPtr VipsImageNewMatrix(int width, int height);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_new_matrixv")]
            internal static extern global::System.IntPtr VipsImageNewMatrixv(int width, int height, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_new_matrix_from_array")]
            internal static extern global::System.IntPtr VipsImageNewMatrixFromArray(int width, int height, double* array, int size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_matrix_from_array")]
            internal static extern global::System.IntPtr VipsImageMatrixFromArray(int width, int height, double* array, int size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_new_from_image")]
            internal static extern global::System.IntPtr VipsImageNewFromImage(global::System.IntPtr image, double* c, int n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_new_from_image1")]
            internal static extern global::System.IntPtr VipsImageNewFromImage1(global::System.IntPtr image, double c);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_set_delete_on_close")]
            internal static extern void VipsImageSetDeleteOnClose(global::System.IntPtr image, int delete_on_close);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_get_disc_threshold")]
            internal static extern ulong VipsGetDiscThreshold();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_new_temp_file")]
            internal static extern global::System.IntPtr VipsImageNewTempFile([MarshalAs(UnmanagedType.LPStr)] string format);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_write")]
            internal static extern int VipsImageWrite(global::System.IntPtr image, global::System.IntPtr @out);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_write_to_file")]
            internal static extern int VipsImageWriteToFile(global::System.IntPtr image, [MarshalAs(UnmanagedType.LPStr)] string name, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_write_to_buffer")]
            internal static extern int VipsImageWriteToBuffer(global::System.IntPtr @in, [MarshalAs(UnmanagedType.LPStr)] string suffix, void** buf, ulong* size, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_write_to_memory")]
            internal static extern global::System.IntPtr VipsImageWriteToMemory(global::System.IntPtr @in, ulong* size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_decode_predict")]
            internal static extern int VipsImageDecodePredict(global::System.IntPtr @in, int* bands, global::NetVips.VipsBandFormat* format);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_decode")]
            internal static extern int VipsImageDecode(global::System.IntPtr @in, global::System.IntPtr @out);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_encode")]
            internal static extern int VipsImageEncode(global::System.IntPtr @in, global::System.IntPtr @out, global::NetVips.VipsCoding coding);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_isMSBfirst")]
            internal static extern int VipsImageIsMSBfirst(global::System.IntPtr image);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_isfile")]
            internal static extern int VipsImageIsfile(global::System.IntPtr image);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_ispartial")]
            internal static extern int VipsImageIspartial(global::System.IntPtr image);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_hasalpha")]
            internal static extern int VipsImageHasalpha(global::System.IntPtr image);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_copy_memory")]
            internal static extern global::System.IntPtr VipsImageCopyMemory(global::System.IntPtr image);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_wio_input")]
            internal static extern int VipsImageWioInput(global::System.IntPtr image);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_pio_input")]
            internal static extern int VipsImagePioInput(global::System.IntPtr image);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_pio_output")]
            internal static extern int VipsImagePioOutput(global::System.IntPtr image);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_inplace")]
            internal static extern int VipsImageInplace(global::System.IntPtr image);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_write_prepare")]
            internal static extern int VipsImageWritePrepare(global::System.IntPtr image);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_write_line")]
            internal static extern int VipsImageWriteLine(global::System.IntPtr image, int ypos, byte* linebuffer);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_band_format_isint")]
            internal static extern int VipsBandFormatIsint(global::NetVips.VipsBandFormat format);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_band_format_isuint")]
            internal static extern int VipsBandFormatIsuint(global::NetVips.VipsBandFormat format);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_band_format_is8bit")]
            internal static extern int VipsBandFormatIs8bit(global::NetVips.VipsBandFormat format);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_band_format_isfloat")]
            internal static extern int VipsBandFormatIsfloat(global::NetVips.VipsBandFormat format);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_band_format_iscomplex")]
            internal static extern int VipsBandFormatIscomplex(global::NetVips.VipsBandFormat format);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_system")]
            internal static extern int VipsSystem([MarshalAs(UnmanagedType.LPStr)] string cmd_format, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_array_image_new")]
            internal static extern global::System.IntPtr VipsArrayImageNew(global::System.IntPtr array, int n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_array_image_newv")]
            internal static extern global::System.IntPtr VipsArrayImageNewv(int n, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_array_image_new_from_string")]
            internal static extern global::System.IntPtr VipsArrayImageNewFromString([MarshalAs(UnmanagedType.LPStr)] string @string, global::NetVips.VipsAccess flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_array_image_empty")]
            internal static extern global::System.IntPtr VipsArrayImageEmpty();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_array_image_append")]
            internal static extern global::System.IntPtr VipsArrayImageAppend(global::System.IntPtr array, global::System.IntPtr image);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_array_image_get")]
            internal static extern global::System.IntPtr VipsArrayImageGet(global::System.IntPtr array, int* n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_reorder_prepare_many")]
            internal static extern int VipsReorderPrepareMany(global::System.IntPtr image, global::System.IntPtr regions, global::System.IntPtr r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_reorder_margin_hint")]
            internal static extern void VipsReorderMarginHint(global::System.IntPtr image, int margin);
        }

        public static ulong VipsImageGetType()
        {
            var __ret = __Internal.VipsImageGetType();
            return __ret;
        }

        public static void VipsProgressSet(int progress)
        {
            __Internal.VipsProgressSet(progress);
        }

        public static void VipsImageInvalidateAll(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            __Internal.VipsImageInvalidateAll(__arg0);
        }

        public static void VipsImageMinimiseAll(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            __Internal.VipsImageMinimiseAll(__arg0);
        }

        public static void VipsImageSetProgress(global::NetVips.VipsImage image, int progress)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            __Internal.VipsImageSetProgress(__arg0, progress);
        }

        public static sbyte* VipsFilenameGetFilename(string vips_filename)
        {
            var __ret = __Internal.VipsFilenameGetFilename(vips_filename);
            return __ret;
        }

        public static sbyte* VipsFilenameGetOptions(string vips_filename)
        {
            var __ret = __Internal.VipsFilenameGetOptions(vips_filename);
            return __ret;
        }

        public static global::NetVips.VipsImage VipsImageNew()
        {
            var __ret = __Internal.VipsImageNew();
            global::NetVips.VipsImage __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__ret);
            return __result0;
        }

        public static global::NetVips.VipsImage VipsImageNewMemory()
        {
            var __ret = __Internal.VipsImageNewMemory();
            global::NetVips.VipsImage __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__ret);
            return __result0;
        }

        public static global::NetVips.VipsImage VipsImageMemory()
        {
            var __ret = __Internal.VipsImageMemory();
            global::NetVips.VipsImage __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__ret);
            return __result0;
        }

        public static global::NetVips.VipsImage VipsImageNewFromFile(string name, string[] options = null)
        {
            var __ret = __Internal.VipsImageNewFromFile(name, options);
            global::NetVips.VipsImage __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__ret);
            return __result0;
        }

        public static global::NetVips.VipsImage VipsImageNewFromFileRW(string filename)
        {
            var __ret = __Internal.VipsImageNewFromFileRW(filename);
            global::NetVips.VipsImage __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__ret);
            return __result0;
        }

        public static global::NetVips.VipsImage VipsImageNewFromFileRaw(string filename, int xsize, int ysize, int bands, ulong offset)
        {
            var __ret = __Internal.VipsImageNewFromFileRaw(filename, xsize, ysize, bands, offset);
            global::NetVips.VipsImage __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__ret);
            return __result0;
        }

        public static global::NetVips.VipsImage VipsImageNewFromMemory(global::System.IntPtr data, ulong size, int width, int height, int bands, global::NetVips.VipsBandFormat format)
        {
            var __ret = __Internal.VipsImageNewFromMemory(data, size, width, height, bands, format);
            global::NetVips.VipsImage __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__ret);
            return __result0;
        }

        public static global::NetVips.VipsImage VipsImageNewFromMemoryCopy(global::System.IntPtr data, ulong size, int width, int height, int bands, global::NetVips.VipsBandFormat format)
        {
            var __ret = __Internal.VipsImageNewFromMemoryCopy(data, size, width, height, bands, format);
            global::NetVips.VipsImage __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__ret);
            return __result0;
        }

        public static global::NetVips.VipsImage VipsImageNewFromBuffer(global::System.IntPtr buf, ulong len, string option_string, string[] options = null)
        {
            var __ret = __Internal.VipsImageNewFromBuffer(buf, len, option_string, options);
            global::NetVips.VipsImage __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__ret);
            return __result0;
        }

        public static global::NetVips.VipsImage VipsImageNewMatrix(int width, int height)
        {
            var __ret = __Internal.VipsImageNewMatrix(width, height);
            global::NetVips.VipsImage __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__ret);
            return __result0;
        }

        public static global::NetVips.VipsImage VipsImageNewMatrixv(int width, int height, string[] options = null)
        {
            var __ret = __Internal.VipsImageNewMatrixv(width, height, options);
            global::NetVips.VipsImage __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__ret);
            return __result0;
        }

        public static global::NetVips.VipsImage VipsImageNewMatrixFromArray(int width, int height, ref double array, int size)
        {
            fixed (double* __refParamPtr2 = &array)
            {
                var __arg2 = __refParamPtr2;
                var __ret = __Internal.VipsImageNewMatrixFromArray(width, height, __arg2, size);
                global::NetVips.VipsImage __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__ret];
                else __result0 = global::NetVips.VipsImage.__CreateInstance(__ret);
                return __result0;
            }
        }

        public static global::NetVips.VipsImage VipsImageMatrixFromArray(int width, int height, ref double array, int size)
        {
            fixed (double* __refParamPtr2 = &array)
            {
                var __arg2 = __refParamPtr2;
                var __ret = __Internal.VipsImageMatrixFromArray(width, height, __arg2, size);
                global::NetVips.VipsImage __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__ret];
                else __result0 = global::NetVips.VipsImage.__CreateInstance(__ret);
                return __result0;
            }
        }

        public static global::NetVips.VipsImage VipsImageNewFromImage(global::NetVips.VipsImage image, ref double c, int n)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            fixed (double* __refParamPtr1 = &c)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.VipsImageNewFromImage(__arg0, __arg1, n);
                global::NetVips.VipsImage __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__ret];
                else __result0 = global::NetVips.VipsImage.__CreateInstance(__ret);
                return __result0;
            }
        }

        public static global::NetVips.VipsImage VipsImageNewFromImage1(global::NetVips.VipsImage image, double c)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageNewFromImage1(__arg0, c);
            global::NetVips.VipsImage __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__ret);
            return __result0;
        }

        public static void VipsImageSetDeleteOnClose(global::NetVips.VipsImage image, int delete_on_close)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            __Internal.VipsImageSetDeleteOnClose(__arg0, delete_on_close);
        }

        public static ulong VipsGetDiscThreshold()
        {
            var __ret = __Internal.VipsGetDiscThreshold();
            return __ret;
        }

        public static global::NetVips.VipsImage VipsImageNewTempFile(string format)
        {
            var __ret = __Internal.VipsImageNewTempFile(format);
            global::NetVips.VipsImage __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__ret);
            return __result0;
        }

        public static int VipsImageWrite(global::NetVips.VipsImage image, out global::NetVips.VipsImage @out)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsImageWrite(__arg0, __arg1);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsImageWriteToFile(global::NetVips.VipsImage image, string name, string[] options = null)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageWriteToFile(__arg0, name, options);
            return __ret;
        }

        public static int VipsImageWriteToBuffer(global::NetVips.VipsImage @in, string suffix, void** buf, ref ulong size, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            fixed (ulong* __refParamPtr3 = &size)
            {
                var __arg3 = __refParamPtr3;
                var __ret = __Internal.VipsImageWriteToBuffer(__arg0, suffix, buf, __arg3, options);
                return __ret;
            }
        }

        public static global::System.IntPtr VipsImageWriteToMemory(global::NetVips.VipsImage @in, ref ulong size)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            fixed (ulong* __refParamPtr1 = &size)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.VipsImageWriteToMemory(__arg0, __arg1);
                return __ret;
            }
        }

        public static int VipsImageDecodePredict(global::NetVips.VipsImage @in, ref int bands, global::NetVips.VipsBandFormat* format)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            fixed (int* __refParamPtr1 = &bands)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.VipsImageDecodePredict(__arg0, __arg1, format);
                return __ret;
            }
        }

        public static int VipsImageDecode(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsImageDecode(__arg0, __arg1);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsImageEncode(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, global::NetVips.VipsCoding coding)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsImageEncode(__arg0, __arg1, coding);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsImageIsMSBfirst(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageIsMSBfirst(__arg0);
            return __ret;
        }

        public static int VipsImageIsfile(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageIsfile(__arg0);
            return __ret;
        }

        public static int VipsImageIspartial(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageIspartial(__arg0);
            return __ret;
        }

        public static int VipsImageHasalpha(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageHasalpha(__arg0);
            return __ret;
        }

        public static global::NetVips.VipsImage VipsImageCopyMemory(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageCopyMemory(__arg0);
            global::NetVips.VipsImage __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__ret);
            return __result0;
        }

        public static int VipsImageWioInput(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageWioInput(__arg0);
            return __ret;
        }

        public static int VipsImagePioInput(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImagePioInput(__arg0);
            return __ret;
        }

        public static int VipsImagePioOutput(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImagePioOutput(__arg0);
            return __ret;
        }

        public static int VipsImageInplace(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageInplace(__arg0);
            return __ret;
        }

        public static int VipsImageWritePrepare(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageWritePrepare(__arg0);
            return __ret;
        }

        public static int VipsImageWriteLine(global::NetVips.VipsImage image, int ypos, byte* linebuffer)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageWriteLine(__arg0, ypos, linebuffer);
            return __ret;
        }

        public static int VipsBandFormatIsint(global::NetVips.VipsBandFormat format)
        {
            var __ret = __Internal.VipsBandFormatIsint(format);
            return __ret;
        }

        public static int VipsBandFormatIsuint(global::NetVips.VipsBandFormat format)
        {
            var __ret = __Internal.VipsBandFormatIsuint(format);
            return __ret;
        }

        public static int VipsBandFormatIs8bit(global::NetVips.VipsBandFormat format)
        {
            var __ret = __Internal.VipsBandFormatIs8bit(format);
            return __ret;
        }

        public static int VipsBandFormatIsfloat(global::NetVips.VipsBandFormat format)
        {
            var __ret = __Internal.VipsBandFormatIsfloat(format);
            return __ret;
        }

        public static int VipsBandFormatIscomplex(global::NetVips.VipsBandFormat format)
        {
            var __ret = __Internal.VipsBandFormatIscomplex(format);
            return __ret;
        }

        public static int VipsSystem(string cmd_format, string[] options = null)
        {
            var __ret = __Internal.VipsSystem(cmd_format, options);
            return __ret;
        }

        public static global::NetVips.VipsArrayImage VipsArrayImageNew(global::NetVips.VipsImage array, int n)
        {
            var __arg0 = ReferenceEquals(array, null) ? global::System.IntPtr.Zero : array.__Instance;
            var __ret = __Internal.VipsArrayImageNew(__arg0, n);
            global::NetVips.VipsArrayImage __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsArrayImage.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsArrayImage) global::NetVips.VipsArrayImage.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsArrayImage.__CreateInstance(__ret);
            return __result0;
        }

        public static global::NetVips.VipsArrayImage VipsArrayImageNewv(int n, string[] options = null)
        {
            var __ret = __Internal.VipsArrayImageNewv(n, options);
            global::NetVips.VipsArrayImage __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsArrayImage.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsArrayImage) global::NetVips.VipsArrayImage.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsArrayImage.__CreateInstance(__ret);
            return __result0;
        }

        public static global::NetVips.VipsArrayImage VipsArrayImageNewFromString(string @string, global::NetVips.VipsAccess flags)
        {
            var __ret = __Internal.VipsArrayImageNewFromString(@string, flags);
            global::NetVips.VipsArrayImage __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsArrayImage.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsArrayImage) global::NetVips.VipsArrayImage.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsArrayImage.__CreateInstance(__ret);
            return __result0;
        }

        public static global::NetVips.VipsArrayImage VipsArrayImageEmpty()
        {
            var __ret = __Internal.VipsArrayImageEmpty();
            global::NetVips.VipsArrayImage __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsArrayImage.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsArrayImage) global::NetVips.VipsArrayImage.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsArrayImage.__CreateInstance(__ret);
            return __result0;
        }

        public static global::NetVips.VipsArrayImage VipsArrayImageAppend(global::NetVips.VipsArrayImage array, global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(array, null) ? global::System.IntPtr.Zero : array.__Instance;
            var __arg1 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsArrayImageAppend(__arg0, __arg1);
            global::NetVips.VipsArrayImage __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsArrayImage.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsArrayImage) global::NetVips.VipsArrayImage.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsArrayImage.__CreateInstance(__ret);
            return __result0;
        }

        public static global::NetVips.VipsImage VipsArrayImageGet(global::NetVips.VipsArrayImage array, ref int n)
        {
            var __arg0 = ReferenceEquals(array, null) ? global::System.IntPtr.Zero : array.__Instance;
            fixed (int* __refParamPtr1 = &n)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.VipsArrayImageGet(__arg0, __arg1);
                global::NetVips.VipsImage __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__ret];
                else __result0 = global::NetVips.VipsImage.__CreateInstance(__ret);
                return __result0;
            }
        }

        public static int VipsReorderPrepareMany(global::NetVips.VipsImage image, global::NetVips.VipsRegion regions, global::NetVips.VipsRect r)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __arg1 = ReferenceEquals(regions, null) ? global::System.IntPtr.Zero : regions.__Instance;
            var __arg2 = ReferenceEquals(r, null) ? global::System.IntPtr.Zero : r.__Instance;
            var __ret = __Internal.VipsReorderPrepareMany(__arg0, __arg1, __arg2);
            return __ret;
        }

        public static void VipsReorderMarginHint(global::NetVips.VipsImage image, int margin)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            __Internal.VipsReorderMarginHint(__arg0, margin);
        }
    }

    public unsafe partial class memory
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_malloc")]
            internal static extern global::System.IntPtr VipsMalloc(global::System.IntPtr @object, ulong size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_strdup")]
            internal static extern sbyte* VipsStrdup(global::System.IntPtr @object, [MarshalAs(UnmanagedType.LPStr)] string str);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_free")]
            internal static extern int VipsFree(global::System.IntPtr buf);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_tracked_free")]
            internal static extern void VipsTrackedFree(global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_tracked_malloc")]
            internal static extern global::System.IntPtr VipsTrackedMalloc(ulong size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_tracked_get_mem")]
            internal static extern ulong VipsTrackedGetMem();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_tracked_get_mem_highwater")]
            internal static extern ulong VipsTrackedGetMemHighwater();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_tracked_get_allocs")]
            internal static extern int VipsTrackedGetAllocs();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_tracked_open")]
            internal static extern int VipsTrackedOpen([MarshalAs(UnmanagedType.LPStr)] string pathname, int flags, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_tracked_close")]
            internal static extern int VipsTrackedClose(int fd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_tracked_get_files")]
            internal static extern int VipsTrackedGetFiles();
        }

        public static global::System.IntPtr VipsMalloc(global::NetVips.VipsObject @object, ulong size)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = __Internal.VipsMalloc(__arg0, size);
            return __ret;
        }

        public static sbyte* VipsStrdup(global::NetVips.VipsObject @object, string str)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = __Internal.VipsStrdup(__arg0, str);
            return __ret;
        }

        public static int VipsFree(global::System.IntPtr buf)
        {
            var __ret = __Internal.VipsFree(buf);
            return __ret;
        }

        public static void VipsTrackedFree(global::System.IntPtr s)
        {
            __Internal.VipsTrackedFree(s);
        }

        public static global::System.IntPtr VipsTrackedMalloc(ulong size)
        {
            var __ret = __Internal.VipsTrackedMalloc(size);
            return __ret;
        }

        public static ulong VipsTrackedGetMem()
        {
            var __ret = __Internal.VipsTrackedGetMem();
            return __ret;
        }

        public static ulong VipsTrackedGetMemHighwater()
        {
            var __ret = __Internal.VipsTrackedGetMemHighwater();
            return __ret;
        }

        public static int VipsTrackedGetAllocs()
        {
            var __ret = __Internal.VipsTrackedGetAllocs();
            return __ret;
        }

        public static int VipsTrackedOpen(string pathname, int flags, string[] options = null)
        {
            var __ret = __Internal.VipsTrackedOpen(pathname, flags, options);
            return __ret;
        }

        public static int VipsTrackedClose(int fd)
        {
            var __ret = __Internal.VipsTrackedClose(fd);
            return __ret;
        }

        public static int VipsTrackedGetFiles()
        {
            var __ret = __Internal.VipsTrackedGetFiles();
            return __ret;
        }
    }

    public unsafe partial class error
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_error_buffer")]
            internal static extern global::System.IntPtr VipsErrorBuffer();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_error_clear")]
            internal static extern void VipsErrorClear();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_error_freeze")]
            internal static extern void VipsErrorFreeze();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_error_thaw")]
            internal static extern void VipsErrorThaw();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_error")]
            internal static extern void VipsError([MarshalAs(UnmanagedType.LPStr)] string domain, [MarshalAs(UnmanagedType.LPStr)] string fmt, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_error_system")]
            internal static extern void VipsErrorSystem(int err, [MarshalAs(UnmanagedType.LPStr)] string domain, [MarshalAs(UnmanagedType.LPStr)] string fmt, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_error_exit")]
            internal static extern void VipsErrorExit([MarshalAs(UnmanagedType.LPStr)] string fmt, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_check_uncoded")]
            internal static extern int VipsCheckUncoded([MarshalAs(UnmanagedType.LPStr)] string domain, global::System.IntPtr im);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_check_coding")]
            internal static extern int VipsCheckCoding([MarshalAs(UnmanagedType.LPStr)] string domain, global::System.IntPtr im, global::NetVips.VipsCoding coding);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_check_coding_known")]
            internal static extern int VipsCheckCodingKnown([MarshalAs(UnmanagedType.LPStr)] string domain, global::System.IntPtr im);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_check_coding_noneorlabq")]
            internal static extern int VipsCheckCodingNoneorlabq([MarshalAs(UnmanagedType.LPStr)] string domain, global::System.IntPtr im);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_check_coding_same")]
            internal static extern int VipsCheckCodingSame([MarshalAs(UnmanagedType.LPStr)] string domain, global::System.IntPtr im1, global::System.IntPtr im2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_check_mono")]
            internal static extern int VipsCheckMono([MarshalAs(UnmanagedType.LPStr)] string domain, global::System.IntPtr im);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_check_bands")]
            internal static extern int VipsCheckBands([MarshalAs(UnmanagedType.LPStr)] string domain, global::System.IntPtr im, int bands);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_check_bands_1or3")]
            internal static extern int VipsCheckBands1or3([MarshalAs(UnmanagedType.LPStr)] string domain, global::System.IntPtr im);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_check_bands_atleast")]
            internal static extern int VipsCheckBandsAtleast([MarshalAs(UnmanagedType.LPStr)] string domain, global::System.IntPtr im, int bands);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_check_bands_1orn")]
            internal static extern int VipsCheckBands1orn([MarshalAs(UnmanagedType.LPStr)] string domain, global::System.IntPtr im1, global::System.IntPtr im2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_check_bands_1orn_unary")]
            internal static extern int VipsCheckBands1ornUnary([MarshalAs(UnmanagedType.LPStr)] string domain, global::System.IntPtr im, int n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_check_bands_same")]
            internal static extern int VipsCheckBandsSame([MarshalAs(UnmanagedType.LPStr)] string domain, global::System.IntPtr im1, global::System.IntPtr im2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_check_bandno")]
            internal static extern int VipsCheckBandno([MarshalAs(UnmanagedType.LPStr)] string domain, global::System.IntPtr im, int bandno);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_check_int")]
            internal static extern int VipsCheckInt([MarshalAs(UnmanagedType.LPStr)] string domain, global::System.IntPtr im);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_check_uint")]
            internal static extern int VipsCheckUint([MarshalAs(UnmanagedType.LPStr)] string domain, global::System.IntPtr im);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_check_uintorf")]
            internal static extern int VipsCheckUintorf([MarshalAs(UnmanagedType.LPStr)] string domain, global::System.IntPtr im);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_check_noncomplex")]
            internal static extern int VipsCheckNoncomplex([MarshalAs(UnmanagedType.LPStr)] string domain, global::System.IntPtr im);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_check_complex")]
            internal static extern int VipsCheckComplex([MarshalAs(UnmanagedType.LPStr)] string domain, global::System.IntPtr im);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_check_twocomponents")]
            internal static extern int VipsCheckTwocomponents([MarshalAs(UnmanagedType.LPStr)] string domain, global::System.IntPtr im);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_check_format")]
            internal static extern int VipsCheckFormat([MarshalAs(UnmanagedType.LPStr)] string domain, global::System.IntPtr im, global::NetVips.VipsBandFormat fmt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_check_u8or16")]
            internal static extern int VipsCheckU8or16([MarshalAs(UnmanagedType.LPStr)] string domain, global::System.IntPtr im);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_check_8or16")]
            internal static extern int VipsCheck8or16([MarshalAs(UnmanagedType.LPStr)] string domain, global::System.IntPtr im);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_check_u8or16orf")]
            internal static extern int VipsCheckU8or16orf([MarshalAs(UnmanagedType.LPStr)] string domain, global::System.IntPtr im);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_check_format_same")]
            internal static extern int VipsCheckFormatSame([MarshalAs(UnmanagedType.LPStr)] string domain, global::System.IntPtr im1, global::System.IntPtr im2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_check_size_same")]
            internal static extern int VipsCheckSizeSame([MarshalAs(UnmanagedType.LPStr)] string domain, global::System.IntPtr im1, global::System.IntPtr im2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_check_oddsquare")]
            internal static extern int VipsCheckOddsquare([MarshalAs(UnmanagedType.LPStr)] string domain, global::System.IntPtr im);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_check_vector_length")]
            internal static extern int VipsCheckVectorLength([MarshalAs(UnmanagedType.LPStr)] string domain, int n, int len);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_check_vector")]
            internal static extern int VipsCheckVector([MarshalAs(UnmanagedType.LPStr)] string domain, int n, global::System.IntPtr im);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_check_hist")]
            internal static extern int VipsCheckHist([MarshalAs(UnmanagedType.LPStr)] string domain, global::System.IntPtr im);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_check_matrix")]
            internal static extern int VipsCheckMatrix([MarshalAs(UnmanagedType.LPStr)] string domain, global::System.IntPtr im, global::System.IntPtr @out);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_check_separable")]
            internal static extern int VipsCheckSeparable([MarshalAs(UnmanagedType.LPStr)] string domain, global::System.IntPtr im);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_check_precision_intfloat")]
            internal static extern int VipsCheckPrecisionIntfloat([MarshalAs(UnmanagedType.LPStr)] string domain, global::NetVips.VipsPrecision precision);
        }

        public static string VipsErrorBuffer()
        {
            var __ret = __Internal.VipsErrorBuffer();
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static void VipsErrorClear()
        {
            __Internal.VipsErrorClear();
        }

        public static void VipsErrorFreeze()
        {
            __Internal.VipsErrorFreeze();
        }

        public static void VipsErrorThaw()
        {
            __Internal.VipsErrorThaw();
        }

        public static void VipsError(string domain, string fmt, string[] options = null)
        {
            __Internal.VipsError(domain, fmt, options);
        }

        public static void VipsErrorSystem(int err, string domain, string fmt, string[] options = null)
        {
            __Internal.VipsErrorSystem(err, domain, fmt, options);
        }

        public static void VipsErrorExit(string fmt, string[] options = null)
        {
            __Internal.VipsErrorExit(fmt, options);
        }

        public static int VipsCheckUncoded(string domain, global::NetVips.VipsImage im)
        {
            var __arg1 = ReferenceEquals(im, null) ? global::System.IntPtr.Zero : im.__Instance;
            var __ret = __Internal.VipsCheckUncoded(domain, __arg1);
            return __ret;
        }

        public static int VipsCheckCoding(string domain, global::NetVips.VipsImage im, global::NetVips.VipsCoding coding)
        {
            var __arg1 = ReferenceEquals(im, null) ? global::System.IntPtr.Zero : im.__Instance;
            var __ret = __Internal.VipsCheckCoding(domain, __arg1, coding);
            return __ret;
        }

        public static int VipsCheckCodingKnown(string domain, global::NetVips.VipsImage im)
        {
            var __arg1 = ReferenceEquals(im, null) ? global::System.IntPtr.Zero : im.__Instance;
            var __ret = __Internal.VipsCheckCodingKnown(domain, __arg1);
            return __ret;
        }

        public static int VipsCheckCodingNoneorlabq(string domain, global::NetVips.VipsImage im)
        {
            var __arg1 = ReferenceEquals(im, null) ? global::System.IntPtr.Zero : im.__Instance;
            var __ret = __Internal.VipsCheckCodingNoneorlabq(domain, __arg1);
            return __ret;
        }

        public static int VipsCheckCodingSame(string domain, global::NetVips.VipsImage im1, global::NetVips.VipsImage im2)
        {
            var __arg1 = ReferenceEquals(im1, null) ? global::System.IntPtr.Zero : im1.__Instance;
            var __arg2 = ReferenceEquals(im2, null) ? global::System.IntPtr.Zero : im2.__Instance;
            var __ret = __Internal.VipsCheckCodingSame(domain, __arg1, __arg2);
            return __ret;
        }

        public static int VipsCheckMono(string domain, global::NetVips.VipsImage im)
        {
            var __arg1 = ReferenceEquals(im, null) ? global::System.IntPtr.Zero : im.__Instance;
            var __ret = __Internal.VipsCheckMono(domain, __arg1);
            return __ret;
        }

        public static int VipsCheckBands(string domain, global::NetVips.VipsImage im, int bands)
        {
            var __arg1 = ReferenceEquals(im, null) ? global::System.IntPtr.Zero : im.__Instance;
            var __ret = __Internal.VipsCheckBands(domain, __arg1, bands);
            return __ret;
        }

        public static int VipsCheckBands1or3(string domain, global::NetVips.VipsImage im)
        {
            var __arg1 = ReferenceEquals(im, null) ? global::System.IntPtr.Zero : im.__Instance;
            var __ret = __Internal.VipsCheckBands1or3(domain, __arg1);
            return __ret;
        }

        public static int VipsCheckBandsAtleast(string domain, global::NetVips.VipsImage im, int bands)
        {
            var __arg1 = ReferenceEquals(im, null) ? global::System.IntPtr.Zero : im.__Instance;
            var __ret = __Internal.VipsCheckBandsAtleast(domain, __arg1, bands);
            return __ret;
        }

        public static int VipsCheckBands1orn(string domain, global::NetVips.VipsImage im1, global::NetVips.VipsImage im2)
        {
            var __arg1 = ReferenceEquals(im1, null) ? global::System.IntPtr.Zero : im1.__Instance;
            var __arg2 = ReferenceEquals(im2, null) ? global::System.IntPtr.Zero : im2.__Instance;
            var __ret = __Internal.VipsCheckBands1orn(domain, __arg1, __arg2);
            return __ret;
        }

        public static int VipsCheckBands1ornUnary(string domain, global::NetVips.VipsImage im, int n)
        {
            var __arg1 = ReferenceEquals(im, null) ? global::System.IntPtr.Zero : im.__Instance;
            var __ret = __Internal.VipsCheckBands1ornUnary(domain, __arg1, n);
            return __ret;
        }

        public static int VipsCheckBandsSame(string domain, global::NetVips.VipsImage im1, global::NetVips.VipsImage im2)
        {
            var __arg1 = ReferenceEquals(im1, null) ? global::System.IntPtr.Zero : im1.__Instance;
            var __arg2 = ReferenceEquals(im2, null) ? global::System.IntPtr.Zero : im2.__Instance;
            var __ret = __Internal.VipsCheckBandsSame(domain, __arg1, __arg2);
            return __ret;
        }

        public static int VipsCheckBandno(string domain, global::NetVips.VipsImage im, int bandno)
        {
            var __arg1 = ReferenceEquals(im, null) ? global::System.IntPtr.Zero : im.__Instance;
            var __ret = __Internal.VipsCheckBandno(domain, __arg1, bandno);
            return __ret;
        }

        public static int VipsCheckInt(string domain, global::NetVips.VipsImage im)
        {
            var __arg1 = ReferenceEquals(im, null) ? global::System.IntPtr.Zero : im.__Instance;
            var __ret = __Internal.VipsCheckInt(domain, __arg1);
            return __ret;
        }

        public static int VipsCheckUint(string domain, global::NetVips.VipsImage im)
        {
            var __arg1 = ReferenceEquals(im, null) ? global::System.IntPtr.Zero : im.__Instance;
            var __ret = __Internal.VipsCheckUint(domain, __arg1);
            return __ret;
        }

        public static int VipsCheckUintorf(string domain, global::NetVips.VipsImage im)
        {
            var __arg1 = ReferenceEquals(im, null) ? global::System.IntPtr.Zero : im.__Instance;
            var __ret = __Internal.VipsCheckUintorf(domain, __arg1);
            return __ret;
        }

        public static int VipsCheckNoncomplex(string domain, global::NetVips.VipsImage im)
        {
            var __arg1 = ReferenceEquals(im, null) ? global::System.IntPtr.Zero : im.__Instance;
            var __ret = __Internal.VipsCheckNoncomplex(domain, __arg1);
            return __ret;
        }

        public static int VipsCheckComplex(string domain, global::NetVips.VipsImage im)
        {
            var __arg1 = ReferenceEquals(im, null) ? global::System.IntPtr.Zero : im.__Instance;
            var __ret = __Internal.VipsCheckComplex(domain, __arg1);
            return __ret;
        }

        public static int VipsCheckTwocomponents(string domain, global::NetVips.VipsImage im)
        {
            var __arg1 = ReferenceEquals(im, null) ? global::System.IntPtr.Zero : im.__Instance;
            var __ret = __Internal.VipsCheckTwocomponents(domain, __arg1);
            return __ret;
        }

        public static int VipsCheckFormat(string domain, global::NetVips.VipsImage im, global::NetVips.VipsBandFormat fmt)
        {
            var __arg1 = ReferenceEquals(im, null) ? global::System.IntPtr.Zero : im.__Instance;
            var __ret = __Internal.VipsCheckFormat(domain, __arg1, fmt);
            return __ret;
        }

        public static int VipsCheckU8or16(string domain, global::NetVips.VipsImage im)
        {
            var __arg1 = ReferenceEquals(im, null) ? global::System.IntPtr.Zero : im.__Instance;
            var __ret = __Internal.VipsCheckU8or16(domain, __arg1);
            return __ret;
        }

        public static int VipsCheck8or16(string domain, global::NetVips.VipsImage im)
        {
            var __arg1 = ReferenceEquals(im, null) ? global::System.IntPtr.Zero : im.__Instance;
            var __ret = __Internal.VipsCheck8or16(domain, __arg1);
            return __ret;
        }

        public static int VipsCheckU8or16orf(string domain, global::NetVips.VipsImage im)
        {
            var __arg1 = ReferenceEquals(im, null) ? global::System.IntPtr.Zero : im.__Instance;
            var __ret = __Internal.VipsCheckU8or16orf(domain, __arg1);
            return __ret;
        }

        public static int VipsCheckFormatSame(string domain, global::NetVips.VipsImage im1, global::NetVips.VipsImage im2)
        {
            var __arg1 = ReferenceEquals(im1, null) ? global::System.IntPtr.Zero : im1.__Instance;
            var __arg2 = ReferenceEquals(im2, null) ? global::System.IntPtr.Zero : im2.__Instance;
            var __ret = __Internal.VipsCheckFormatSame(domain, __arg1, __arg2);
            return __ret;
        }

        public static int VipsCheckSizeSame(string domain, global::NetVips.VipsImage im1, global::NetVips.VipsImage im2)
        {
            var __arg1 = ReferenceEquals(im1, null) ? global::System.IntPtr.Zero : im1.__Instance;
            var __arg2 = ReferenceEquals(im2, null) ? global::System.IntPtr.Zero : im2.__Instance;
            var __ret = __Internal.VipsCheckSizeSame(domain, __arg1, __arg2);
            return __ret;
        }

        public static int VipsCheckOddsquare(string domain, global::NetVips.VipsImage im)
        {
            var __arg1 = ReferenceEquals(im, null) ? global::System.IntPtr.Zero : im.__Instance;
            var __ret = __Internal.VipsCheckOddsquare(domain, __arg1);
            return __ret;
        }

        public static int VipsCheckVectorLength(string domain, int n, int len)
        {
            var __ret = __Internal.VipsCheckVectorLength(domain, n, len);
            return __ret;
        }

        public static int VipsCheckVector(string domain, int n, global::NetVips.VipsImage im)
        {
            var __arg2 = ReferenceEquals(im, null) ? global::System.IntPtr.Zero : im.__Instance;
            var __ret = __Internal.VipsCheckVector(domain, n, __arg2);
            return __ret;
        }

        public static int VipsCheckHist(string domain, global::NetVips.VipsImage im)
        {
            var __arg1 = ReferenceEquals(im, null) ? global::System.IntPtr.Zero : im.__Instance;
            var __ret = __Internal.VipsCheckHist(domain, __arg1);
            return __ret;
        }

        public static int VipsCheckMatrix(string domain, global::NetVips.VipsImage im, out global::NetVips.VipsImage @out)
        {
            var __arg1 = ReferenceEquals(im, null) ? global::System.IntPtr.Zero : im.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsCheckMatrix(domain, __arg1, __arg2);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsCheckSeparable(string domain, global::NetVips.VipsImage im)
        {
            var __arg1 = ReferenceEquals(im, null) ? global::System.IntPtr.Zero : im.__Instance;
            var __ret = __Internal.VipsCheckSeparable(domain, __arg1);
            return __ret;
        }

        public static int VipsCheckPrecisionIntfloat(string domain, global::NetVips.VipsPrecision precision)
        {
            var __ret = __Internal.VipsCheckPrecisionIntfloat(domain, precision);
            return __ret;
        }
    }

    public enum VipsFormatFlags
    {
        VIPS_FORMAT_NONE = 0,
        VIPS_FORMAT_PARTIAL = 1,
        VIPS_FORMAT_BIGENDIAN = 2
    }

    public unsafe partial class VipsFormat : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.VipsObject.__Internal parent_object;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_VipsFormat@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsFormat> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsFormat>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsFormat __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsFormat(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsFormat __CreateInstance(global::NetVips.VipsFormat.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsFormat(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsFormat.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsFormat.__Internal));
            *(global::NetVips.VipsFormat.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsFormat(global::NetVips.VipsFormat.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsFormat(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VipsFormat()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsFormat.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public VipsFormat(global::NetVips.VipsFormat _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsFormat.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NetVips.VipsFormat.__Internal*) __Instance) = *((global::NetVips.VipsFormat.__Internal*) _0.__Instance);
        }

        ~VipsFormat()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsFormat __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NetVips.VipsObject ParentObject
        {
            get
            {
                return global::NetVips.VipsObject.__CreateInstance(new global::System.IntPtr(&((global::NetVips.VipsFormat.__Internal*) __Instance)->parent_object));
            }

            set
            {
                ((global::NetVips.VipsFormat.__Internal*)__Instance)->parent_object = ReferenceEquals(value, null) ? new global::NetVips.VipsObject.__Internal() : *(global::NetVips.VipsObject.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class VipsFormatClass : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 384)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.VipsObjectClass.__Internal parent_class;

            [FieldOffset(328)]
            internal global::System.IntPtr is_a;

            [FieldOffset(336)]
            internal global::System.IntPtr header;

            [FieldOffset(344)]
            internal global::System.IntPtr load;

            [FieldOffset(352)]
            internal global::System.IntPtr save;

            [FieldOffset(360)]
            internal global::System.IntPtr get_flags;

            [FieldOffset(368)]
            internal int priority;

            [FieldOffset(376)]
            internal global::System.IntPtr suffs;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_VipsFormatClass@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsFormatClass> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsFormatClass>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsFormatClass __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsFormatClass(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsFormatClass __CreateInstance(global::NetVips.VipsFormatClass.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsFormatClass(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsFormatClass.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsFormatClass.__Internal));
            *(global::NetVips.VipsFormatClass.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsFormatClass(global::NetVips.VipsFormatClass.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsFormatClass(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VipsFormatClass()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsFormatClass.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public VipsFormatClass(global::NetVips.VipsFormatClass _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsFormatClass.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NetVips.VipsFormatClass.__Internal*) __Instance) = *((global::NetVips.VipsFormatClass.__Internal*) _0.__Instance);
        }

        ~VipsFormatClass()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsFormatClass __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NetVips.VipsObjectClass ParentClass
        {
            get
            {
                return global::NetVips.VipsObjectClass.__CreateInstance(new global::System.IntPtr(&((global::NetVips.VipsFormatClass.__Internal*) __Instance)->parent_class));
            }

            set
            {
                ((global::NetVips.VipsFormatClass.__Internal*)__Instance)->parent_class = ReferenceEquals(value, null) ? new global::NetVips.VipsObjectClass.__Internal() : *(global::NetVips.VipsObjectClass.__Internal*) value.__Instance;
            }
        }

        public int Priority
        {
            get
            {
                return ((global::NetVips.VipsFormatClass.__Internal*) __Instance)->priority;
            }

            set
            {
                ((global::NetVips.VipsFormatClass.__Internal*)__Instance)->priority = value;
            }
        }
    }

    public unsafe partial class format
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_format_get_type")]
            internal static extern ulong VipsFormatGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_format_map")]
            internal static extern global::System.IntPtr VipsFormatMap(global::System.IntPtr fn, global::System.IntPtr a, global::System.IntPtr b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_format_for_file")]
            internal static extern global::System.IntPtr VipsFormatForFile([MarshalAs(UnmanagedType.LPStr)] string filename);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_format_for_name")]
            internal static extern global::System.IntPtr VipsFormatForName([MarshalAs(UnmanagedType.LPStr)] string filename);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_format_get_flags")]
            internal static extern global::NetVips.VipsFormatFlags VipsFormatGetFlags(global::System.IntPtr format, [MarshalAs(UnmanagedType.LPStr)] string filename);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_format_read")]
            internal static extern int VipsFormatRead([MarshalAs(UnmanagedType.LPStr)] string filename, global::System.IntPtr @out);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_format_write")]
            internal static extern int VipsFormatWrite(global::System.IntPtr @in, [MarshalAs(UnmanagedType.LPStr)] string filename);
        }

        public static ulong VipsFormatGetType()
        {
            var __ret = __Internal.VipsFormatGetType();
            return __ret;
        }

        public static global::System.IntPtr VipsFormatMap(global::NetVips.VipsSListMap2Fn fn, global::System.IntPtr a, global::System.IntPtr b)
        {
            var __arg0 = fn == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fn);
            var __ret = __Internal.VipsFormatMap(__arg0, a, b);
            return __ret;
        }

        public static global::NetVips.VipsFormatClass VipsFormatForFile(string filename)
        {
            var __ret = __Internal.VipsFormatForFile(filename);
            global::NetVips.VipsFormatClass __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsFormatClass.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsFormatClass) global::NetVips.VipsFormatClass.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsFormatClass.__CreateInstance(__ret);
            return __result0;
        }

        public static global::NetVips.VipsFormatClass VipsFormatForName(string filename)
        {
            var __ret = __Internal.VipsFormatForName(filename);
            global::NetVips.VipsFormatClass __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsFormatClass.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsFormatClass) global::NetVips.VipsFormatClass.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsFormatClass.__CreateInstance(__ret);
            return __result0;
        }

        public static global::NetVips.VipsFormatFlags VipsFormatGetFlags(global::NetVips.VipsFormatClass format, string filename)
        {
            var __arg0 = ReferenceEquals(format, null) ? global::System.IntPtr.Zero : format.__Instance;
            var __ret = __Internal.VipsFormatGetFlags(__arg0, filename);
            return __ret;
        }

        public static int VipsFormatRead(string filename, out global::NetVips.VipsImage @out)
        {
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsFormatRead(filename, __arg1);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsFormatWrite(global::NetVips.VipsImage @in, string filename)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            var __ret = __Internal.VipsFormatWrite(__arg0, filename);
            return __ret;
        }
    }

    public unsafe partial class VipsRegion : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 168)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.VipsObject.__Internal parent_object;

            [FieldOffset(80)]
            internal global::System.IntPtr im;

            [FieldOffset(88)]
            internal global::NetVips.VipsRect.__Internal valid;

            [FieldOffset(104)]
            internal global::NetVips.RegionType type;

            [FieldOffset(112)]
            internal global::System.IntPtr data;

            [FieldOffset(120)]
            internal int bpl;

            [FieldOffset(128)]
            internal global::System.IntPtr seq;

            [FieldOffset(136)]
            internal global::System.IntPtr thread;

            [FieldOffset(144)]
            internal global::System.IntPtr window;

            [FieldOffset(152)]
            internal global::System.IntPtr buffer;

            [FieldOffset(160)]
            internal int invalid;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_VipsRegion@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsRegion> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsRegion>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsRegion __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsRegion(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsRegion __CreateInstance(global::NetVips.VipsRegion.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsRegion(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsRegion.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsRegion.__Internal));
            *(global::NetVips.VipsRegion.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsRegion(global::NetVips.VipsRegion.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsRegion(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VipsRegion()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsRegion.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public VipsRegion(global::NetVips.VipsRegion _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsRegion.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NetVips.VipsRegion.__Internal*) __Instance) = *((global::NetVips.VipsRegion.__Internal*) _0.__Instance);
        }

        ~VipsRegion()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsRegion __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NetVips.VipsObject ParentObject
        {
            get
            {
                return global::NetVips.VipsObject.__CreateInstance(new global::System.IntPtr(&((global::NetVips.VipsRegion.__Internal*) __Instance)->parent_object));
            }

            set
            {
                ((global::NetVips.VipsRegion.__Internal*)__Instance)->parent_object = ReferenceEquals(value, null) ? new global::NetVips.VipsObject.__Internal() : *(global::NetVips.VipsObject.__Internal*) value.__Instance;
            }
        }

        public global::NetVips.VipsImage Im
        {
            get
            {
                global::NetVips.VipsImage __result0;
                if (((global::NetVips.VipsRegion.__Internal*) __Instance)->im == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(((global::NetVips.VipsRegion.__Internal*) __Instance)->im))
                    __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[((global::NetVips.VipsRegion.__Internal*) __Instance)->im];
                else __result0 = global::NetVips.VipsImage.__CreateInstance(((global::NetVips.VipsRegion.__Internal*) __Instance)->im);
                return __result0;
            }

            set
            {
                ((global::NetVips.VipsRegion.__Internal*)__Instance)->im = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::NetVips.VipsRect Valid
        {
            get
            {
                return global::NetVips.VipsRect.__CreateInstance(new global::System.IntPtr(&((global::NetVips.VipsRegion.__Internal*) __Instance)->valid));
            }

            set
            {
                ((global::NetVips.VipsRegion.__Internal*)__Instance)->valid = ReferenceEquals(value, null) ? new global::NetVips.VipsRect.__Internal() : *(global::NetVips.VipsRect.__Internal*) value.__Instance;
            }
        }

        public byte* Data
        {
            get
            {
                return (byte*) ((global::NetVips.VipsRegion.__Internal*) __Instance)->data;
            }

            set
            {
                ((global::NetVips.VipsRegion.__Internal*)__Instance)->data = (global::System.IntPtr) value;
            }
        }

        public int Bpl
        {
            get
            {
                return ((global::NetVips.VipsRegion.__Internal*) __Instance)->bpl;
            }

            set
            {
                ((global::NetVips.VipsRegion.__Internal*)__Instance)->bpl = value;
            }
        }

        public global::System.IntPtr Seq
        {
            get
            {
                return ((global::NetVips.VipsRegion.__Internal*) __Instance)->seq;
            }

            set
            {
                ((global::NetVips.VipsRegion.__Internal*)__Instance)->seq = (global::System.IntPtr) value;
            }
        }

        public global::NetVips.VipsWindow Window
        {
            get
            {
                global::NetVips.VipsWindow __result0;
                if (((global::NetVips.VipsRegion.__Internal*) __Instance)->window == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsWindow.NativeToManagedMap.ContainsKey(((global::NetVips.VipsRegion.__Internal*) __Instance)->window))
                    __result0 = (global::NetVips.VipsWindow) global::NetVips.VipsWindow.NativeToManagedMap[((global::NetVips.VipsRegion.__Internal*) __Instance)->window];
                else __result0 = global::NetVips.VipsWindow.__CreateInstance(((global::NetVips.VipsRegion.__Internal*) __Instance)->window);
                return __result0;
            }

            set
            {
                ((global::NetVips.VipsRegion.__Internal*)__Instance)->window = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::NetVips.VipsBuffer Buffer
        {
            get
            {
                global::NetVips.VipsBuffer __result0;
                if (((global::NetVips.VipsRegion.__Internal*) __Instance)->buffer == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsBuffer.NativeToManagedMap.ContainsKey(((global::NetVips.VipsRegion.__Internal*) __Instance)->buffer))
                    __result0 = (global::NetVips.VipsBuffer) global::NetVips.VipsBuffer.NativeToManagedMap[((global::NetVips.VipsRegion.__Internal*) __Instance)->buffer];
                else __result0 = global::NetVips.VipsBuffer.__CreateInstance(((global::NetVips.VipsRegion.__Internal*) __Instance)->buffer);
                return __result0;
            }

            set
            {
                ((global::NetVips.VipsRegion.__Internal*)__Instance)->buffer = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public int Invalid
        {
            get
            {
                return ((global::NetVips.VipsRegion.__Internal*) __Instance)->invalid;
            }

            set
            {
                ((global::NetVips.VipsRegion.__Internal*)__Instance)->invalid = value;
            }
        }
    }

    public unsafe partial class VipsRegionClass : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 328)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.VipsObjectClass.__Internal parent_class;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_VipsRegionClass@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsRegionClass> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsRegionClass>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsRegionClass __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsRegionClass(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsRegionClass __CreateInstance(global::NetVips.VipsRegionClass.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsRegionClass(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsRegionClass.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsRegionClass.__Internal));
            *(global::NetVips.VipsRegionClass.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsRegionClass(global::NetVips.VipsRegionClass.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsRegionClass(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VipsRegionClass()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsRegionClass.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public VipsRegionClass(global::NetVips.VipsRegionClass _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsRegionClass.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NetVips.VipsRegionClass.__Internal*) __Instance) = *((global::NetVips.VipsRegionClass.__Internal*) _0.__Instance);
        }

        ~VipsRegionClass()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsRegionClass __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NetVips.VipsObjectClass ParentClass
        {
            get
            {
                return global::NetVips.VipsObjectClass.__CreateInstance(new global::System.IntPtr(&((global::NetVips.VipsRegionClass.__Internal*) __Instance)->parent_class));
            }

            set
            {
                ((global::NetVips.VipsRegionClass.__Internal*)__Instance)->parent_class = ReferenceEquals(value, null) ? new global::NetVips.VipsObjectClass.__Internal() : *(global::NetVips.VipsObjectClass.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class region
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_region_get_type")]
            internal static extern ulong VipsRegionGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_region_new")]
            internal static extern global::System.IntPtr VipsRegionNew(global::System.IntPtr image);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_region_buffer")]
            internal static extern int VipsRegionBuffer(global::System.IntPtr reg, global::System.IntPtr r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_region_image")]
            internal static extern int VipsRegionImage(global::System.IntPtr reg, global::System.IntPtr r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_region_region")]
            internal static extern int VipsRegionRegion(global::System.IntPtr reg, global::System.IntPtr dest, global::System.IntPtr r, int x, int y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_region_equalsregion")]
            internal static extern int VipsRegionEqualsregion(global::System.IntPtr reg1, global::System.IntPtr reg2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_region_position")]
            internal static extern int VipsRegionPosition(global::System.IntPtr reg, int x, int y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_region_paint")]
            internal static extern void VipsRegionPaint(global::System.IntPtr reg, global::System.IntPtr r, int value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_region_paint_pel")]
            internal static extern void VipsRegionPaintPel(global::System.IntPtr reg, global::System.IntPtr r, byte* ink);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_region_black")]
            internal static extern void VipsRegionBlack(global::System.IntPtr reg);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_region_copy")]
            internal static extern void VipsRegionCopy(global::System.IntPtr reg, global::System.IntPtr dest, global::System.IntPtr r, int x, int y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_region_shrink")]
            internal static extern int VipsRegionShrink(global::System.IntPtr from, global::System.IntPtr to, global::System.IntPtr target);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_region_prepare")]
            internal static extern int VipsRegionPrepare(global::System.IntPtr reg, global::System.IntPtr r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_region_prepare_to")]
            internal static extern int VipsRegionPrepareTo(global::System.IntPtr reg, global::System.IntPtr dest, global::System.IntPtr r, int x, int y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_region_invalidate")]
            internal static extern void VipsRegionInvalidate(global::System.IntPtr reg);
        }

        public static ulong VipsRegionGetType()
        {
            var __ret = __Internal.VipsRegionGetType();
            return __ret;
        }

        public static global::NetVips.VipsRegion VipsRegionNew(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsRegionNew(__arg0);
            global::NetVips.VipsRegion __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsRegion.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsRegion) global::NetVips.VipsRegion.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsRegion.__CreateInstance(__ret);
            return __result0;
        }

        public static int VipsRegionBuffer(global::NetVips.VipsRegion reg, global::NetVips.VipsRect r)
        {
            var __arg0 = ReferenceEquals(reg, null) ? global::System.IntPtr.Zero : reg.__Instance;
            var __arg1 = ReferenceEquals(r, null) ? global::System.IntPtr.Zero : r.__Instance;
            var __ret = __Internal.VipsRegionBuffer(__arg0, __arg1);
            return __ret;
        }

        public static int VipsRegionImage(global::NetVips.VipsRegion reg, global::NetVips.VipsRect r)
        {
            var __arg0 = ReferenceEquals(reg, null) ? global::System.IntPtr.Zero : reg.__Instance;
            var __arg1 = ReferenceEquals(r, null) ? global::System.IntPtr.Zero : r.__Instance;
            var __ret = __Internal.VipsRegionImage(__arg0, __arg1);
            return __ret;
        }

        public static int VipsRegionRegion(global::NetVips.VipsRegion reg, global::NetVips.VipsRegion dest, global::NetVips.VipsRect r, int x, int y)
        {
            var __arg0 = ReferenceEquals(reg, null) ? global::System.IntPtr.Zero : reg.__Instance;
            var __arg1 = ReferenceEquals(dest, null) ? global::System.IntPtr.Zero : dest.__Instance;
            var __arg2 = ReferenceEquals(r, null) ? global::System.IntPtr.Zero : r.__Instance;
            var __ret = __Internal.VipsRegionRegion(__arg0, __arg1, __arg2, x, y);
            return __ret;
        }

        public static int VipsRegionEqualsregion(global::NetVips.VipsRegion reg1, global::NetVips.VipsRegion reg2)
        {
            var __arg0 = ReferenceEquals(reg1, null) ? global::System.IntPtr.Zero : reg1.__Instance;
            var __arg1 = ReferenceEquals(reg2, null) ? global::System.IntPtr.Zero : reg2.__Instance;
            var __ret = __Internal.VipsRegionEqualsregion(__arg0, __arg1);
            return __ret;
        }

        public static int VipsRegionPosition(global::NetVips.VipsRegion reg, int x, int y)
        {
            var __arg0 = ReferenceEquals(reg, null) ? global::System.IntPtr.Zero : reg.__Instance;
            var __ret = __Internal.VipsRegionPosition(__arg0, x, y);
            return __ret;
        }

        public static void VipsRegionPaint(global::NetVips.VipsRegion reg, global::NetVips.VipsRect r, int value)
        {
            var __arg0 = ReferenceEquals(reg, null) ? global::System.IntPtr.Zero : reg.__Instance;
            var __arg1 = ReferenceEquals(r, null) ? global::System.IntPtr.Zero : r.__Instance;
            __Internal.VipsRegionPaint(__arg0, __arg1, value);
        }

        public static void VipsRegionPaintPel(global::NetVips.VipsRegion reg, global::NetVips.VipsRect r, byte* ink)
        {
            var __arg0 = ReferenceEquals(reg, null) ? global::System.IntPtr.Zero : reg.__Instance;
            var __arg1 = ReferenceEquals(r, null) ? global::System.IntPtr.Zero : r.__Instance;
            __Internal.VipsRegionPaintPel(__arg0, __arg1, ink);
        }

        public static void VipsRegionBlack(global::NetVips.VipsRegion reg)
        {
            var __arg0 = ReferenceEquals(reg, null) ? global::System.IntPtr.Zero : reg.__Instance;
            __Internal.VipsRegionBlack(__arg0);
        }

        public static void VipsRegionCopy(global::NetVips.VipsRegion reg, global::NetVips.VipsRegion dest, global::NetVips.VipsRect r, int x, int y)
        {
            var __arg0 = ReferenceEquals(reg, null) ? global::System.IntPtr.Zero : reg.__Instance;
            var __arg1 = ReferenceEquals(dest, null) ? global::System.IntPtr.Zero : dest.__Instance;
            var __arg2 = ReferenceEquals(r, null) ? global::System.IntPtr.Zero : r.__Instance;
            __Internal.VipsRegionCopy(__arg0, __arg1, __arg2, x, y);
        }

        public static int VipsRegionShrink(global::NetVips.VipsRegion from, global::NetVips.VipsRegion to, global::NetVips.VipsRect target)
        {
            var __arg0 = ReferenceEquals(from, null) ? global::System.IntPtr.Zero : from.__Instance;
            var __arg1 = ReferenceEquals(to, null) ? global::System.IntPtr.Zero : to.__Instance;
            var __arg2 = ReferenceEquals(target, null) ? global::System.IntPtr.Zero : target.__Instance;
            var __ret = __Internal.VipsRegionShrink(__arg0, __arg1, __arg2);
            return __ret;
        }

        public static int VipsRegionPrepare(global::NetVips.VipsRegion reg, global::NetVips.VipsRect r)
        {
            var __arg0 = ReferenceEquals(reg, null) ? global::System.IntPtr.Zero : reg.__Instance;
            var __arg1 = ReferenceEquals(r, null) ? global::System.IntPtr.Zero : r.__Instance;
            var __ret = __Internal.VipsRegionPrepare(__arg0, __arg1);
            return __ret;
        }

        public static int VipsRegionPrepareTo(global::NetVips.VipsRegion reg, global::NetVips.VipsRegion dest, global::NetVips.VipsRect r, int x, int y)
        {
            var __arg0 = ReferenceEquals(reg, null) ? global::System.IntPtr.Zero : reg.__Instance;
            var __arg1 = ReferenceEquals(dest, null) ? global::System.IntPtr.Zero : dest.__Instance;
            var __arg2 = ReferenceEquals(r, null) ? global::System.IntPtr.Zero : r.__Instance;
            var __ret = __Internal.VipsRegionPrepareTo(__arg0, __arg1, __arg2, x, y);
            return __ret;
        }

        public static void VipsRegionInvalidate(global::NetVips.VipsRegion reg)
        {
            var __arg0 = ReferenceEquals(reg, null) ? global::System.IntPtr.Zero : reg.__Instance;
            __Internal.VipsRegionInvalidate(__arg0);
        }
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int VipsRegionWrite(global::System.IntPtr region, global::System.IntPtr area, global::System.IntPtr a);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void VipsSinkNotify(global::System.IntPtr im, global::System.IntPtr rect, global::System.IntPtr a);

    public unsafe partial class generate
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_sink_disc")]
            internal static extern int VipsSinkDisc(global::System.IntPtr im, global::System.IntPtr write_fn, global::System.IntPtr a);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_sink")]
            internal static extern int VipsSink(global::System.IntPtr im, global::System.IntPtr start_fn, global::System.IntPtr generate_fn, global::System.IntPtr stop_fn, global::System.IntPtr a, global::System.IntPtr b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_sink_tile")]
            internal static extern int VipsSinkTile(global::System.IntPtr im, int tile_width, int tile_height, global::System.IntPtr start_fn, global::System.IntPtr generate_fn, global::System.IntPtr stop_fn, global::System.IntPtr a, global::System.IntPtr b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_sink_screen")]
            internal static extern int VipsSinkScreen(global::System.IntPtr @in, global::System.IntPtr @out, global::System.IntPtr mask, int tile_width, int tile_height, int max_tiles, int priority, global::System.IntPtr notify_fn, global::System.IntPtr a);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_sink_memory")]
            internal static extern int VipsSinkMemory(global::System.IntPtr im);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_start_one")]
            internal static extern global::System.IntPtr VipsStartOne(global::System.IntPtr @out, global::System.IntPtr a, global::System.IntPtr b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_stop_one")]
            internal static extern int VipsStopOne(global::System.IntPtr seq, global::System.IntPtr a, global::System.IntPtr b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_start_many")]
            internal static extern global::System.IntPtr VipsStartMany(global::System.IntPtr @out, global::System.IntPtr a, global::System.IntPtr b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_stop_many")]
            internal static extern int VipsStopMany(global::System.IntPtr seq, global::System.IntPtr a, global::System.IntPtr b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_allocate_input_array")]
            internal static extern global::System.IntPtr VipsAllocateInputArray(global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_generate")]
            internal static extern int VipsImageGenerate(global::System.IntPtr image, global::System.IntPtr start_fn, global::System.IntPtr generate_fn, global::System.IntPtr stop_fn, global::System.IntPtr a, global::System.IntPtr b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_pipeline_array")]
            internal static extern int VipsImagePipelineArray(global::System.IntPtr image, global::NetVips.VipsDemandStyle hint, global::System.IntPtr @in);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_pipelinev")]
            internal static extern int VipsImagePipelinev(global::System.IntPtr image, global::NetVips.VipsDemandStyle hint, string[] options);
        }

        public static int VipsSinkDisc(global::NetVips.VipsImage im, global::NetVips.VipsRegionWrite write_fn, global::System.IntPtr a)
        {
            var __arg0 = ReferenceEquals(im, null) ? global::System.IntPtr.Zero : im.__Instance;
            var __arg1 = write_fn == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(write_fn);
            var __ret = __Internal.VipsSinkDisc(__arg0, __arg1, a);
            return __ret;
        }

        public static int VipsSink(global::NetVips.VipsImage im, global::NetVips.VipsStartFn start_fn, global::NetVips.VipsGenerateFn generate_fn, global::NetVips.VipsStopFn stop_fn, global::System.IntPtr a, global::System.IntPtr b)
        {
            var __arg0 = ReferenceEquals(im, null) ? global::System.IntPtr.Zero : im.__Instance;
            var __arg1 = start_fn == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(start_fn);
            var __arg2 = generate_fn == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(generate_fn);
            var __arg3 = stop_fn == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(stop_fn);
            var __ret = __Internal.VipsSink(__arg0, __arg1, __arg2, __arg3, a, b);
            return __ret;
        }

        public static int VipsSinkTile(global::NetVips.VipsImage im, int tile_width, int tile_height, global::NetVips.VipsStartFn start_fn, global::NetVips.VipsGenerateFn generate_fn, global::NetVips.VipsStopFn stop_fn, global::System.IntPtr a, global::System.IntPtr b)
        {
            var __arg0 = ReferenceEquals(im, null) ? global::System.IntPtr.Zero : im.__Instance;
            var __arg3 = start_fn == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(start_fn);
            var __arg4 = generate_fn == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(generate_fn);
            var __arg5 = stop_fn == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(stop_fn);
            var __ret = __Internal.VipsSinkTile(__arg0, tile_width, tile_height, __arg3, __arg4, __arg5, a, b);
            return __ret;
        }

        public static int VipsSinkScreen(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, global::NetVips.VipsImage mask, int tile_width, int tile_height, int max_tiles, int priority, global::NetVips.VipsSinkNotify notify_fn, global::System.IntPtr a)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __arg2 = ReferenceEquals(mask, null) ? global::System.IntPtr.Zero : mask.__Instance;
            var __arg7 = notify_fn == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(notify_fn);
            var __ret = __Internal.VipsSinkScreen(__arg0, __arg1, __arg2, tile_width, tile_height, max_tiles, priority, __arg7, a);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsSinkMemory(global::NetVips.VipsImage im)
        {
            var __arg0 = ReferenceEquals(im, null) ? global::System.IntPtr.Zero : im.__Instance;
            var __ret = __Internal.VipsSinkMemory(__arg0);
            return __ret;
        }

        public static global::System.IntPtr VipsStartOne(out global::NetVips.VipsImage @out, global::System.IntPtr a, global::System.IntPtr b)
        {
            @out = new global::NetVips.VipsImage();
            var __arg0 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsStartOne(__arg0, a, b);
            global::NetVips.VipsImage __result0;
            if (__arg0 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg0))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg0];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg0);
            @out = __result0;
            return __ret;
        }

        public static int VipsStopOne(global::System.IntPtr seq, global::System.IntPtr a, global::System.IntPtr b)
        {
            var __ret = __Internal.VipsStopOne(seq, a, b);
            return __ret;
        }

        public static global::System.IntPtr VipsStartMany(out global::NetVips.VipsImage @out, global::System.IntPtr a, global::System.IntPtr b)
        {
            @out = new global::NetVips.VipsImage();
            var __arg0 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsStartMany(__arg0, a, b);
            global::NetVips.VipsImage __result0;
            if (__arg0 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg0))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg0];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg0);
            @out = __result0;
            return __ret;
        }

        public static int VipsStopMany(global::System.IntPtr seq, global::System.IntPtr a, global::System.IntPtr b)
        {
            var __ret = __Internal.VipsStopMany(seq, a, b);
            return __ret;
        }

        public static global::NetVips.VipsImage VipsAllocateInputArray(global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsAllocateInputArray(__arg0, options);
            global::NetVips.VipsImage __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__ret);
            return __result0;
        }

        public static int VipsImageGenerate(global::NetVips.VipsImage image, global::NetVips.VipsStartFn start_fn, global::NetVips.VipsGenerateFn generate_fn, global::NetVips.VipsStopFn stop_fn, global::System.IntPtr a, global::System.IntPtr b)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __arg1 = start_fn == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(start_fn);
            var __arg2 = generate_fn == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(generate_fn);
            var __arg3 = stop_fn == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(stop_fn);
            var __ret = __Internal.VipsImageGenerate(__arg0, __arg1, __arg2, __arg3, a, b);
            return __ret;
        }

        public static int VipsImagePipelineArray(global::NetVips.VipsImage image, global::NetVips.VipsDemandStyle hint, global::NetVips.VipsImage @in)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __arg2 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            var __ret = __Internal.VipsImagePipelineArray(__arg0, hint, __arg2);
            return __ret;
        }

        public static int VipsImagePipelinev(global::NetVips.VipsImage image, global::NetVips.VipsDemandStyle hint, string[] options = null)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImagePipelinev(__arg0, hint, options);
            return __ret;
        }
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void VipsInterpolateMethod(global::System.IntPtr interpolate, global::System.IntPtr @out, global::System.IntPtr @in, double x, double y);

    public unsafe partial class VipsInterpolate : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.VipsObject.__Internal parent_object;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_VipsInterpolate@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsInterpolate> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsInterpolate>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsInterpolate __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsInterpolate(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsInterpolate __CreateInstance(global::NetVips.VipsInterpolate.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsInterpolate(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsInterpolate.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsInterpolate.__Internal));
            *(global::NetVips.VipsInterpolate.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsInterpolate(global::NetVips.VipsInterpolate.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsInterpolate(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VipsInterpolate()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsInterpolate.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public VipsInterpolate(global::NetVips.VipsInterpolate _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsInterpolate.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NetVips.VipsInterpolate.__Internal*) __Instance) = *((global::NetVips.VipsInterpolate.__Internal*) _0.__Instance);
        }

        ~VipsInterpolate()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsInterpolate __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NetVips.VipsObject ParentObject
        {
            get
            {
                return global::NetVips.VipsObject.__CreateInstance(new global::System.IntPtr(&((global::NetVips.VipsInterpolate.__Internal*) __Instance)->parent_object));
            }

            set
            {
                ((global::NetVips.VipsInterpolate.__Internal*)__Instance)->parent_object = ReferenceEquals(value, null) ? new global::NetVips.VipsObject.__Internal() : *(global::NetVips.VipsObject.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class VipsInterpolateClass : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 368)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.VipsObjectClass.__Internal parent_class;

            [FieldOffset(328)]
            internal global::System.IntPtr interpolate;

            [FieldOffset(336)]
            internal global::System.IntPtr get_window_size;

            [FieldOffset(344)]
            internal int window_size;

            [FieldOffset(352)]
            internal global::System.IntPtr get_window_offset;

            [FieldOffset(360)]
            internal int window_offset;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_VipsInterpolateClass@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsInterpolateClass> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsInterpolateClass>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsInterpolateClass __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsInterpolateClass(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsInterpolateClass __CreateInstance(global::NetVips.VipsInterpolateClass.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsInterpolateClass(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsInterpolateClass.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsInterpolateClass.__Internal));
            *(global::NetVips.VipsInterpolateClass.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsInterpolateClass(global::NetVips.VipsInterpolateClass.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsInterpolateClass(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VipsInterpolateClass()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsInterpolateClass.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public VipsInterpolateClass(global::NetVips.VipsInterpolateClass _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsInterpolateClass.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NetVips.VipsInterpolateClass.__Internal*) __Instance) = *((global::NetVips.VipsInterpolateClass.__Internal*) _0.__Instance);
        }

        ~VipsInterpolateClass()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsInterpolateClass __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NetVips.VipsObjectClass ParentClass
        {
            get
            {
                return global::NetVips.VipsObjectClass.__CreateInstance(new global::System.IntPtr(&((global::NetVips.VipsInterpolateClass.__Internal*) __Instance)->parent_class));
            }

            set
            {
                ((global::NetVips.VipsInterpolateClass.__Internal*)__Instance)->parent_class = ReferenceEquals(value, null) ? new global::NetVips.VipsObjectClass.__Internal() : *(global::NetVips.VipsObjectClass.__Internal*) value.__Instance;
            }
        }

        public global::NetVips.VipsInterpolateMethod Interpolate
        {
            get
            {
                var __ptr0 = ((global::NetVips.VipsInterpolateClass.__Internal*) __Instance)->interpolate;
                return __ptr0 == IntPtr.Zero? null : (global::NetVips.VipsInterpolateMethod) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::NetVips.VipsInterpolateMethod));
            }

            set
            {
                ((global::NetVips.VipsInterpolateClass.__Internal*)__Instance)->interpolate = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public int WindowSize
        {
            get
            {
                return ((global::NetVips.VipsInterpolateClass.__Internal*) __Instance)->window_size;
            }

            set
            {
                ((global::NetVips.VipsInterpolateClass.__Internal*)__Instance)->window_size = value;
            }
        }

        public int WindowOffset
        {
            get
            {
                return ((global::NetVips.VipsInterpolateClass.__Internal*) __Instance)->window_offset;
            }

            set
            {
                ((global::NetVips.VipsInterpolateClass.__Internal*)__Instance)->window_offset = value;
            }
        }
    }

    public unsafe partial class interpolate
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_interpolate_get_type")]
            internal static extern ulong VipsInterpolateGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_interpolate")]
            internal static extern void vips_interpolate(global::System.IntPtr interpolate, global::System.IntPtr @out, global::System.IntPtr @in, double x, double y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_interpolate_get_method")]
            internal static extern global::System.IntPtr VipsInterpolateGetMethod(global::System.IntPtr interpolate);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_interpolate_get_window_size")]
            internal static extern int VipsInterpolateGetWindowSize(global::System.IntPtr interpolate);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_interpolate_get_window_offset")]
            internal static extern int VipsInterpolateGetWindowOffset(global::System.IntPtr interpolate);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_interpolate_nearest_static")]
            internal static extern global::System.IntPtr VipsInterpolateNearestStatic();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_interpolate_bilinear_static")]
            internal static extern global::System.IntPtr VipsInterpolateBilinearStatic();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_interpolate_new")]
            internal static extern global::System.IntPtr VipsInterpolateNew([MarshalAs(UnmanagedType.LPStr)] string nickname);
        }

        public static ulong VipsInterpolateGetType()
        {
            var __ret = __Internal.VipsInterpolateGetType();
            return __ret;
        }

        public static void vips_interpolate(global::NetVips.VipsInterpolate interpolate, global::System.IntPtr @out, global::NetVips.VipsRegion @in, double x, double y)
        {
            var __arg0 = ReferenceEquals(interpolate, null) ? global::System.IntPtr.Zero : interpolate.__Instance;
            var __arg2 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            __Internal.vips_interpolate(__arg0, @out, __arg2, x, y);
        }

        public static global::NetVips.VipsInterpolateMethod VipsInterpolateGetMethod(global::NetVips.VipsInterpolate interpolate)
        {
            var __arg0 = ReferenceEquals(interpolate, null) ? global::System.IntPtr.Zero : interpolate.__Instance;
            var __ret = __Internal.VipsInterpolateGetMethod(__arg0);
            var __ptr0 = __ret;
            return __ptr0 == IntPtr.Zero? null : (global::NetVips.VipsInterpolateMethod) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::NetVips.VipsInterpolateMethod));
        }

        public static int VipsInterpolateGetWindowSize(global::NetVips.VipsInterpolate interpolate)
        {
            var __arg0 = ReferenceEquals(interpolate, null) ? global::System.IntPtr.Zero : interpolate.__Instance;
            var __ret = __Internal.VipsInterpolateGetWindowSize(__arg0);
            return __ret;
        }

        public static int VipsInterpolateGetWindowOffset(global::NetVips.VipsInterpolate interpolate)
        {
            var __arg0 = ReferenceEquals(interpolate, null) ? global::System.IntPtr.Zero : interpolate.__Instance;
            var __ret = __Internal.VipsInterpolateGetWindowOffset(__arg0);
            return __ret;
        }

        public static global::NetVips.VipsInterpolate VipsInterpolateNearestStatic()
        {
            var __ret = __Internal.VipsInterpolateNearestStatic();
            global::NetVips.VipsInterpolate __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsInterpolate.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsInterpolate) global::NetVips.VipsInterpolate.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsInterpolate.__CreateInstance(__ret);
            return __result0;
        }

        public static global::NetVips.VipsInterpolate VipsInterpolateBilinearStatic()
        {
            var __ret = __Internal.VipsInterpolateBilinearStatic();
            global::NetVips.VipsInterpolate __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsInterpolate.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsInterpolate) global::NetVips.VipsInterpolate.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsInterpolate.__CreateInstance(__ret);
            return __result0;
        }

        public static global::NetVips.VipsInterpolate VipsInterpolateNew(string nickname)
        {
            var __ret = __Internal.VipsInterpolateNew(nickname);
            global::NetVips.VipsInterpolate __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsInterpolate.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsInterpolate) global::NetVips.VipsInterpolate.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsInterpolate.__CreateInstance(__ret);
            return __result0;
        }
    }

    public unsafe partial class VipsSemaphore : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 32)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr name;

            [FieldOffset(8)]
            internal int v;

            [FieldOffset(16)]
            internal global::System.IntPtr mutex;

            [FieldOffset(24)]
            internal global::System.IntPtr cond;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0VipsSemaphore@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsSemaphore> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsSemaphore>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsSemaphore __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsSemaphore(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsSemaphore __CreateInstance(global::NetVips.VipsSemaphore.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsSemaphore(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsSemaphore.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsSemaphore.__Internal));
            *(global::NetVips.VipsSemaphore.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsSemaphore(global::NetVips.VipsSemaphore.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsSemaphore(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VipsSemaphore()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsSemaphore.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public VipsSemaphore(global::NetVips.VipsSemaphore _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsSemaphore.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NetVips.VipsSemaphore.__Internal*) __Instance) = *((global::NetVips.VipsSemaphore.__Internal*) _0.__Instance);
        }

        ~VipsSemaphore()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsSemaphore __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public sbyte* Name
        {
            get
            {
                return (sbyte*) ((global::NetVips.VipsSemaphore.__Internal*) __Instance)->name;
            }

            set
            {
                ((global::NetVips.VipsSemaphore.__Internal*)__Instance)->name = (global::System.IntPtr) value;
            }
        }

        public int V
        {
            get
            {
                return ((global::NetVips.VipsSemaphore.__Internal*) __Instance)->v;
            }

            set
            {
                ((global::NetVips.VipsSemaphore.__Internal*)__Instance)->v = value;
            }
        }
    }

    public unsafe partial class semaphore
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_semaphore_up")]
            internal static extern int VipsSemaphoreUp(global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_semaphore_down")]
            internal static extern int VipsSemaphoreDown(global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_semaphore_upn")]
            internal static extern int VipsSemaphoreUpn(global::System.IntPtr s, int n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_semaphore_downn")]
            internal static extern int VipsSemaphoreDownn(global::System.IntPtr s, int n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_semaphore_destroy")]
            internal static extern void VipsSemaphoreDestroy(global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_semaphore_init")]
            internal static extern void VipsSemaphoreInit(global::System.IntPtr s, int v, sbyte* name);
        }

        public static int VipsSemaphoreUp(global::NetVips.VipsSemaphore s)
        {
            var __arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
            var __ret = __Internal.VipsSemaphoreUp(__arg0);
            return __ret;
        }

        public static int VipsSemaphoreDown(global::NetVips.VipsSemaphore s)
        {
            var __arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
            var __ret = __Internal.VipsSemaphoreDown(__arg0);
            return __ret;
        }

        public static int VipsSemaphoreUpn(global::NetVips.VipsSemaphore s, int n)
        {
            var __arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
            var __ret = __Internal.VipsSemaphoreUpn(__arg0, n);
            return __ret;
        }

        public static int VipsSemaphoreDownn(global::NetVips.VipsSemaphore s, int n)
        {
            var __arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
            var __ret = __Internal.VipsSemaphoreDownn(__arg0, n);
            return __ret;
        }

        public static void VipsSemaphoreDestroy(global::NetVips.VipsSemaphore s)
        {
            var __arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
            __Internal.VipsSemaphoreDestroy(__arg0);
        }

        public static void VipsSemaphoreInit(global::NetVips.VipsSemaphore s, int v, sbyte* name)
        {
            var __arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
            __Internal.VipsSemaphoreInit(__arg0, v, name);
        }
    }

    public unsafe partial class thread
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_thread_isworker")]
            internal static extern int VipsThreadIsworker();
        }

        public static int VipsThreadIsworker()
        {
            var __ret = __Internal.VipsThreadIsworker();
            return __ret;
        }
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr VipsThreadStartFn(global::System.IntPtr im, global::System.IntPtr a);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int VipsThreadpoolAllocateFn(global::System.IntPtr state, global::System.IntPtr a, int* stop);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int VipsThreadpoolWorkFn(global::System.IntPtr state, global::System.IntPtr a);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int VipsThreadpoolProgressFn(global::System.IntPtr a);

    public unsafe partial class VipsThreadState : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 144)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.VipsObject.__Internal parent_object;

            [FieldOffset(80)]
            internal global::System.IntPtr im;

            [FieldOffset(88)]
            internal global::System.IntPtr reg;

            [FieldOffset(96)]
            internal global::NetVips.VipsRect.__Internal pos;

            [FieldOffset(112)]
            internal int x;

            [FieldOffset(116)]
            internal int y;

            [FieldOffset(120)]
            internal int stop;

            [FieldOffset(128)]
            internal global::System.IntPtr a;

            [FieldOffset(136)]
            internal int stall;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_VipsThreadState@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsThreadState> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsThreadState>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsThreadState __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsThreadState(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsThreadState __CreateInstance(global::NetVips.VipsThreadState.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsThreadState(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsThreadState.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsThreadState.__Internal));
            *(global::NetVips.VipsThreadState.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsThreadState(global::NetVips.VipsThreadState.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsThreadState(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VipsThreadState()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsThreadState.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public VipsThreadState(global::NetVips.VipsThreadState _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsThreadState.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NetVips.VipsThreadState.__Internal*) __Instance) = *((global::NetVips.VipsThreadState.__Internal*) _0.__Instance);
        }

        ~VipsThreadState()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsThreadState __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NetVips.VipsObject ParentObject
        {
            get
            {
                return global::NetVips.VipsObject.__CreateInstance(new global::System.IntPtr(&((global::NetVips.VipsThreadState.__Internal*) __Instance)->parent_object));
            }

            set
            {
                ((global::NetVips.VipsThreadState.__Internal*)__Instance)->parent_object = ReferenceEquals(value, null) ? new global::NetVips.VipsObject.__Internal() : *(global::NetVips.VipsObject.__Internal*) value.__Instance;
            }
        }

        public global::NetVips.VipsImage Im
        {
            get
            {
                global::NetVips.VipsImage __result0;
                if (((global::NetVips.VipsThreadState.__Internal*) __Instance)->im == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(((global::NetVips.VipsThreadState.__Internal*) __Instance)->im))
                    __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[((global::NetVips.VipsThreadState.__Internal*) __Instance)->im];
                else __result0 = global::NetVips.VipsImage.__CreateInstance(((global::NetVips.VipsThreadState.__Internal*) __Instance)->im);
                return __result0;
            }

            set
            {
                ((global::NetVips.VipsThreadState.__Internal*)__Instance)->im = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::NetVips.VipsRegion Reg
        {
            get
            {
                global::NetVips.VipsRegion __result0;
                if (((global::NetVips.VipsThreadState.__Internal*) __Instance)->reg == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsRegion.NativeToManagedMap.ContainsKey(((global::NetVips.VipsThreadState.__Internal*) __Instance)->reg))
                    __result0 = (global::NetVips.VipsRegion) global::NetVips.VipsRegion.NativeToManagedMap[((global::NetVips.VipsThreadState.__Internal*) __Instance)->reg];
                else __result0 = global::NetVips.VipsRegion.__CreateInstance(((global::NetVips.VipsThreadState.__Internal*) __Instance)->reg);
                return __result0;
            }

            set
            {
                ((global::NetVips.VipsThreadState.__Internal*)__Instance)->reg = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::NetVips.VipsRect Pos
        {
            get
            {
                return global::NetVips.VipsRect.__CreateInstance(new global::System.IntPtr(&((global::NetVips.VipsThreadState.__Internal*) __Instance)->pos));
            }

            set
            {
                ((global::NetVips.VipsThreadState.__Internal*)__Instance)->pos = ReferenceEquals(value, null) ? new global::NetVips.VipsRect.__Internal() : *(global::NetVips.VipsRect.__Internal*) value.__Instance;
            }
        }

        public int X
        {
            get
            {
                return ((global::NetVips.VipsThreadState.__Internal*) __Instance)->x;
            }

            set
            {
                ((global::NetVips.VipsThreadState.__Internal*)__Instance)->x = value;
            }
        }

        public int Y
        {
            get
            {
                return ((global::NetVips.VipsThreadState.__Internal*) __Instance)->y;
            }

            set
            {
                ((global::NetVips.VipsThreadState.__Internal*)__Instance)->y = value;
            }
        }

        public int Stop
        {
            get
            {
                return ((global::NetVips.VipsThreadState.__Internal*) __Instance)->stop;
            }

            set
            {
                ((global::NetVips.VipsThreadState.__Internal*)__Instance)->stop = value;
            }
        }

        public global::System.IntPtr A
        {
            get
            {
                return ((global::NetVips.VipsThreadState.__Internal*) __Instance)->a;
            }

            set
            {
                ((global::NetVips.VipsThreadState.__Internal*)__Instance)->a = (global::System.IntPtr) value;
            }
        }

        public int Stall
        {
            get
            {
                return ((global::NetVips.VipsThreadState.__Internal*) __Instance)->stall;
            }

            set
            {
                ((global::NetVips.VipsThreadState.__Internal*)__Instance)->stall = value;
            }
        }
    }

    public unsafe partial class VipsThreadStateClass : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 328)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.VipsObjectClass.__Internal parent_class;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_VipsThreadStateClass@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsThreadStateClass> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsThreadStateClass>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsThreadStateClass __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsThreadStateClass(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsThreadStateClass __CreateInstance(global::NetVips.VipsThreadStateClass.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsThreadStateClass(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsThreadStateClass.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsThreadStateClass.__Internal));
            *(global::NetVips.VipsThreadStateClass.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsThreadStateClass(global::NetVips.VipsThreadStateClass.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsThreadStateClass(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VipsThreadStateClass()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsThreadStateClass.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public VipsThreadStateClass(global::NetVips.VipsThreadStateClass _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsThreadStateClass.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NetVips.VipsThreadStateClass.__Internal*) __Instance) = *((global::NetVips.VipsThreadStateClass.__Internal*) _0.__Instance);
        }

        ~VipsThreadStateClass()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsThreadStateClass __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NetVips.VipsObjectClass ParentClass
        {
            get
            {
                return global::NetVips.VipsObjectClass.__CreateInstance(new global::System.IntPtr(&((global::NetVips.VipsThreadStateClass.__Internal*) __Instance)->parent_class));
            }

            set
            {
                ((global::NetVips.VipsThreadStateClass.__Internal*)__Instance)->parent_class = ReferenceEquals(value, null) ? new global::NetVips.VipsObjectClass.__Internal() : *(global::NetVips.VipsObjectClass.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class threadpool
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_thread_state_set")]
            internal static extern global::System.IntPtr VipsThreadStateSet(global::System.IntPtr @object, global::System.IntPtr a, global::System.IntPtr b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_thread_state_get_type")]
            internal static extern ulong VipsThreadStateGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_thread_state_new")]
            internal static extern global::System.IntPtr VipsThreadStateNew(global::System.IntPtr im, global::System.IntPtr a);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_threadpool_run")]
            internal static extern int VipsThreadpoolRun(global::System.IntPtr im, global::System.IntPtr start, global::System.IntPtr allocate, global::System.IntPtr work, global::System.IntPtr progress, global::System.IntPtr a);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_get_tile_size")]
            internal static extern void VipsGetTileSize(global::System.IntPtr im, int* tile_width, int* tile_height, int* n_lines);
        }

        public static global::System.IntPtr VipsThreadStateSet(global::NetVips.VipsObject @object, global::System.IntPtr a, global::System.IntPtr b)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = __Internal.VipsThreadStateSet(__arg0, a, b);
            return __ret;
        }

        public static ulong VipsThreadStateGetType()
        {
            var __ret = __Internal.VipsThreadStateGetType();
            return __ret;
        }

        public static global::NetVips.VipsThreadState VipsThreadStateNew(global::NetVips.VipsImage im, global::System.IntPtr a)
        {
            var __arg0 = ReferenceEquals(im, null) ? global::System.IntPtr.Zero : im.__Instance;
            var __ret = __Internal.VipsThreadStateNew(__arg0, a);
            global::NetVips.VipsThreadState __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsThreadState.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsThreadState) global::NetVips.VipsThreadState.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsThreadState.__CreateInstance(__ret);
            return __result0;
        }

        public static int VipsThreadpoolRun(global::NetVips.VipsImage im, global::NetVips.VipsThreadStartFn start, global::NetVips.VipsThreadpoolAllocateFn allocate, global::NetVips.VipsThreadpoolWorkFn work, global::NetVips.VipsThreadpoolProgressFn progress, global::System.IntPtr a)
        {
            var __arg0 = ReferenceEquals(im, null) ? global::System.IntPtr.Zero : im.__Instance;
            var __arg1 = start == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(start);
            var __arg2 = allocate == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(allocate);
            var __arg3 = work == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(work);
            var __arg4 = progress == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(progress);
            var __ret = __Internal.VipsThreadpoolRun(__arg0, __arg1, __arg2, __arg3, __arg4, a);
            return __ret;
        }

        public static void VipsGetTileSize(global::NetVips.VipsImage im, ref int tile_width, ref int tile_height, ref int n_lines)
        {
            var __arg0 = ReferenceEquals(im, null) ? global::System.IntPtr.Zero : im.__Instance;
            fixed (int* __refParamPtr1 = &tile_width)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &tile_height)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &n_lines)
                    {
                        var __arg3 = __refParamPtr3;
                        __Internal.VipsGetTileSize(__arg0, __arg1, __arg2, __arg3);
                    }
                }
            }
        }
    }

    public unsafe partial class header
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_format_sizeof")]
            internal static extern ulong VipsFormatSizeof(global::NetVips.VipsBandFormat format);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_format_sizeof_unsafe")]
            internal static extern ulong VipsFormatSizeofUnsafe(global::NetVips.VipsBandFormat format);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_get_width")]
            internal static extern int VipsImageGetWidth(global::System.IntPtr image);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_get_height")]
            internal static extern int VipsImageGetHeight(global::System.IntPtr image);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_get_bands")]
            internal static extern int VipsImageGetBands(global::System.IntPtr image);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_get_format")]
            internal static extern global::NetVips.VipsBandFormat VipsImageGetFormat(global::System.IntPtr image);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_guess_format")]
            internal static extern global::NetVips.VipsBandFormat VipsImageGuessFormat(global::System.IntPtr image);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_get_coding")]
            internal static extern global::NetVips.VipsCoding VipsImageGetCoding(global::System.IntPtr image);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_get_interpretation")]
            internal static extern global::NetVips.VipsInterpretation VipsImageGetInterpretation(global::System.IntPtr image);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_guess_interpretation")]
            internal static extern global::NetVips.VipsInterpretation VipsImageGuessInterpretation(global::System.IntPtr image);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_get_xres")]
            internal static extern double VipsImageGetXres(global::System.IntPtr image);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_get_yres")]
            internal static extern double VipsImageGetYres(global::System.IntPtr image);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_get_xoffset")]
            internal static extern int VipsImageGetXoffset(global::System.IntPtr image);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_get_yoffset")]
            internal static extern int VipsImageGetYoffset(global::System.IntPtr image);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_get_filename")]
            internal static extern global::System.IntPtr VipsImageGetFilename(global::System.IntPtr image);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_get_mode")]
            internal static extern global::System.IntPtr VipsImageGetMode(global::System.IntPtr image);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_get_scale")]
            internal static extern double VipsImageGetScale(global::System.IntPtr image);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_get_offset")]
            internal static extern double VipsImageGetOffset(global::System.IntPtr image);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_get_data")]
            internal static extern global::System.IntPtr VipsImageGetData(global::System.IntPtr image);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_init_fields")]
            internal static extern void VipsImageInitFields(global::System.IntPtr image, int xsize, int ysize, int bands, global::NetVips.VipsBandFormat format, global::NetVips.VipsCoding coding, global::NetVips.VipsInterpretation interpretation, double xres, double yres);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_get_as_string")]
            internal static extern int VipsImageGetAsString(global::System.IntPtr image, [MarshalAs(UnmanagedType.LPStr)] string name, sbyte** @out);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_get_typeof")]
            internal static extern ulong VipsImageGetTypeof(global::System.IntPtr image, [MarshalAs(UnmanagedType.LPStr)] string name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_remove")]
            internal static extern int VipsImageRemove(global::System.IntPtr image, [MarshalAs(UnmanagedType.LPStr)] string name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_get_fields")]
            internal static extern sbyte** VipsImageGetFields(global::System.IntPtr image);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_set_area")]
            internal static extern void VipsImageSetArea(global::System.IntPtr image, [MarshalAs(UnmanagedType.LPStr)] string name, global::System.IntPtr free_fn, global::System.IntPtr data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_get_area")]
            internal static extern int VipsImageGetArea(global::System.IntPtr image, [MarshalAs(UnmanagedType.LPStr)] string name, void** data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_set_blob")]
            internal static extern void VipsImageSetBlob(global::System.IntPtr image, [MarshalAs(UnmanagedType.LPStr)] string name, global::System.IntPtr free_fn, global::System.IntPtr data, ulong length);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_get_blob")]
            internal static extern int VipsImageGetBlob(global::System.IntPtr image, [MarshalAs(UnmanagedType.LPStr)] string name, void** data, ulong* length);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_get_int")]
            internal static extern int VipsImageGetInt(global::System.IntPtr image, [MarshalAs(UnmanagedType.LPStr)] string name, int* @out);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_set_int")]
            internal static extern void VipsImageSetInt(global::System.IntPtr image, [MarshalAs(UnmanagedType.LPStr)] string name, int i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_get_double")]
            internal static extern int VipsImageGetDouble(global::System.IntPtr image, [MarshalAs(UnmanagedType.LPStr)] string name, double* @out);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_set_double")]
            internal static extern void VipsImageSetDouble(global::System.IntPtr image, [MarshalAs(UnmanagedType.LPStr)] string name, double d);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_get_string")]
            internal static extern int VipsImageGetString(global::System.IntPtr image, [MarshalAs(UnmanagedType.LPStr)] string name, sbyte** @out);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_set_string")]
            internal static extern void VipsImageSetString(global::System.IntPtr image, [MarshalAs(UnmanagedType.LPStr)] string name, [MarshalAs(UnmanagedType.LPStr)] string str);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_print_field")]
            internal static extern void VipsImagePrintField(global::System.IntPtr image, [MarshalAs(UnmanagedType.LPStr)] string field);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_get_image")]
            internal static extern int VipsImageGetImage(global::System.IntPtr image, [MarshalAs(UnmanagedType.LPStr)] string name, global::System.IntPtr @out);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_set_image")]
            internal static extern void VipsImageSetImage(global::System.IntPtr image, [MarshalAs(UnmanagedType.LPStr)] string name, global::System.IntPtr im);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_history_printf")]
            internal static extern int VipsImageHistoryPrintf(global::System.IntPtr image, [MarshalAs(UnmanagedType.LPStr)] string format, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_history_args")]
            internal static extern int VipsImageHistoryArgs(global::System.IntPtr image, [MarshalAs(UnmanagedType.LPStr)] string name, int argc, [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPStr)] string[] argv);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_get_history")]
            internal static extern global::System.IntPtr VipsImageGetHistory(global::System.IntPtr image);
        }

        public static ulong VipsFormatSizeof(global::NetVips.VipsBandFormat format)
        {
            var __ret = __Internal.VipsFormatSizeof(format);
            return __ret;
        }

        public static ulong VipsFormatSizeofUnsafe(global::NetVips.VipsBandFormat format)
        {
            var __ret = __Internal.VipsFormatSizeofUnsafe(format);
            return __ret;
        }

        public static int VipsImageGetWidth(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageGetWidth(__arg0);
            return __ret;
        }

        public static int VipsImageGetHeight(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageGetHeight(__arg0);
            return __ret;
        }

        public static int VipsImageGetBands(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageGetBands(__arg0);
            return __ret;
        }

        public static global::NetVips.VipsBandFormat VipsImageGetFormat(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageGetFormat(__arg0);
            return __ret;
        }

        public static global::NetVips.VipsBandFormat VipsImageGuessFormat(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageGuessFormat(__arg0);
            return __ret;
        }

        public static global::NetVips.VipsCoding VipsImageGetCoding(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageGetCoding(__arg0);
            return __ret;
        }

        public static global::NetVips.VipsInterpretation VipsImageGetInterpretation(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageGetInterpretation(__arg0);
            return __ret;
        }

        public static global::NetVips.VipsInterpretation VipsImageGuessInterpretation(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageGuessInterpretation(__arg0);
            return __ret;
        }

        public static double VipsImageGetXres(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageGetXres(__arg0);
            return __ret;
        }

        public static double VipsImageGetYres(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageGetYres(__arg0);
            return __ret;
        }

        public static int VipsImageGetXoffset(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageGetXoffset(__arg0);
            return __ret;
        }

        public static int VipsImageGetYoffset(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageGetYoffset(__arg0);
            return __ret;
        }

        public static string VipsImageGetFilename(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageGetFilename(__arg0);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static string VipsImageGetMode(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageGetMode(__arg0);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static double VipsImageGetScale(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageGetScale(__arg0);
            return __ret;
        }

        public static double VipsImageGetOffset(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageGetOffset(__arg0);
            return __ret;
        }

        public static global::System.IntPtr VipsImageGetData(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageGetData(__arg0);
            return __ret;
        }

        public static void VipsImageInitFields(global::NetVips.VipsImage image, int xsize, int ysize, int bands, global::NetVips.VipsBandFormat format, global::NetVips.VipsCoding coding, global::NetVips.VipsInterpretation interpretation, double xres, double yres)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            __Internal.VipsImageInitFields(__arg0, xsize, ysize, bands, format, coding, interpretation, xres, yres);
        }

        public static int VipsImageGetAsString(global::NetVips.VipsImage image, string name, sbyte** @out)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageGetAsString(__arg0, name, @out);
            return __ret;
        }

        public static ulong VipsImageGetTypeof(global::NetVips.VipsImage image, string name)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageGetTypeof(__arg0, name);
            return __ret;
        }

        public static int VipsImageRemove(global::NetVips.VipsImage image, string name)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageRemove(__arg0, name);
            return __ret;
        }

        public static sbyte** VipsImageGetFields(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageGetFields(__arg0);
            return __ret;
        }

        public static void VipsImageSetArea(global::NetVips.VipsImage image, string name, global::NetVips.VipsCallbackFn free_fn, global::System.IntPtr data)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __arg2 = free_fn == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(free_fn);
            __Internal.VipsImageSetArea(__arg0, name, __arg2, data);
        }

        public static int VipsImageGetArea(global::NetVips.VipsImage image, string name, void** data)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageGetArea(__arg0, name, data);
            return __ret;
        }

        public static void VipsImageSetBlob(global::NetVips.VipsImage image, string name, global::NetVips.VipsCallbackFn free_fn, global::System.IntPtr data, ulong length)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __arg2 = free_fn == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(free_fn);
            __Internal.VipsImageSetBlob(__arg0, name, __arg2, data, length);
        }

        public static int VipsImageGetBlob(global::NetVips.VipsImage image, string name, void** data, ref ulong length)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            fixed (ulong* __refParamPtr3 = &length)
            {
                var __arg3 = __refParamPtr3;
                var __ret = __Internal.VipsImageGetBlob(__arg0, name, data, __arg3);
                return __ret;
            }
        }

        public static int VipsImageGetInt(global::NetVips.VipsImage image, string name, ref int @out)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            fixed (int* __refParamPtr2 = &@out)
            {
                var __arg2 = __refParamPtr2;
                var __ret = __Internal.VipsImageGetInt(__arg0, name, __arg2);
                return __ret;
            }
        }

        public static void VipsImageSetInt(global::NetVips.VipsImage image, string name, int i)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            __Internal.VipsImageSetInt(__arg0, name, i);
        }

        public static int VipsImageGetDouble(global::NetVips.VipsImage image, string name, ref double @out)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            fixed (double* __refParamPtr2 = &@out)
            {
                var __arg2 = __refParamPtr2;
                var __ret = __Internal.VipsImageGetDouble(__arg0, name, __arg2);
                return __ret;
            }
        }

        public static void VipsImageSetDouble(global::NetVips.VipsImage image, string name, double d)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            __Internal.VipsImageSetDouble(__arg0, name, d);
        }

        public static int VipsImageGetString(global::NetVips.VipsImage image, string name, sbyte** @out)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageGetString(__arg0, name, @out);
            return __ret;
        }

        public static void VipsImageSetString(global::NetVips.VipsImage image, string name, string str)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            __Internal.VipsImageSetString(__arg0, name, str);
        }

        public static void VipsImagePrintField(global::NetVips.VipsImage image, string field)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            __Internal.VipsImagePrintField(__arg0, field);
        }

        public static int VipsImageGetImage(global::NetVips.VipsImage image, string name, out global::NetVips.VipsImage @out)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsImageGetImage(__arg0, name, __arg2);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static void VipsImageSetImage(global::NetVips.VipsImage image, string name, global::NetVips.VipsImage im)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __arg2 = ReferenceEquals(im, null) ? global::System.IntPtr.Zero : im.__Instance;
            __Internal.VipsImageSetImage(__arg0, name, __arg2);
        }

        public static int VipsImageHistoryPrintf(global::NetVips.VipsImage image, string format, string[] options = null)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageHistoryPrintf(__arg0, format, options);
            return __ret;
        }

        public static int VipsImageHistoryArgs(global::NetVips.VipsImage image, string name, int argc, string[] argv)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageHistoryArgs(__arg0, name, argc, argv);
            return __ret;
        }

        public static string VipsImageGetHistory(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageGetHistory(__arg0);
            return Marshal.PtrToStringAnsi(__ret);
        }
    }

    [Flags]
    public enum VipsOperationFlags
    {
        VIPS_OPERATION_NONE = 0,
        VIPS_OPERATION_SEQUENTIAL = 1,
        VIPS_OPERATION_SEQUENTIAL_UNBUFFERED = 2,
        VIPS_OPERATION_NOCACHE = 4,
        VIPS_OPERATION_DEPRECATED = 8
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int VipsOperationBuildFn(global::System.IntPtr @object);

    public unsafe partial class VipsOperation : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 96)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.VipsObject.__Internal parent_instance;

            [FieldOffset(80)]
            internal uint hash;

            [FieldOffset(84)]
            internal int found_hash;

            [FieldOffset(88)]
            internal int pixels;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_VipsOperation@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsOperation> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsOperation>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsOperation __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsOperation(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsOperation __CreateInstance(global::NetVips.VipsOperation.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsOperation(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsOperation.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsOperation.__Internal));
            *(global::NetVips.VipsOperation.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsOperation(global::NetVips.VipsOperation.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsOperation(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VipsOperation()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsOperation.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public VipsOperation(global::NetVips.VipsOperation _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsOperation.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NetVips.VipsOperation.__Internal*) __Instance) = *((global::NetVips.VipsOperation.__Internal*) _0.__Instance);
        }

        ~VipsOperation()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsOperation __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NetVips.VipsObject ParentInstance
        {
            get
            {
                return global::NetVips.VipsObject.__CreateInstance(new global::System.IntPtr(&((global::NetVips.VipsOperation.__Internal*) __Instance)->parent_instance));
            }

            set
            {
                ((global::NetVips.VipsOperation.__Internal*)__Instance)->parent_instance = ReferenceEquals(value, null) ? new global::NetVips.VipsObject.__Internal() : *(global::NetVips.VipsObject.__Internal*) value.__Instance;
            }
        }

        public uint Hash
        {
            get
            {
                return ((global::NetVips.VipsOperation.__Internal*) __Instance)->hash;
            }

            set
            {
                ((global::NetVips.VipsOperation.__Internal*)__Instance)->hash = value;
            }
        }

        public int FoundHash
        {
            get
            {
                return ((global::NetVips.VipsOperation.__Internal*) __Instance)->found_hash;
            }

            set
            {
                ((global::NetVips.VipsOperation.__Internal*)__Instance)->found_hash = value;
            }
        }

        public int Pixels
        {
            get
            {
                return ((global::NetVips.VipsOperation.__Internal*) __Instance)->pixels;
            }

            set
            {
                ((global::NetVips.VipsOperation.__Internal*)__Instance)->pixels = value;
            }
        }
    }

    public unsafe partial class VipsOperationClass : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 360)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.VipsObjectClass.__Internal parent_class;

            [FieldOffset(328)]
            internal global::System.IntPtr usage;

            [FieldOffset(336)]
            internal global::System.IntPtr get_flags;

            [FieldOffset(344)]
            internal global::NetVips.VipsOperationFlags flags;

            [FieldOffset(352)]
            internal global::System.IntPtr invalidate;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_VipsOperationClass@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsOperationClass> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsOperationClass>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsOperationClass __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsOperationClass(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsOperationClass __CreateInstance(global::NetVips.VipsOperationClass.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsOperationClass(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsOperationClass.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsOperationClass.__Internal));
            *(global::NetVips.VipsOperationClass.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsOperationClass(global::NetVips.VipsOperationClass.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsOperationClass(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VipsOperationClass()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsOperationClass.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public VipsOperationClass(global::NetVips.VipsOperationClass _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsOperationClass.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NetVips.VipsOperationClass.__Internal*) __Instance) = *((global::NetVips.VipsOperationClass.__Internal*) _0.__Instance);
        }

        ~VipsOperationClass()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsOperationClass __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NetVips.VipsObjectClass ParentClass
        {
            get
            {
                return global::NetVips.VipsObjectClass.__CreateInstance(new global::System.IntPtr(&((global::NetVips.VipsOperationClass.__Internal*) __Instance)->parent_class));
            }

            set
            {
                ((global::NetVips.VipsOperationClass.__Internal*)__Instance)->parent_class = ReferenceEquals(value, null) ? new global::NetVips.VipsObjectClass.__Internal() : *(global::NetVips.VipsObjectClass.__Internal*) value.__Instance;
            }
        }

        public global::NetVips.VipsOperationFlags Flags
        {
            get
            {
                return ((global::NetVips.VipsOperationClass.__Internal*) __Instance)->flags;
            }

            set
            {
                ((global::NetVips.VipsOperationClass.__Internal*)__Instance)->flags = value;
            }
        }
    }

    public unsafe partial class operation
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_operation_get_type")]
            internal static extern ulong VipsOperationGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_operation_get_flags")]
            internal static extern global::NetVips.VipsOperationFlags VipsOperationGetFlags(global::System.IntPtr operation);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_operation_class_print_usage")]
            internal static extern void VipsOperationClassPrintUsage(global::System.IntPtr operation_class);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_operation_invalidate")]
            internal static extern void VipsOperationInvalidate(global::System.IntPtr operation);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_operation_new")]
            internal static extern global::System.IntPtr VipsOperationNew([MarshalAs(UnmanagedType.LPStr)] string name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_call")]
            internal static extern int VipsCall([MarshalAs(UnmanagedType.LPStr)] string operation_name, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_call_argv")]
            internal static extern int VipsCallArgv(global::System.IntPtr operation, int argc, sbyte** argv);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_cache_drop_all")]
            internal static extern void VipsCacheDropAll();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_cache_operation_lookup")]
            internal static extern global::System.IntPtr VipsCacheOperationLookup(global::System.IntPtr operation);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_cache_operation_add")]
            internal static extern void VipsCacheOperationAdd(global::System.IntPtr operation);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_cache_operation_buildp")]
            internal static extern int VipsCacheOperationBuildp(global::System.IntPtr operation);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_cache_operation_build")]
            internal static extern global::System.IntPtr VipsCacheOperationBuild(global::System.IntPtr operation);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_cache_print")]
            internal static extern void VipsCachePrint();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_cache_set_max")]
            internal static extern void VipsCacheSetMax(int max);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_cache_set_max_mem")]
            internal static extern void VipsCacheSetMaxMem(ulong max_mem);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_cache_get_max")]
            internal static extern int VipsCacheGetMax();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_cache_get_size")]
            internal static extern int VipsCacheGetSize();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_cache_get_max_mem")]
            internal static extern ulong VipsCacheGetMaxMem();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_cache_get_max_files")]
            internal static extern int VipsCacheGetMaxFiles();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_cache_set_max_files")]
            internal static extern void VipsCacheSetMaxFiles(int max_files);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_cache_set_dump")]
            internal static extern void VipsCacheSetDump(int dump);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_cache_set_trace")]
            internal static extern void VipsCacheSetTrace(int trace);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_concurrency_set")]
            internal static extern void VipsConcurrencySet(int concurrency);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_concurrency_get")]
            internal static extern int VipsConcurrencyGet();
        }

        public static ulong VipsOperationGetType()
        {
            var __ret = __Internal.VipsOperationGetType();
            return __ret;
        }

        public static global::NetVips.VipsOperationFlags VipsOperationGetFlags(global::NetVips.VipsOperation operation)
        {
            var __arg0 = ReferenceEquals(operation, null) ? global::System.IntPtr.Zero : operation.__Instance;
            var __ret = __Internal.VipsOperationGetFlags(__arg0);
            return __ret;
        }

        public static void VipsOperationClassPrintUsage(global::NetVips.VipsOperationClass operation_class)
        {
            var __arg0 = ReferenceEquals(operation_class, null) ? global::System.IntPtr.Zero : operation_class.__Instance;
            __Internal.VipsOperationClassPrintUsage(__arg0);
        }

        public static void VipsOperationInvalidate(global::NetVips.VipsOperation operation)
        {
            var __arg0 = ReferenceEquals(operation, null) ? global::System.IntPtr.Zero : operation.__Instance;
            __Internal.VipsOperationInvalidate(__arg0);
        }

        public static global::NetVips.VipsOperation VipsOperationNew(string name)
        {
            var __ret = __Internal.VipsOperationNew(name);
            global::NetVips.VipsOperation __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsOperation.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsOperation) global::NetVips.VipsOperation.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsOperation.__CreateInstance(__ret);
            return __result0;
        }

        public static int VipsCall(string operation_name, string[] options = null)
        {
            var __ret = __Internal.VipsCall(operation_name, options);
            return __ret;
        }

        public static int VipsCallArgv(global::NetVips.VipsOperation operation, int argc, sbyte** argv)
        {
            var __arg0 = ReferenceEquals(operation, null) ? global::System.IntPtr.Zero : operation.__Instance;
            var __ret = __Internal.VipsCallArgv(__arg0, argc, argv);
            return __ret;
        }

        public static void VipsCacheDropAll()
        {
            __Internal.VipsCacheDropAll();
        }

        public static global::NetVips.VipsOperation VipsCacheOperationLookup(global::NetVips.VipsOperation operation)
        {
            var __arg0 = ReferenceEquals(operation, null) ? global::System.IntPtr.Zero : operation.__Instance;
            var __ret = __Internal.VipsCacheOperationLookup(__arg0);
            global::NetVips.VipsOperation __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsOperation.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsOperation) global::NetVips.VipsOperation.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsOperation.__CreateInstance(__ret);
            return __result0;
        }

        public static void VipsCacheOperationAdd(global::NetVips.VipsOperation operation)
        {
            var __arg0 = ReferenceEquals(operation, null) ? global::System.IntPtr.Zero : operation.__Instance;
            __Internal.VipsCacheOperationAdd(__arg0);
        }

        public static int VipsCacheOperationBuildp(global::NetVips.VipsOperation operation)
        {
            var __arg0 = ReferenceEquals(operation, null) ? global::System.IntPtr.Zero : operation.__Instance;
            var __ret = __Internal.VipsCacheOperationBuildp(__arg0);
            return __ret;
        }

        public static global::NetVips.VipsOperation VipsCacheOperationBuild(global::NetVips.VipsOperation operation)
        {
            var __arg0 = ReferenceEquals(operation, null) ? global::System.IntPtr.Zero : operation.__Instance;
            var __ret = __Internal.VipsCacheOperationBuild(__arg0);
            global::NetVips.VipsOperation __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsOperation.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsOperation) global::NetVips.VipsOperation.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsOperation.__CreateInstance(__ret);
            return __result0;
        }

        public static void VipsCachePrint()
        {
            __Internal.VipsCachePrint();
        }

        public static void VipsCacheSetMax(int max)
        {
            __Internal.VipsCacheSetMax(max);
        }

        public static void VipsCacheSetMaxMem(ulong max_mem)
        {
            __Internal.VipsCacheSetMaxMem(max_mem);
        }

        public static int VipsCacheGetMax()
        {
            var __ret = __Internal.VipsCacheGetMax();
            return __ret;
        }

        public static int VipsCacheGetSize()
        {
            var __ret = __Internal.VipsCacheGetSize();
            return __ret;
        }

        public static ulong VipsCacheGetMaxMem()
        {
            var __ret = __Internal.VipsCacheGetMaxMem();
            return __ret;
        }

        public static int VipsCacheGetMaxFiles()
        {
            var __ret = __Internal.VipsCacheGetMaxFiles();
            return __ret;
        }

        public static void VipsCacheSetMaxFiles(int max_files)
        {
            __Internal.VipsCacheSetMaxFiles(max_files);
        }

        public static void VipsCacheSetDump(int dump)
        {
            __Internal.VipsCacheSetDump(dump);
        }

        public static void VipsCacheSetTrace(int trace)
        {
            __Internal.VipsCacheSetTrace(trace);
        }

        public static void VipsConcurrencySet(int concurrency)
        {
            __Internal.VipsConcurrencySet(concurrency);
        }

        public static int VipsConcurrencyGet()
        {
            var __ret = __Internal.VipsConcurrencyGet();
            return __ret;
        }
    }

    public enum VipsForeignFlags
    {
        VIPS_FOREIGN_NONE = 0,
        VIPS_FOREIGN_PARTIAL = 1,
        VIPS_FOREIGN_BIGENDIAN = 2,
        VIPS_FOREIGN_SEQUENTIAL = 4,
        VIPS_FOREIGN_ALL = 7
    }

    /// <summary>
    /// <para>VipsSaveable:</para>
    /// <para>1 band (eg. CSV)</para>
    /// <para>1 or 3 bands (eg. PPM)</para>
    /// <para>1, 2, 3 or 4 bands (eg. PNG)</para>
    /// <para>3 or 4 bands (eg. WEBP)</para>
    /// <para>1, 3 or 4 bands (eg. JPEG)</para>
    /// <para>any number of bands (eg. TIFF)</para>
    /// </summary>
    /// <remarks>See also: #VipsForeignSave.</remarks>
    public enum VipsSaveable
    {
        VIPS_SAVEABLE_MONO = 0,
        VIPS_SAVEABLE_RGB = 1,
        VIPS_SAVEABLE_RGBA = 2,
        VIPS_SAVEABLE_RGBA_ONLY = 3,
        VIPS_SAVEABLE_RGB_CMYK = 4,
        VIPS_SAVEABLE_ANY = 5,
        VIPS_SAVEABLE_LAST = 6
    }

    /// <summary>
    /// <para>VipsForeignWebpPreset:</para>
    /// <para>default preset</para>
    /// <para>digital picture, like portrait, inner shot</para>
    /// <para>outdoor photograph, with natural lighting</para>
    /// <para>hand or line drawing, with high-contrast details</para>
    /// <para>small-sized colorful images</para>
    /// <para>text-like</para>
    /// </summary>
    /// <remarks>Tune lossy encoder settings for different image types.</remarks>
    public enum VipsForeignWebpPreset
    {
        VIPS_FOREIGN_WEBP_PRESET_DEFAULT = 0,
        VIPS_FOREIGN_WEBP_PRESET_PICTURE = 1,
        VIPS_FOREIGN_WEBP_PRESET_PHOTO = 2,
        VIPS_FOREIGN_WEBP_PRESET_DRAWING = 3,
        VIPS_FOREIGN_WEBP_PRESET_ICON = 4,
        VIPS_FOREIGN_WEBP_PRESET_TEXT = 5,
        VIPS_FOREIGN_WEBP_PRESET_LAST = 6
    }

    /// <summary>
    /// <para>VipsForeignTiffCompression:</para>
    /// <para>no compression</para>
    /// <para>jpeg compression</para>
    /// <para>deflate (zip) compression</para>
    /// <para>packbits compression</para>
    /// <para>fax4 compression</para>
    /// <para>LZW compression</para>
    /// </summary>
    /// <remarks>
    /// <para>The compression types supported by the tiff writer.</para>
    /// <para>Useto set the jpeg compression level, default 75.</para>
    /// <para>Useto set the lzw or deflate prediction, default none.</para>
    /// </remarks>
    public enum VipsForeignTiffCompression
    {
        VIPS_FOREIGN_TIFF_COMPRESSION_NONE = 0,
        VIPS_FOREIGN_TIFF_COMPRESSION_JPEG = 1,
        VIPS_FOREIGN_TIFF_COMPRESSION_DEFLATE = 2,
        VIPS_FOREIGN_TIFF_COMPRESSION_PACKBITS = 3,
        VIPS_FOREIGN_TIFF_COMPRESSION_CCITTFAX4 = 4,
        VIPS_FOREIGN_TIFF_COMPRESSION_LZW = 5,
        VIPS_FOREIGN_TIFF_COMPRESSION_LAST = 6
    }

    /// <summary>
    /// <para>VipsForeignTiffPredictor:</para>
    /// <para>no prediction</para>
    /// <para>horizontal differencing</para>
    /// <para>float predictor</para>
    /// </summary>
    /// <remarks>
    /// <para>The predictor can help deflate and lzw compression. The values are fixed by</para>
    /// <para>the tiff library.</para>
    /// </remarks>
    public enum VipsForeignTiffPredictor
    {
        VIPS_FOREIGN_TIFF_PREDICTOR_NONE = 1,
        VIPS_FOREIGN_TIFF_PREDICTOR_HORIZONTAL = 2,
        VIPS_FOREIGN_TIFF_PREDICTOR_FLOAT = 3,
        VIPS_FOREIGN_TIFF_PREDICTOR_LAST = 4
    }

    /// <summary>
    /// <para>VipsForeignTiffResunit:</para>
    /// <para>use centimeters</para>
    /// <para>use inches</para>
    /// </summary>
    /// <remarks>Use inches or centimeters as the resolution unit for a tiff file.</remarks>
    public enum VipsForeignTiffResunit
    {
        VIPS_FOREIGN_TIFF_RESUNIT_CM = 0,
        VIPS_FOREIGN_TIFF_RESUNIT_INCH = 1,
        VIPS_FOREIGN_TIFF_RESUNIT_LAST = 2
    }

    /// <summary>
    /// <para>VipsForeignPngFilter:</para>
    /// <para>no filtering</para>
    /// <para>difference to the left</para>
    /// <para>difference up</para>
    /// <para>average of left and up</para>
    /// <para>pick best neighbor predictor automatically</para>
    /// <para>adaptive</para>
    /// </summary>
    /// <remarks>
    /// <para>http://www.w3.org/TR/PNG-Filters.html</para>
    /// <para>The values mirror those of png.h in libpng.</para>
    /// </remarks>
    public enum VipsForeignPngFilter
    {
        VIPS_FOREIGN_PNG_FILTER_NONE = 8,
        VIPS_FOREIGN_PNG_FILTER_SUB = 16,
        VIPS_FOREIGN_PNG_FILTER_UP = 32,
        VIPS_FOREIGN_PNG_FILTER_AVG = 64,
        VIPS_FOREIGN_PNG_FILTER_PAETH = 128,
        VIPS_FOREIGN_PNG_FILTER_ALL = 234
    }

    /// <summary>
    /// <para>VipsForeignDzLayout:</para>
    /// <para>use DeepZoom directory layout</para>
    /// <para>use Zoomify directory layout</para>
    /// <para>use Google maps directory layout</para>
    /// </summary>
    /// <remarks>What directory layout and metadata standard to use.</remarks>
    public enum VipsForeignDzLayout
    {
        VIPS_FOREIGN_DZ_LAYOUT_DZ = 0,
        VIPS_FOREIGN_DZ_LAYOUT_ZOOMIFY = 1,
        VIPS_FOREIGN_DZ_LAYOUT_GOOGLE = 2,
        VIPS_FOREIGN_DZ_LAYOUT_LAST = 3
    }

    /// <summary>
    /// <para>VipsForeignDzDepth:</para>
    /// <para>create layers down to 1x1 pixel</para>
    /// <para>create layers down to 1x1 tile</para>
    /// <para>only create a single layer</para>
    /// </summary>
    /// <remarks>How many pyramid layers to create.</remarks>
    public enum VipsForeignDzDepth
    {
        VIPS_FOREIGN_DZ_DEPTH_ONEPIXEL = 0,
        VIPS_FOREIGN_DZ_DEPTH_ONETILE = 1,
        VIPS_FOREIGN_DZ_DEPTH_ONE = 2,
        VIPS_FOREIGN_DZ_DEPTH_LAST = 3
    }

    /// <summary>
    /// <para>VipsForeignDzContainer:</para>
    /// <para>write tiles to the filesystem</para>
    /// <para>write tiles to a zip file</para>
    /// <para>write to a szi file</para>
    /// </summary>
    /// <remarks>How many pyramid layers to create.</remarks>
    public enum VipsForeignDzContainer
    {
        VIPS_FOREIGN_DZ_CONTAINER_FS = 0,
        VIPS_FOREIGN_DZ_CONTAINER_ZIP = 1,
        VIPS_FOREIGN_DZ_CONTAINER_SZI = 2,
        VIPS_FOREIGN_DZ_CONTAINER_LAST = 3
    }

    public unsafe partial class VipsForeign : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 96)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.VipsOperation.__Internal parent_object;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_VipsForeign@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsForeign> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsForeign>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsForeign __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsForeign(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsForeign __CreateInstance(global::NetVips.VipsForeign.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsForeign(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsForeign.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsForeign.__Internal));
            *(global::NetVips.VipsForeign.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsForeign(global::NetVips.VipsForeign.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsForeign(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VipsForeign()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsForeign.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public VipsForeign(global::NetVips.VipsForeign _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsForeign.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NetVips.VipsForeign.__Internal*) __Instance) = *((global::NetVips.VipsForeign.__Internal*) _0.__Instance);
        }

        ~VipsForeign()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsForeign __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NetVips.VipsOperation ParentObject
        {
            get
            {
                return global::NetVips.VipsOperation.__CreateInstance(new global::System.IntPtr(&((global::NetVips.VipsForeign.__Internal*) __Instance)->parent_object));
            }

            set
            {
                ((global::NetVips.VipsForeign.__Internal*)__Instance)->parent_object = ReferenceEquals(value, null) ? new global::NetVips.VipsOperation.__Internal() : *(global::NetVips.VipsOperation.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class VipsForeignClass : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 376)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.VipsOperationClass.__Internal parent_class;

            [FieldOffset(360)]
            internal int priority;

            [FieldOffset(368)]
            internal global::System.IntPtr suffs;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_VipsForeignClass@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsForeignClass> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsForeignClass>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsForeignClass __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsForeignClass(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsForeignClass __CreateInstance(global::NetVips.VipsForeignClass.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsForeignClass(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsForeignClass.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsForeignClass.__Internal));
            *(global::NetVips.VipsForeignClass.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsForeignClass(global::NetVips.VipsForeignClass.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsForeignClass(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VipsForeignClass()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsForeignClass.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public VipsForeignClass(global::NetVips.VipsForeignClass _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsForeignClass.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NetVips.VipsForeignClass.__Internal*) __Instance) = *((global::NetVips.VipsForeignClass.__Internal*) _0.__Instance);
        }

        ~VipsForeignClass()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsForeignClass __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NetVips.VipsOperationClass ParentClass
        {
            get
            {
                return global::NetVips.VipsOperationClass.__CreateInstance(new global::System.IntPtr(&((global::NetVips.VipsForeignClass.__Internal*) __Instance)->parent_class));
            }

            set
            {
                ((global::NetVips.VipsForeignClass.__Internal*)__Instance)->parent_class = ReferenceEquals(value, null) ? new global::NetVips.VipsOperationClass.__Internal() : *(global::NetVips.VipsOperationClass.__Internal*) value.__Instance;
            }
        }

        public int Priority
        {
            get
            {
                return ((global::NetVips.VipsForeignClass.__Internal*) __Instance)->priority;
            }

            set
            {
                ((global::NetVips.VipsForeignClass.__Internal*)__Instance)->priority = value;
            }
        }
    }

    public unsafe partial class VipsForeignLoad : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 144)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.VipsForeign.__Internal parent_object;

            [FieldOffset(96)]
            internal int memory;

            [FieldOffset(100)]
            internal global::NetVips.VipsAccess access;

            [FieldOffset(104)]
            internal global::NetVips.VipsForeignFlags flags;

            [FieldOffset(108)]
            internal int fail;

            [FieldOffset(112)]
            internal int sequential;

            [FieldOffset(120)]
            internal global::System.IntPtr @out;

            [FieldOffset(128)]
            internal global::System.IntPtr real;

            [FieldOffset(136)]
            internal int nocache;

            [FieldOffset(140)]
            internal int disc;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_VipsForeignLoad@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsForeignLoad> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsForeignLoad>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsForeignLoad __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsForeignLoad(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsForeignLoad __CreateInstance(global::NetVips.VipsForeignLoad.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsForeignLoad(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsForeignLoad.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsForeignLoad.__Internal));
            *(global::NetVips.VipsForeignLoad.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsForeignLoad(global::NetVips.VipsForeignLoad.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsForeignLoad(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VipsForeignLoad()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsForeignLoad.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public VipsForeignLoad(global::NetVips.VipsForeignLoad _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsForeignLoad.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NetVips.VipsForeignLoad.__Internal*) __Instance) = *((global::NetVips.VipsForeignLoad.__Internal*) _0.__Instance);
        }

        ~VipsForeignLoad()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsForeignLoad __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NetVips.VipsForeign ParentObject
        {
            get
            {
                return global::NetVips.VipsForeign.__CreateInstance(new global::System.IntPtr(&((global::NetVips.VipsForeignLoad.__Internal*) __Instance)->parent_object));
            }

            set
            {
                ((global::NetVips.VipsForeignLoad.__Internal*)__Instance)->parent_object = ReferenceEquals(value, null) ? new global::NetVips.VipsForeign.__Internal() : *(global::NetVips.VipsForeign.__Internal*) value.__Instance;
            }
        }

        public int Memory
        {
            get
            {
                return ((global::NetVips.VipsForeignLoad.__Internal*) __Instance)->memory;
            }

            set
            {
                ((global::NetVips.VipsForeignLoad.__Internal*)__Instance)->memory = value;
            }
        }

        public global::NetVips.VipsAccess Access
        {
            get
            {
                return ((global::NetVips.VipsForeignLoad.__Internal*) __Instance)->access;
            }

            set
            {
                ((global::NetVips.VipsForeignLoad.__Internal*)__Instance)->access = value;
            }
        }

        public global::NetVips.VipsForeignFlags Flags
        {
            get
            {
                return ((global::NetVips.VipsForeignLoad.__Internal*) __Instance)->flags;
            }

            set
            {
                ((global::NetVips.VipsForeignLoad.__Internal*)__Instance)->flags = value;
            }
        }

        public int Fail
        {
            get
            {
                return ((global::NetVips.VipsForeignLoad.__Internal*) __Instance)->fail;
            }

            set
            {
                ((global::NetVips.VipsForeignLoad.__Internal*)__Instance)->fail = value;
            }
        }

        public int Sequential
        {
            get
            {
                return ((global::NetVips.VipsForeignLoad.__Internal*) __Instance)->sequential;
            }

            set
            {
                ((global::NetVips.VipsForeignLoad.__Internal*)__Instance)->sequential = value;
            }
        }

        public global::NetVips.VipsImage Out
        {
            get
            {
                global::NetVips.VipsImage __result0;
                if (((global::NetVips.VipsForeignLoad.__Internal*) __Instance)->@out == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(((global::NetVips.VipsForeignLoad.__Internal*) __Instance)->@out))
                    __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[((global::NetVips.VipsForeignLoad.__Internal*) __Instance)->@out];
                else __result0 = global::NetVips.VipsImage.__CreateInstance(((global::NetVips.VipsForeignLoad.__Internal*) __Instance)->@out);
                return __result0;
            }

            set
            {
                ((global::NetVips.VipsForeignLoad.__Internal*)__Instance)->@out = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::NetVips.VipsImage Real
        {
            get
            {
                global::NetVips.VipsImage __result0;
                if (((global::NetVips.VipsForeignLoad.__Internal*) __Instance)->real == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(((global::NetVips.VipsForeignLoad.__Internal*) __Instance)->real))
                    __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[((global::NetVips.VipsForeignLoad.__Internal*) __Instance)->real];
                else __result0 = global::NetVips.VipsImage.__CreateInstance(((global::NetVips.VipsForeignLoad.__Internal*) __Instance)->real);
                return __result0;
            }

            set
            {
                ((global::NetVips.VipsForeignLoad.__Internal*)__Instance)->real = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public int Nocache
        {
            get
            {
                return ((global::NetVips.VipsForeignLoad.__Internal*) __Instance)->nocache;
            }

            set
            {
                ((global::NetVips.VipsForeignLoad.__Internal*)__Instance)->nocache = value;
            }
        }

        public int Disc
        {
            get
            {
                return ((global::NetVips.VipsForeignLoad.__Internal*) __Instance)->disc;
            }

            set
            {
                ((global::NetVips.VipsForeignLoad.__Internal*)__Instance)->disc = value;
            }
        }
    }

    public unsafe partial class VipsForeignLoadClass : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 424)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.VipsForeignClass.__Internal parent_class;

            [FieldOffset(376)]
            internal global::System.IntPtr is_a;

            [FieldOffset(384)]
            internal global::System.IntPtr is_a_buffer;

            [FieldOffset(392)]
            internal global::System.IntPtr get_flags_filename;

            [FieldOffset(400)]
            internal global::System.IntPtr get_flags;

            [FieldOffset(408)]
            internal global::System.IntPtr header;

            [FieldOffset(416)]
            internal global::System.IntPtr load;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_VipsForeignLoadClass@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsForeignLoadClass> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsForeignLoadClass>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsForeignLoadClass __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsForeignLoadClass(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsForeignLoadClass __CreateInstance(global::NetVips.VipsForeignLoadClass.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsForeignLoadClass(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsForeignLoadClass.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsForeignLoadClass.__Internal));
            *(global::NetVips.VipsForeignLoadClass.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsForeignLoadClass(global::NetVips.VipsForeignLoadClass.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsForeignLoadClass(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VipsForeignLoadClass()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsForeignLoadClass.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public VipsForeignLoadClass(global::NetVips.VipsForeignLoadClass _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsForeignLoadClass.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NetVips.VipsForeignLoadClass.__Internal*) __Instance) = *((global::NetVips.VipsForeignLoadClass.__Internal*) _0.__Instance);
        }

        ~VipsForeignLoadClass()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsForeignLoadClass __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NetVips.VipsForeignClass ParentClass
        {
            get
            {
                return global::NetVips.VipsForeignClass.__CreateInstance(new global::System.IntPtr(&((global::NetVips.VipsForeignLoadClass.__Internal*) __Instance)->parent_class));
            }

            set
            {
                ((global::NetVips.VipsForeignLoadClass.__Internal*)__Instance)->parent_class = ReferenceEquals(value, null) ? new global::NetVips.VipsForeignClass.__Internal() : *(global::NetVips.VipsForeignClass.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class VipsForeignSave : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 136)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.VipsForeign.__Internal parent_object;

            [FieldOffset(96)]
            internal int strip;

            [FieldOffset(104)]
            internal global::System.IntPtr background;

            [FieldOffset(112)]
            internal int page_height;

            [FieldOffset(120)]
            internal global::System.IntPtr @in;

            [FieldOffset(128)]
            internal global::System.IntPtr ready;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_VipsForeignSave@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsForeignSave> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsForeignSave>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsForeignSave __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsForeignSave(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsForeignSave __CreateInstance(global::NetVips.VipsForeignSave.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsForeignSave(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsForeignSave.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsForeignSave.__Internal));
            *(global::NetVips.VipsForeignSave.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsForeignSave(global::NetVips.VipsForeignSave.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsForeignSave(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VipsForeignSave()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsForeignSave.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public VipsForeignSave(global::NetVips.VipsForeignSave _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsForeignSave.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NetVips.VipsForeignSave.__Internal*) __Instance) = *((global::NetVips.VipsForeignSave.__Internal*) _0.__Instance);
        }

        ~VipsForeignSave()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsForeignSave __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NetVips.VipsForeign ParentObject
        {
            get
            {
                return global::NetVips.VipsForeign.__CreateInstance(new global::System.IntPtr(&((global::NetVips.VipsForeignSave.__Internal*) __Instance)->parent_object));
            }

            set
            {
                ((global::NetVips.VipsForeignSave.__Internal*)__Instance)->parent_object = ReferenceEquals(value, null) ? new global::NetVips.VipsForeign.__Internal() : *(global::NetVips.VipsForeign.__Internal*) value.__Instance;
            }
        }

        public int Strip
        {
            get
            {
                return ((global::NetVips.VipsForeignSave.__Internal*) __Instance)->strip;
            }

            set
            {
                ((global::NetVips.VipsForeignSave.__Internal*)__Instance)->strip = value;
            }
        }

        public global::NetVips.VipsArrayDouble Background
        {
            get
            {
                global::NetVips.VipsArrayDouble __result0;
                if (((global::NetVips.VipsForeignSave.__Internal*) __Instance)->background == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsArrayDouble.NativeToManagedMap.ContainsKey(((global::NetVips.VipsForeignSave.__Internal*) __Instance)->background))
                    __result0 = (global::NetVips.VipsArrayDouble) global::NetVips.VipsArrayDouble.NativeToManagedMap[((global::NetVips.VipsForeignSave.__Internal*) __Instance)->background];
                else __result0 = global::NetVips.VipsArrayDouble.__CreateInstance(((global::NetVips.VipsForeignSave.__Internal*) __Instance)->background);
                return __result0;
            }

            set
            {
                ((global::NetVips.VipsForeignSave.__Internal*)__Instance)->background = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public int PageHeight
        {
            get
            {
                return ((global::NetVips.VipsForeignSave.__Internal*) __Instance)->page_height;
            }

            set
            {
                ((global::NetVips.VipsForeignSave.__Internal*)__Instance)->page_height = value;
            }
        }

        public global::NetVips.VipsImage In
        {
            get
            {
                global::NetVips.VipsImage __result0;
                if (((global::NetVips.VipsForeignSave.__Internal*) __Instance)->@in == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(((global::NetVips.VipsForeignSave.__Internal*) __Instance)->@in))
                    __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[((global::NetVips.VipsForeignSave.__Internal*) __Instance)->@in];
                else __result0 = global::NetVips.VipsImage.__CreateInstance(((global::NetVips.VipsForeignSave.__Internal*) __Instance)->@in);
                return __result0;
            }

            set
            {
                ((global::NetVips.VipsForeignSave.__Internal*)__Instance)->@in = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::NetVips.VipsImage Ready
        {
            get
            {
                global::NetVips.VipsImage __result0;
                if (((global::NetVips.VipsForeignSave.__Internal*) __Instance)->ready == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(((global::NetVips.VipsForeignSave.__Internal*) __Instance)->ready))
                    __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[((global::NetVips.VipsForeignSave.__Internal*) __Instance)->ready];
                else __result0 = global::NetVips.VipsImage.__CreateInstance(((global::NetVips.VipsForeignSave.__Internal*) __Instance)->ready);
                return __result0;
            }

            set
            {
                ((global::NetVips.VipsForeignSave.__Internal*)__Instance)->ready = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class VipsForeignSaveClass : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 424)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.VipsForeignClass.__Internal parent_class;

            [FieldOffset(376)]
            internal global::NetVips.VipsSaveable saveable;

            [FieldOffset(384)]
            internal global::System.IntPtr format_table;

            [FieldOffset(392)]
            internal fixed int coding[7];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_VipsForeignSaveClass@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsForeignSaveClass> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsForeignSaveClass>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsForeignSaveClass __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsForeignSaveClass(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsForeignSaveClass __CreateInstance(global::NetVips.VipsForeignSaveClass.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsForeignSaveClass(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsForeignSaveClass.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsForeignSaveClass.__Internal));
            *(global::NetVips.VipsForeignSaveClass.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsForeignSaveClass(global::NetVips.VipsForeignSaveClass.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsForeignSaveClass(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VipsForeignSaveClass()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsForeignSaveClass.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public VipsForeignSaveClass(global::NetVips.VipsForeignSaveClass _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsForeignSaveClass.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NetVips.VipsForeignSaveClass.__Internal*) __Instance) = *((global::NetVips.VipsForeignSaveClass.__Internal*) _0.__Instance);
        }

        ~VipsForeignSaveClass()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsForeignSaveClass __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NetVips.VipsForeignClass ParentClass
        {
            get
            {
                return global::NetVips.VipsForeignClass.__CreateInstance(new global::System.IntPtr(&((global::NetVips.VipsForeignSaveClass.__Internal*) __Instance)->parent_class));
            }

            set
            {
                ((global::NetVips.VipsForeignSaveClass.__Internal*)__Instance)->parent_class = ReferenceEquals(value, null) ? new global::NetVips.VipsForeignClass.__Internal() : *(global::NetVips.VipsForeignClass.__Internal*) value.__Instance;
            }
        }

        public global::NetVips.VipsSaveable Saveable
        {
            get
            {
                return ((global::NetVips.VipsForeignSaveClass.__Internal*) __Instance)->saveable;
            }

            set
            {
                ((global::NetVips.VipsForeignSaveClass.__Internal*)__Instance)->saveable = value;
            }
        }

        public int[] Coding
        {
            get
            {
                int[] __value = null;
                if (((global::NetVips.VipsForeignSaveClass.__Internal*) __Instance)->coding != null)
                {
                    __value = new int[7];
                    for (int i = 0; i < 7; i++)
                        __value[i] = ((global::NetVips.VipsForeignSaveClass.__Internal*) __Instance)->coding[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 7; i++)
                        ((global::NetVips.VipsForeignSaveClass.__Internal*)__Instance)->coding[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class foreign
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_foreign_get_type")]
            internal static extern ulong VipsForeignGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_foreign_map")]
            internal static extern global::System.IntPtr VipsForeignMap([MarshalAs(UnmanagedType.LPStr)] string @base, global::System.IntPtr fn, global::System.IntPtr a, global::System.IntPtr b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_foreign_load_get_type")]
            internal static extern ulong VipsForeignLoadGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_foreign_find_load")]
            internal static extern global::System.IntPtr VipsForeignFindLoad([MarshalAs(UnmanagedType.LPStr)] string filename);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_foreign_find_load_buffer")]
            internal static extern global::System.IntPtr VipsForeignFindLoadBuffer(global::System.IntPtr data, ulong size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_foreign_flags")]
            internal static extern global::NetVips.VipsForeignFlags vips_foreign_flags([MarshalAs(UnmanagedType.LPStr)] string loader, [MarshalAs(UnmanagedType.LPStr)] string filename);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_foreign_is_a")]
            internal static extern int VipsForeignIsA([MarshalAs(UnmanagedType.LPStr)] string loader, [MarshalAs(UnmanagedType.LPStr)] string filename);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_foreign_is_a_buffer")]
            internal static extern int VipsForeignIsABuffer([MarshalAs(UnmanagedType.LPStr)] string loader, global::System.IntPtr data, ulong size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_foreign_load_invalidate")]
            internal static extern void VipsForeignLoadInvalidate(global::System.IntPtr image);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_foreign_save_get_type")]
            internal static extern ulong VipsForeignSaveGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_foreign_find_save")]
            internal static extern global::System.IntPtr VipsForeignFindSave([MarshalAs(UnmanagedType.LPStr)] string filename);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_foreign_find_save_buffer")]
            internal static extern global::System.IntPtr VipsForeignFindSaveBuffer([MarshalAs(UnmanagedType.LPStr)] string suffix);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_vipsload")]
            internal static extern int VipsVipsload([MarshalAs(UnmanagedType.LPStr)] string filename, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_vipssave")]
            internal static extern int VipsVipssave(global::System.IntPtr @in, [MarshalAs(UnmanagedType.LPStr)] string filename, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_openslideload")]
            internal static extern int VipsOpenslideload([MarshalAs(UnmanagedType.LPStr)] string filename, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_jpegload")]
            internal static extern int VipsJpegload([MarshalAs(UnmanagedType.LPStr)] string filename, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_jpegload_buffer")]
            internal static extern int VipsJpegloadBuffer(global::System.IntPtr buf, ulong len, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_jpegsave")]
            internal static extern int VipsJpegsave(global::System.IntPtr @in, [MarshalAs(UnmanagedType.LPStr)] string filename, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_jpegsave_buffer")]
            internal static extern int VipsJpegsaveBuffer(global::System.IntPtr @in, void** buf, ulong* len, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_jpegsave_mime")]
            internal static extern int VipsJpegsaveMime(global::System.IntPtr @in, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_webpload")]
            internal static extern int VipsWebpload([MarshalAs(UnmanagedType.LPStr)] string filename, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_webpload_buffer")]
            internal static extern int VipsWebploadBuffer(global::System.IntPtr buf, ulong len, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_webpsave")]
            internal static extern int VipsWebpsave(global::System.IntPtr @in, [MarshalAs(UnmanagedType.LPStr)] string filename, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_webpsave_buffer")]
            internal static extern int VipsWebpsaveBuffer(global::System.IntPtr @in, void** buf, ulong* len, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_webpsave_mime")]
            internal static extern int VipsWebpsaveMime(global::System.IntPtr @in, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_tiffload")]
            internal static extern int VipsTiffload([MarshalAs(UnmanagedType.LPStr)] string filename, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_tiffload_buffer")]
            internal static extern int VipsTiffloadBuffer(global::System.IntPtr buf, ulong len, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_tiffsave")]
            internal static extern int VipsTiffsave(global::System.IntPtr @in, [MarshalAs(UnmanagedType.LPStr)] string filename, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_tiffsave_buffer")]
            internal static extern int VipsTiffsaveBuffer(global::System.IntPtr @in, void** buf, ulong* len, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_openexrload")]
            internal static extern int VipsOpenexrload([MarshalAs(UnmanagedType.LPStr)] string filename, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_fitsload")]
            internal static extern int VipsFitsload([MarshalAs(UnmanagedType.LPStr)] string filename, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_fitssave")]
            internal static extern int VipsFitssave(global::System.IntPtr @in, [MarshalAs(UnmanagedType.LPStr)] string filename, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_analyzeload")]
            internal static extern int VipsAnalyzeload([MarshalAs(UnmanagedType.LPStr)] string filename, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_rawload")]
            internal static extern int VipsRawload([MarshalAs(UnmanagedType.LPStr)] string filename, global::System.IntPtr @out, int width, int height, int bands, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_rawsave")]
            internal static extern int VipsRawsave(global::System.IntPtr @in, [MarshalAs(UnmanagedType.LPStr)] string filename, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_rawsave_fd")]
            internal static extern int VipsRawsaveFd(global::System.IntPtr @in, int fd, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_csvload")]
            internal static extern int VipsCsvload([MarshalAs(UnmanagedType.LPStr)] string filename, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_csvsave")]
            internal static extern int VipsCsvsave(global::System.IntPtr @in, [MarshalAs(UnmanagedType.LPStr)] string filename, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_matrixload")]
            internal static extern int VipsMatrixload([MarshalAs(UnmanagedType.LPStr)] string filename, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_matrixsave")]
            internal static extern int VipsMatrixsave(global::System.IntPtr @in, [MarshalAs(UnmanagedType.LPStr)] string filename, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_matrixprint")]
            internal static extern int VipsMatrixprint(global::System.IntPtr @in, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_magickload")]
            internal static extern int VipsMagickload([MarshalAs(UnmanagedType.LPStr)] string filename, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_magickload_buffer")]
            internal static extern int VipsMagickloadBuffer(global::System.IntPtr buf, ulong len, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_magicksave")]
            internal static extern int VipsMagicksave(global::System.IntPtr @in, [MarshalAs(UnmanagedType.LPStr)] string filename, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_magicksave_buffer")]
            internal static extern int VipsMagicksaveBuffer(global::System.IntPtr @in, void** buf, ulong* len, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_pngload")]
            internal static extern int VipsPngload([MarshalAs(UnmanagedType.LPStr)] string filename, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_pngload_buffer")]
            internal static extern int VipsPngloadBuffer(global::System.IntPtr buf, ulong len, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_pngsave")]
            internal static extern int VipsPngsave(global::System.IntPtr @in, [MarshalAs(UnmanagedType.LPStr)] string filename, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_pngsave_buffer")]
            internal static extern int VipsPngsaveBuffer(global::System.IntPtr @in, void** buf, ulong* len, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_ppmload")]
            internal static extern int VipsPpmload([MarshalAs(UnmanagedType.LPStr)] string filename, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_ppmsave")]
            internal static extern int VipsPpmsave(global::System.IntPtr @in, [MarshalAs(UnmanagedType.LPStr)] string filename, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_matload")]
            internal static extern int VipsMatload([MarshalAs(UnmanagedType.LPStr)] string filename, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_radload")]
            internal static extern int VipsRadload([MarshalAs(UnmanagedType.LPStr)] string filename, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_radsave")]
            internal static extern int VipsRadsave(global::System.IntPtr @in, [MarshalAs(UnmanagedType.LPStr)] string filename, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_radsave_buffer")]
            internal static extern int VipsRadsaveBuffer(global::System.IntPtr @in, void** buf, ulong* len, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_pdfload")]
            internal static extern int VipsPdfload([MarshalAs(UnmanagedType.LPStr)] string filename, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_pdfload_buffer")]
            internal static extern int VipsPdfloadBuffer(global::System.IntPtr buf, ulong len, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_svgload")]
            internal static extern int VipsSvgload([MarshalAs(UnmanagedType.LPStr)] string filename, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_svgload_buffer")]
            internal static extern int VipsSvgloadBuffer(global::System.IntPtr buf, ulong len, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_gifload")]
            internal static extern int VipsGifload([MarshalAs(UnmanagedType.LPStr)] string filename, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_gifload_buffer")]
            internal static extern int VipsGifloadBuffer(global::System.IntPtr buf, ulong len, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_dzsave")]
            internal static extern int VipsDzsave(global::System.IntPtr @in, [MarshalAs(UnmanagedType.LPStr)] string name, string[] options);
        }

        public static ulong VipsForeignGetType()
        {
            var __ret = __Internal.VipsForeignGetType();
            return __ret;
        }

        public static global::System.IntPtr VipsForeignMap(string @base, global::NetVips.VipsSListMap2Fn fn, global::System.IntPtr a, global::System.IntPtr b)
        {
            var __arg1 = fn == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fn);
            var __ret = __Internal.VipsForeignMap(@base, __arg1, a, b);
            return __ret;
        }

        public static ulong VipsForeignLoadGetType()
        {
            var __ret = __Internal.VipsForeignLoadGetType();
            return __ret;
        }

        public static string VipsForeignFindLoad(string filename)
        {
            var __ret = __Internal.VipsForeignFindLoad(filename);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static string VipsForeignFindLoadBuffer(global::System.IntPtr data, ulong size)
        {
            var __ret = __Internal.VipsForeignFindLoadBuffer(data, size);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static global::NetVips.VipsForeignFlags vips_foreign_flags(string loader, string filename)
        {
            var __ret = __Internal.vips_foreign_flags(loader, filename);
            return __ret;
        }

        public static int VipsForeignIsA(string loader, string filename)
        {
            var __ret = __Internal.VipsForeignIsA(loader, filename);
            return __ret;
        }

        public static int VipsForeignIsABuffer(string loader, global::System.IntPtr data, ulong size)
        {
            var __ret = __Internal.VipsForeignIsABuffer(loader, data, size);
            return __ret;
        }

        public static void VipsForeignLoadInvalidate(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            __Internal.VipsForeignLoadInvalidate(__arg0);
        }

        public static ulong VipsForeignSaveGetType()
        {
            var __ret = __Internal.VipsForeignSaveGetType();
            return __ret;
        }

        public static string VipsForeignFindSave(string filename)
        {
            var __ret = __Internal.VipsForeignFindSave(filename);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static string VipsForeignFindSaveBuffer(string suffix)
        {
            var __ret = __Internal.VipsForeignFindSaveBuffer(suffix);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static int VipsVipsload(string filename, out global::NetVips.VipsImage @out, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsVipsload(filename, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsVipssave(global::NetVips.VipsImage @in, string filename, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            var __ret = __Internal.VipsVipssave(__arg0, filename, options);
            return __ret;
        }

        public static int VipsOpenslideload(string filename, out global::NetVips.VipsImage @out, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsOpenslideload(filename, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsJpegload(string filename, out global::NetVips.VipsImage @out, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsJpegload(filename, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsJpegloadBuffer(global::System.IntPtr buf, ulong len, out global::NetVips.VipsImage @out, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsJpegloadBuffer(buf, len, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsJpegsave(global::NetVips.VipsImage @in, string filename, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            var __ret = __Internal.VipsJpegsave(__arg0, filename, options);
            return __ret;
        }

        public static int VipsJpegsaveBuffer(global::NetVips.VipsImage @in, void** buf, ref ulong len, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            fixed (ulong* __refParamPtr2 = &len)
            {
                var __arg2 = __refParamPtr2;
                var __ret = __Internal.VipsJpegsaveBuffer(__arg0, buf, __arg2, options);
                return __ret;
            }
        }

        public static int VipsJpegsaveMime(global::NetVips.VipsImage @in, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            var __ret = __Internal.VipsJpegsaveMime(__arg0, options);
            return __ret;
        }

        public static int VipsWebpload(string filename, out global::NetVips.VipsImage @out, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsWebpload(filename, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsWebploadBuffer(global::System.IntPtr buf, ulong len, out global::NetVips.VipsImage @out, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsWebploadBuffer(buf, len, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsWebpsave(global::NetVips.VipsImage @in, string filename, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            var __ret = __Internal.VipsWebpsave(__arg0, filename, options);
            return __ret;
        }

        public static int VipsWebpsaveBuffer(global::NetVips.VipsImage @in, void** buf, ref ulong len, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            fixed (ulong* __refParamPtr2 = &len)
            {
                var __arg2 = __refParamPtr2;
                var __ret = __Internal.VipsWebpsaveBuffer(__arg0, buf, __arg2, options);
                return __ret;
            }
        }

        public static int VipsWebpsaveMime(global::NetVips.VipsImage @in, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            var __ret = __Internal.VipsWebpsaveMime(__arg0, options);
            return __ret;
        }

        public static int VipsTiffload(string filename, out global::NetVips.VipsImage @out, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsTiffload(filename, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsTiffloadBuffer(global::System.IntPtr buf, ulong len, out global::NetVips.VipsImage @out, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsTiffloadBuffer(buf, len, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsTiffsave(global::NetVips.VipsImage @in, string filename, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            var __ret = __Internal.VipsTiffsave(__arg0, filename, options);
            return __ret;
        }

        public static int VipsTiffsaveBuffer(global::NetVips.VipsImage @in, void** buf, ref ulong len, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            fixed (ulong* __refParamPtr2 = &len)
            {
                var __arg2 = __refParamPtr2;
                var __ret = __Internal.VipsTiffsaveBuffer(__arg0, buf, __arg2, options);
                return __ret;
            }
        }

        public static int VipsOpenexrload(string filename, out global::NetVips.VipsImage @out, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsOpenexrload(filename, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsFitsload(string filename, out global::NetVips.VipsImage @out, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsFitsload(filename, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsFitssave(global::NetVips.VipsImage @in, string filename, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            var __ret = __Internal.VipsFitssave(__arg0, filename, options);
            return __ret;
        }

        public static int VipsAnalyzeload(string filename, out global::NetVips.VipsImage @out, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsAnalyzeload(filename, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsRawload(string filename, out global::NetVips.VipsImage @out, int width, int height, int bands, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsRawload(filename, __arg1, width, height, bands, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsRawsave(global::NetVips.VipsImage @in, string filename, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            var __ret = __Internal.VipsRawsave(__arg0, filename, options);
            return __ret;
        }

        public static int VipsRawsaveFd(global::NetVips.VipsImage @in, int fd, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            var __ret = __Internal.VipsRawsaveFd(__arg0, fd, options);
            return __ret;
        }

        public static int VipsCsvload(string filename, out global::NetVips.VipsImage @out, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsCsvload(filename, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsCsvsave(global::NetVips.VipsImage @in, string filename, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            var __ret = __Internal.VipsCsvsave(__arg0, filename, options);
            return __ret;
        }

        public static int VipsMatrixload(string filename, out global::NetVips.VipsImage @out, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsMatrixload(filename, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsMatrixsave(global::NetVips.VipsImage @in, string filename, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            var __ret = __Internal.VipsMatrixsave(__arg0, filename, options);
            return __ret;
        }

        public static int VipsMatrixprint(global::NetVips.VipsImage @in, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            var __ret = __Internal.VipsMatrixprint(__arg0, options);
            return __ret;
        }

        public static int VipsMagickload(string filename, out global::NetVips.VipsImage @out, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsMagickload(filename, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsMagickloadBuffer(global::System.IntPtr buf, ulong len, out global::NetVips.VipsImage @out, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsMagickloadBuffer(buf, len, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsMagicksave(global::NetVips.VipsImage @in, string filename, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            var __ret = __Internal.VipsMagicksave(__arg0, filename, options);
            return __ret;
        }

        public static int VipsMagicksaveBuffer(global::NetVips.VipsImage @in, void** buf, ref ulong len, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            fixed (ulong* __refParamPtr2 = &len)
            {
                var __arg2 = __refParamPtr2;
                var __ret = __Internal.VipsMagicksaveBuffer(__arg0, buf, __arg2, options);
                return __ret;
            }
        }

        public static int VipsPngload(string filename, out global::NetVips.VipsImage @out, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsPngload(filename, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsPngloadBuffer(global::System.IntPtr buf, ulong len, out global::NetVips.VipsImage @out, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsPngloadBuffer(buf, len, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsPngsave(global::NetVips.VipsImage @in, string filename, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            var __ret = __Internal.VipsPngsave(__arg0, filename, options);
            return __ret;
        }

        public static int VipsPngsaveBuffer(global::NetVips.VipsImage @in, void** buf, ref ulong len, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            fixed (ulong* __refParamPtr2 = &len)
            {
                var __arg2 = __refParamPtr2;
                var __ret = __Internal.VipsPngsaveBuffer(__arg0, buf, __arg2, options);
                return __ret;
            }
        }

        public static int VipsPpmload(string filename, out global::NetVips.VipsImage @out, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsPpmload(filename, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsPpmsave(global::NetVips.VipsImage @in, string filename, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            var __ret = __Internal.VipsPpmsave(__arg0, filename, options);
            return __ret;
        }

        public static int VipsMatload(string filename, out global::NetVips.VipsImage @out, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsMatload(filename, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsRadload(string filename, out global::NetVips.VipsImage @out, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsRadload(filename, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsRadsave(global::NetVips.VipsImage @in, string filename, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            var __ret = __Internal.VipsRadsave(__arg0, filename, options);
            return __ret;
        }

        public static int VipsRadsaveBuffer(global::NetVips.VipsImage @in, void** buf, ref ulong len, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            fixed (ulong* __refParamPtr2 = &len)
            {
                var __arg2 = __refParamPtr2;
                var __ret = __Internal.VipsRadsaveBuffer(__arg0, buf, __arg2, options);
                return __ret;
            }
        }

        public static int VipsPdfload(string filename, out global::NetVips.VipsImage @out, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsPdfload(filename, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsPdfloadBuffer(global::System.IntPtr buf, ulong len, out global::NetVips.VipsImage @out, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsPdfloadBuffer(buf, len, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsSvgload(string filename, out global::NetVips.VipsImage @out, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsSvgload(filename, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsSvgloadBuffer(global::System.IntPtr buf, ulong len, out global::NetVips.VipsImage @out, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsSvgloadBuffer(buf, len, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsGifload(string filename, out global::NetVips.VipsImage @out, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsGifload(filename, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsGifloadBuffer(global::System.IntPtr buf, ulong len, out global::NetVips.VipsImage @out, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsGifloadBuffer(buf, len, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsDzsave(global::NetVips.VipsImage @in, string name, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            var __ret = __Internal.VipsDzsave(__arg0, name, options);
            return __ret;
        }
    }

    public unsafe partial class enumtypes
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_kernel_get_type")]
            internal static extern ulong VipsKernelGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_size_get_type")]
            internal static extern ulong VipsSizeGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_foreign_flags_get_type")]
            internal static extern ulong VipsForeignFlagsGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_saveable_get_type")]
            internal static extern ulong VipsSaveableGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_foreign_webp_preset_get_type")]
            internal static extern ulong VipsForeignWebpPresetGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_foreign_tiff_compression_get_type")]
            internal static extern ulong VipsForeignTiffCompressionGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_foreign_tiff_predictor_get_type")]
            internal static extern ulong VipsForeignTiffPredictorGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_foreign_tiff_resunit_get_type")]
            internal static extern ulong VipsForeignTiffResunitGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_foreign_png_filter_get_type")]
            internal static extern ulong VipsForeignPngFilterGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_foreign_dz_layout_get_type")]
            internal static extern ulong VipsForeignDzLayoutGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_foreign_dz_depth_get_type")]
            internal static extern ulong VipsForeignDzDepthGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_foreign_dz_container_get_type")]
            internal static extern ulong VipsForeignDzContainerGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_operation_math_get_type")]
            internal static extern ulong VipsOperationMathGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_operation_math2_get_type")]
            internal static extern ulong VipsOperationMath2GetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_operation_round_get_type")]
            internal static extern ulong VipsOperationRoundGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_operation_relational_get_type")]
            internal static extern ulong VipsOperationRelationalGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_operation_boolean_get_type")]
            internal static extern ulong VipsOperationBooleanGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_operation_complex_get_type")]
            internal static extern ulong VipsOperationComplexGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_operation_complex2_get_type")]
            internal static extern ulong VipsOperationComplex2GetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_operation_complexget_get_type")]
            internal static extern ulong VipsOperationComplexgetGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_extend_get_type")]
            internal static extern ulong VipsExtendGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_compass_direction_get_type")]
            internal static extern ulong VipsCompassDirectionGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_direction_get_type")]
            internal static extern ulong VipsDirectionGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_align_get_type")]
            internal static extern ulong VipsAlignGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_angle_get_type")]
            internal static extern ulong VipsAngleGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_angle45_get_type")]
            internal static extern ulong VipsAngle45GetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_interesting_get_type")]
            internal static extern ulong VipsInterestingGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_blend_mode_get_type")]
            internal static extern ulong VipsBlendModeGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_token_get_type")]
            internal static extern ulong VipsTokenGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_demand_style_get_type")]
            internal static extern ulong VipsDemandStyleGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_type_get_type")]
            internal static extern ulong VipsImageTypeGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_interpretation_get_type")]
            internal static extern ulong VipsInterpretationGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_band_format_get_type")]
            internal static extern ulong VipsBandFormatGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_coding_get_type")]
            internal static extern ulong VipsCodingGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_access_get_type")]
            internal static extern ulong VipsAccessGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_intent_get_type")]
            internal static extern ulong VipsIntentGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_pcs_get_type")]
            internal static extern ulong VipsPcsGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_operation_flags_get_type")]
            internal static extern ulong VipsOperationFlagsGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_combine_get_type")]
            internal static extern ulong VipsCombineGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_operation_morphology_get_type")]
            internal static extern ulong VipsOperationMorphologyGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_combine_mode_get_type")]
            internal static extern ulong VipsCombineModeGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_precision_get_type")]
            internal static extern ulong VipsPrecisionGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_argument_flags_get_type")]
            internal static extern ulong VipsArgumentFlagsGetType();
        }

        public static ulong VipsKernelGetType()
        {
            var __ret = __Internal.VipsKernelGetType();
            return __ret;
        }

        public static ulong VipsSizeGetType()
        {
            var __ret = __Internal.VipsSizeGetType();
            return __ret;
        }

        public static ulong VipsForeignFlagsGetType()
        {
            var __ret = __Internal.VipsForeignFlagsGetType();
            return __ret;
        }

        public static ulong VipsSaveableGetType()
        {
            var __ret = __Internal.VipsSaveableGetType();
            return __ret;
        }

        public static ulong VipsForeignWebpPresetGetType()
        {
            var __ret = __Internal.VipsForeignWebpPresetGetType();
            return __ret;
        }

        public static ulong VipsForeignTiffCompressionGetType()
        {
            var __ret = __Internal.VipsForeignTiffCompressionGetType();
            return __ret;
        }

        public static ulong VipsForeignTiffPredictorGetType()
        {
            var __ret = __Internal.VipsForeignTiffPredictorGetType();
            return __ret;
        }

        public static ulong VipsForeignTiffResunitGetType()
        {
            var __ret = __Internal.VipsForeignTiffResunitGetType();
            return __ret;
        }

        public static ulong VipsForeignPngFilterGetType()
        {
            var __ret = __Internal.VipsForeignPngFilterGetType();
            return __ret;
        }

        public static ulong VipsForeignDzLayoutGetType()
        {
            var __ret = __Internal.VipsForeignDzLayoutGetType();
            return __ret;
        }

        public static ulong VipsForeignDzDepthGetType()
        {
            var __ret = __Internal.VipsForeignDzDepthGetType();
            return __ret;
        }

        public static ulong VipsForeignDzContainerGetType()
        {
            var __ret = __Internal.VipsForeignDzContainerGetType();
            return __ret;
        }

        public static ulong VipsOperationMathGetType()
        {
            var __ret = __Internal.VipsOperationMathGetType();
            return __ret;
        }

        public static ulong VipsOperationMath2GetType()
        {
            var __ret = __Internal.VipsOperationMath2GetType();
            return __ret;
        }

        public static ulong VipsOperationRoundGetType()
        {
            var __ret = __Internal.VipsOperationRoundGetType();
            return __ret;
        }

        public static ulong VipsOperationRelationalGetType()
        {
            var __ret = __Internal.VipsOperationRelationalGetType();
            return __ret;
        }

        public static ulong VipsOperationBooleanGetType()
        {
            var __ret = __Internal.VipsOperationBooleanGetType();
            return __ret;
        }

        public static ulong VipsOperationComplexGetType()
        {
            var __ret = __Internal.VipsOperationComplexGetType();
            return __ret;
        }

        public static ulong VipsOperationComplex2GetType()
        {
            var __ret = __Internal.VipsOperationComplex2GetType();
            return __ret;
        }

        public static ulong VipsOperationComplexgetGetType()
        {
            var __ret = __Internal.VipsOperationComplexgetGetType();
            return __ret;
        }

        public static ulong VipsExtendGetType()
        {
            var __ret = __Internal.VipsExtendGetType();
            return __ret;
        }

        public static ulong VipsCompassDirectionGetType()
        {
            var __ret = __Internal.VipsCompassDirectionGetType();
            return __ret;
        }

        public static ulong VipsDirectionGetType()
        {
            var __ret = __Internal.VipsDirectionGetType();
            return __ret;
        }

        public static ulong VipsAlignGetType()
        {
            var __ret = __Internal.VipsAlignGetType();
            return __ret;
        }

        public static ulong VipsAngleGetType()
        {
            var __ret = __Internal.VipsAngleGetType();
            return __ret;
        }

        public static ulong VipsAngle45GetType()
        {
            var __ret = __Internal.VipsAngle45GetType();
            return __ret;
        }

        public static ulong VipsInterestingGetType()
        {
            var __ret = __Internal.VipsInterestingGetType();
            return __ret;
        }

        public static ulong VipsBlendModeGetType()
        {
            var __ret = __Internal.VipsBlendModeGetType();
            return __ret;
        }

        public static ulong VipsTokenGetType()
        {
            var __ret = __Internal.VipsTokenGetType();
            return __ret;
        }

        public static ulong VipsDemandStyleGetType()
        {
            var __ret = __Internal.VipsDemandStyleGetType();
            return __ret;
        }

        public static ulong VipsImageTypeGetType()
        {
            var __ret = __Internal.VipsImageTypeGetType();
            return __ret;
        }

        public static ulong VipsInterpretationGetType()
        {
            var __ret = __Internal.VipsInterpretationGetType();
            return __ret;
        }

        public static ulong VipsBandFormatGetType()
        {
            var __ret = __Internal.VipsBandFormatGetType();
            return __ret;
        }

        public static ulong VipsCodingGetType()
        {
            var __ret = __Internal.VipsCodingGetType();
            return __ret;
        }

        public static ulong VipsAccessGetType()
        {
            var __ret = __Internal.VipsAccessGetType();
            return __ret;
        }

        public static ulong VipsIntentGetType()
        {
            var __ret = __Internal.VipsIntentGetType();
            return __ret;
        }

        public static ulong VipsPcsGetType()
        {
            var __ret = __Internal.VipsPcsGetType();
            return __ret;
        }

        public static ulong VipsOperationFlagsGetType()
        {
            var __ret = __Internal.VipsOperationFlagsGetType();
            return __ret;
        }

        public static ulong VipsCombineGetType()
        {
            var __ret = __Internal.VipsCombineGetType();
            return __ret;
        }

        public static ulong VipsOperationMorphologyGetType()
        {
            var __ret = __Internal.VipsOperationMorphologyGetType();
            return __ret;
        }

        public static ulong VipsCombineModeGetType()
        {
            var __ret = __Internal.VipsCombineModeGetType();
            return __ret;
        }

        public static ulong VipsPrecisionGetType()
        {
            var __ret = __Internal.VipsPrecisionGetType();
            return __ret;
        }

        public static ulong VipsArgumentFlagsGetType()
        {
            var __ret = __Internal.VipsArgumentFlagsGetType();
            return __ret;
        }
    }

    /// <summary>
    /// <para>VipsOperationMath:</para>
    /// <para>sin(), angles in degrees</para>
    /// <para>cos(), angles in degrees</para>
    /// <para>tan(), angles in degrees</para>
    /// <para>asin(), angles in degrees</para>
    /// <para>acos(), angles in degrees</para>
    /// <para>atan(), angles in degrees</para>
    /// <para>log base e</para>
    /// <para>log base 10</para>
    /// <para>e to the something</para>
    /// <para>10 to the something</para>
    /// </summary>
    /// <remarks>See also: vips_math().</remarks>
    public enum VipsOperationMath
    {
        VIPS_OPERATION_MATH_SIN = 0,
        VIPS_OPERATION_MATH_COS = 1,
        VIPS_OPERATION_MATH_TAN = 2,
        VIPS_OPERATION_MATH_ASIN = 3,
        VIPS_OPERATION_MATH_ACOS = 4,
        VIPS_OPERATION_MATH_ATAN = 5,
        VIPS_OPERATION_MATH_LOG = 6,
        VIPS_OPERATION_MATH_LOG10 = 7,
        VIPS_OPERATION_MATH_EXP = 8,
        VIPS_OPERATION_MATH_EXP10 = 9,
        VIPS_OPERATION_MATH_LAST = 10
    }

    /// <summary>
    /// <para>VipsOperationMath2:</para>
    /// <para>pow( left, right )</para>
    /// <para>pow( right, left )</para>
    /// </summary>
    /// <remarks>See also: vips_math().</remarks>
    public enum VipsOperationMath2
    {
        VIPS_OPERATION_MATH2POW = 0,
        VIPS_OPERATION_MATH2WOP = 1,
        VIPS_OPERATION_MATH2LAST = 2
    }

    /// <summary>
    /// <para>VipsOperationRound:</para>
    /// <para>round to nearest</para>
    /// <para>largest integral value not greater than</para>
    /// <para>the smallest integral value not less than</para>
    /// </summary>
    /// <remarks>See also: vips_round().</remarks>
    public enum VipsOperationRound
    {
        VIPS_OPERATION_ROUND_RINT = 0,
        VIPS_OPERATION_ROUND_CEIL = 1,
        VIPS_OPERATION_ROUND_FLOOR = 2,
        VIPS_OPERATION_ROUND_LAST = 3
    }

    /// <summary>
    /// <para>VipsOperationRelational:</para>
    /// <para>==</para>
    /// <para>!=</para>
    /// <para>&lt;&gt;</para>
    /// <para>&lt;&gt;=</para>
    /// <para>&gt;</para>
    /// <para>&gt;=</para>
    /// </summary>
    /// <remarks>See also: vips_relational().</remarks>
    public enum VipsOperationRelational
    {
        VIPS_OPERATION_RELATIONAL_EQUAL = 0,
        VIPS_OPERATION_RELATIONAL_NOTEQ = 1,
        VIPS_OPERATION_RELATIONAL_LESS = 2,
        VIPS_OPERATION_RELATIONAL_LESSEQ = 3,
        VIPS_OPERATION_RELATIONAL_MORE = 4,
        VIPS_OPERATION_RELATIONAL_MOREEQ = 5,
        VIPS_OPERATION_RELATIONAL_LAST = 6
    }

    /// <summary>
    /// <para>VipsOperationBoolean:</para>
    /// <para>&amp;</para>
    /// <para>|</para>
    /// <para>^</para>
    /// <para>&gt;&gt;</para>
    /// <para>&lt;&gt;&lt;&gt;</para>
    /// </summary>
    /// <remarks>See also: vips_boolean().</remarks>
    public enum VipsOperationBoolean
    {
        VIPS_OPERATION_BOOLEAN_AND = 0,
        VIPS_OPERATION_BOOLEAN_OR = 1,
        VIPS_OPERATION_BOOLEAN_EOR = 2,
        VIPS_OPERATION_BOOLEAN_LSHIFT = 3,
        VIPS_OPERATION_BOOLEAN_RSHIFT = 4,
        VIPS_OPERATION_BOOLEAN_LAST = 5
    }

    /// <summary>
    /// <para>VipsOperationComplex:</para>
    /// <para>convert to polar coordinates</para>
    /// <para>convert to rectangular coordinates</para>
    /// <para>complex conjugate</para>
    /// </summary>
    /// <remarks>See also: vips_complex().</remarks>
    public enum VipsOperationComplex
    {
        VIPS_OPERATION_COMPLEX_POLAR = 0,
        VIPS_OPERATION_COMPLEX_RECT = 1,
        VIPS_OPERATION_COMPLEX_CONJ = 2,
        VIPS_OPERATION_COMPLEX_LAST = 3
    }

    /// <summary>
    /// <para>VipsOperationComplex2:</para>
    /// <para>convert to polar coordinates</para>
    /// </summary>
    /// <remarks>See also: vips_complex2().</remarks>
    public enum VipsOperationComplex2
    {
        VIPS_OPERATION_COMPLEX2CROSS_PHASE = 0,
        VIPS_OPERATION_COMPLEX2LAST = 1
    }

    /// <summary>
    /// <para>VipsOperationComplexget:</para>
    /// <para>get real component</para>
    /// <para>get imaginary component</para>
    /// </summary>
    /// <remarks>See also: vips_complexget().</remarks>
    public enum VipsOperationComplexget
    {
        VIPS_OPERATION_COMPLEXGET_REAL = 0,
        VIPS_OPERATION_COMPLEXGET_IMAG = 1,
        VIPS_OPERATION_COMPLEXGET_LAST = 2
    }

    public unsafe partial class arithmetic
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_add")]
            internal static extern int VipsAdd(global::System.IntPtr left, global::System.IntPtr right, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_sum")]
            internal static extern int VipsSum(global::System.IntPtr @in, global::System.IntPtr @out, int n, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_subtract")]
            internal static extern int VipsSubtract(global::System.IntPtr in1, global::System.IntPtr in2, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_multiply")]
            internal static extern int VipsMultiply(global::System.IntPtr left, global::System.IntPtr right, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_divide")]
            internal static extern int VipsDivide(global::System.IntPtr left, global::System.IntPtr right, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_linear")]
            internal static extern int VipsLinear(global::System.IntPtr @in, global::System.IntPtr @out, double* a, double* b, int n, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_linear1")]
            internal static extern int VipsLinear1(global::System.IntPtr @in, global::System.IntPtr @out, double a, double b, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_remainder")]
            internal static extern int VipsRemainder(global::System.IntPtr left, global::System.IntPtr right, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_remainder_const")]
            internal static extern int VipsRemainderConst(global::System.IntPtr @in, global::System.IntPtr @out, double* c, int n, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_remainder_const1")]
            internal static extern int VipsRemainderConst1(global::System.IntPtr @in, global::System.IntPtr @out, double c, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_invert")]
            internal static extern int VipsInvert(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_abs")]
            internal static extern int VipsAbs(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_sign")]
            internal static extern int VipsSign(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_round")]
            internal static extern int VipsRound(global::System.IntPtr @in, global::System.IntPtr @out, global::NetVips.VipsOperationRound round, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_floor")]
            internal static extern int VipsFloor(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_ceil")]
            internal static extern int VipsCeil(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_rint")]
            internal static extern int VipsRint(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_math")]
            internal static extern int VipsMath(global::System.IntPtr @in, global::System.IntPtr @out, global::NetVips.VipsOperationMath math, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_sin")]
            internal static extern int VipsSin(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_cos")]
            internal static extern int VipsCos(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_tan")]
            internal static extern int VipsTan(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_asin")]
            internal static extern int VipsAsin(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_acos")]
            internal static extern int VipsAcos(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_atan")]
            internal static extern int VipsAtan(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_exp")]
            internal static extern int VipsExp(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_exp10")]
            internal static extern int VipsExp10(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_log")]
            internal static extern int VipsLog(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_log10")]
            internal static extern int VipsLog10(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_complex")]
            internal static extern int VipsComplex(global::System.IntPtr @in, global::System.IntPtr @out, global::NetVips.VipsOperationComplex cmplx, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_polar")]
            internal static extern int VipsPolar(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_rect")]
            internal static extern int VipsRect(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_conj")]
            internal static extern int VipsConj(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_complex2")]
            internal static extern int VipsComplex2(global::System.IntPtr left, global::System.IntPtr right, global::System.IntPtr @out, global::NetVips.VipsOperationComplex2 cmplx, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_cross_phase")]
            internal static extern int VipsCrossPhase(global::System.IntPtr left, global::System.IntPtr right, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_complexget")]
            internal static extern int VipsComplexget(global::System.IntPtr @in, global::System.IntPtr @out, global::NetVips.VipsOperationComplexget get, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_real")]
            internal static extern int VipsReal(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_imag")]
            internal static extern int VipsImag(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_complexform")]
            internal static extern int VipsComplexform(global::System.IntPtr left, global::System.IntPtr right, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_relational")]
            internal static extern int VipsRelational(global::System.IntPtr left, global::System.IntPtr right, global::System.IntPtr @out, global::NetVips.VipsOperationRelational relational, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_equal")]
            internal static extern int VipsEqual(global::System.IntPtr left, global::System.IntPtr right, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_notequal")]
            internal static extern int VipsNotequal(global::System.IntPtr left, global::System.IntPtr right, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_less")]
            internal static extern int VipsLess(global::System.IntPtr left, global::System.IntPtr right, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_lesseq")]
            internal static extern int VipsLesseq(global::System.IntPtr left, global::System.IntPtr right, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_more")]
            internal static extern int VipsMore(global::System.IntPtr left, global::System.IntPtr right, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_moreeq")]
            internal static extern int VipsMoreeq(global::System.IntPtr left, global::System.IntPtr right, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_relational_const")]
            internal static extern int VipsRelationalConst(global::System.IntPtr @in, global::System.IntPtr @out, global::NetVips.VipsOperationRelational relational, double* c, int n, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_equal_const")]
            internal static extern int VipsEqualConst(global::System.IntPtr @in, global::System.IntPtr @out, double* c, int n, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_notequal_const")]
            internal static extern int VipsNotequalConst(global::System.IntPtr @in, global::System.IntPtr @out, double* c, int n, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_less_const")]
            internal static extern int VipsLessConst(global::System.IntPtr @in, global::System.IntPtr @out, double* c, int n, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_lesseq_const")]
            internal static extern int VipsLesseqConst(global::System.IntPtr @in, global::System.IntPtr @out, double* c, int n, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_more_const")]
            internal static extern int VipsMoreConst(global::System.IntPtr @in, global::System.IntPtr @out, double* c, int n, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_moreeq_const")]
            internal static extern int VipsMoreeqConst(global::System.IntPtr @in, global::System.IntPtr @out, double* c, int n, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_relational_const1")]
            internal static extern int VipsRelationalConst1(global::System.IntPtr @in, global::System.IntPtr @out, global::NetVips.VipsOperationRelational relational, double c, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_equal_const1")]
            internal static extern int VipsEqualConst1(global::System.IntPtr @in, global::System.IntPtr @out, double c, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_notequal_const1")]
            internal static extern int VipsNotequalConst1(global::System.IntPtr @in, global::System.IntPtr @out, double c, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_less_const1")]
            internal static extern int VipsLessConst1(global::System.IntPtr @in, global::System.IntPtr @out, double c, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_lesseq_const1")]
            internal static extern int VipsLesseqConst1(global::System.IntPtr @in, global::System.IntPtr @out, double c, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_more_const1")]
            internal static extern int VipsMoreConst1(global::System.IntPtr @in, global::System.IntPtr @out, double c, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_moreeq_const1")]
            internal static extern int VipsMoreeqConst1(global::System.IntPtr @in, global::System.IntPtr @out, double c, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_boolean")]
            internal static extern int VipsBoolean(global::System.IntPtr left, global::System.IntPtr right, global::System.IntPtr @out, global::NetVips.VipsOperationBoolean boolean, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_andimage")]
            internal static extern int VipsAndimage(global::System.IntPtr left, global::System.IntPtr right, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_orimage")]
            internal static extern int VipsOrimage(global::System.IntPtr left, global::System.IntPtr right, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_eorimage")]
            internal static extern int VipsEorimage(global::System.IntPtr left, global::System.IntPtr right, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_lshift")]
            internal static extern int VipsLshift(global::System.IntPtr left, global::System.IntPtr right, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_rshift")]
            internal static extern int VipsRshift(global::System.IntPtr left, global::System.IntPtr right, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_boolean_const")]
            internal static extern int VipsBooleanConst(global::System.IntPtr @in, global::System.IntPtr @out, global::NetVips.VipsOperationBoolean boolean, double* c, int n, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_andimage_const")]
            internal static extern int VipsAndimageConst(global::System.IntPtr @in, global::System.IntPtr @out, double* c, int n, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_orimage_const")]
            internal static extern int VipsOrimageConst(global::System.IntPtr @in, global::System.IntPtr @out, double* c, int n, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_eorimage_const")]
            internal static extern int VipsEorimageConst(global::System.IntPtr @in, global::System.IntPtr @out, double* c, int n, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_lshift_const")]
            internal static extern int VipsLshiftConst(global::System.IntPtr @in, global::System.IntPtr @out, double* c, int n, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_rshift_const")]
            internal static extern int VipsRshiftConst(global::System.IntPtr @in, global::System.IntPtr @out, double* c, int n, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_boolean_const1")]
            internal static extern int VipsBooleanConst1(global::System.IntPtr @in, global::System.IntPtr @out, global::NetVips.VipsOperationBoolean boolean, double c, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_andimage_const1")]
            internal static extern int VipsAndimageConst1(global::System.IntPtr @in, global::System.IntPtr @out, double c, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_orimage_const1")]
            internal static extern int VipsOrimageConst1(global::System.IntPtr @in, global::System.IntPtr @out, double c, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_eorimage_const1")]
            internal static extern int VipsEorimageConst1(global::System.IntPtr @in, global::System.IntPtr @out, double c, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_lshift_const1")]
            internal static extern int VipsLshiftConst1(global::System.IntPtr @in, global::System.IntPtr @out, double c, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_rshift_const1")]
            internal static extern int VipsRshiftConst1(global::System.IntPtr @in, global::System.IntPtr @out, double c, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_math2")]
            internal static extern int VipsMath2(global::System.IntPtr left, global::System.IntPtr right, global::System.IntPtr @out, global::NetVips.VipsOperationMath2 math2, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_pow")]
            internal static extern int VipsPow(global::System.IntPtr left, global::System.IntPtr right, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_wop")]
            internal static extern int VipsWop(global::System.IntPtr left, global::System.IntPtr right, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_math2_const")]
            internal static extern int VipsMath2Const(global::System.IntPtr @in, global::System.IntPtr @out, global::NetVips.VipsOperationMath2 math2, double* c, int n, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_pow_const")]
            internal static extern int VipsPowConst(global::System.IntPtr @in, global::System.IntPtr @out, double* c, int n, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_wop_const")]
            internal static extern int VipsWopConst(global::System.IntPtr @in, global::System.IntPtr @out, double* c, int n, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_math2_const1")]
            internal static extern int VipsMath2Const1(global::System.IntPtr @in, global::System.IntPtr @out, global::NetVips.VipsOperationMath2 math2, double c, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_pow_const1")]
            internal static extern int VipsPowConst1(global::System.IntPtr @in, global::System.IntPtr @out, double c, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_wop_const1")]
            internal static extern int VipsWopConst1(global::System.IntPtr @in, global::System.IntPtr @out, double c, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_avg")]
            internal static extern int VipsAvg(global::System.IntPtr @in, double* @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_deviate")]
            internal static extern int VipsDeviate(global::System.IntPtr @in, double* @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_min")]
            internal static extern int VipsMin(global::System.IntPtr @in, double* @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_max")]
            internal static extern int VipsMax(global::System.IntPtr @in, double* @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_stats")]
            internal static extern int VipsStats(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_measure")]
            internal static extern int VipsMeasure(global::System.IntPtr @in, global::System.IntPtr @out, int h, int v, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_find_trim")]
            internal static extern int VipsFindTrim(global::System.IntPtr @in, int* left, int* top, int* width, int* height, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_getpoint")]
            internal static extern int VipsGetpoint(global::System.IntPtr @in, double** vector, int* n, int x, int y, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_hist_find")]
            internal static extern int VipsHistFind(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_hist_find_ndim")]
            internal static extern int VipsHistFindNdim(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_hist_find_indexed")]
            internal static extern int VipsHistFindIndexed(global::System.IntPtr @in, global::System.IntPtr index, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_hough_line")]
            internal static extern int VipsHoughLine(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_hough_circle")]
            internal static extern int VipsHoughCircle(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_project")]
            internal static extern int VipsProject(global::System.IntPtr @in, global::System.IntPtr columns, global::System.IntPtr rows, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_profile")]
            internal static extern int VipsProfile(global::System.IntPtr @in, global::System.IntPtr columns, global::System.IntPtr rows, string[] options);
        }

        public static int VipsAdd(global::NetVips.VipsImage left, global::NetVips.VipsImage right, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(left, null) ? global::System.IntPtr.Zero : left.__Instance;
            var __arg1 = ReferenceEquals(right, null) ? global::System.IntPtr.Zero : right.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsAdd(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsSum(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, int n, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsSum(__arg0, __arg1, n, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsSubtract(global::NetVips.VipsImage in1, global::NetVips.VipsImage in2, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(in1, null) ? global::System.IntPtr.Zero : in1.__Instance;
            var __arg1 = ReferenceEquals(in2, null) ? global::System.IntPtr.Zero : in2.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsSubtract(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsMultiply(global::NetVips.VipsImage left, global::NetVips.VipsImage right, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(left, null) ? global::System.IntPtr.Zero : left.__Instance;
            var __arg1 = ReferenceEquals(right, null) ? global::System.IntPtr.Zero : right.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsMultiply(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsDivide(global::NetVips.VipsImage left, global::NetVips.VipsImage right, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(left, null) ? global::System.IntPtr.Zero : left.__Instance;
            var __arg1 = ReferenceEquals(right, null) ? global::System.IntPtr.Zero : right.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsDivide(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsLinear(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, ref double a, ref double b, int n, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            fixed (double* __refParamPtr2 = &a)
            {
                var __arg2 = __refParamPtr2;
                fixed (double* __refParamPtr3 = &b)
                {
                    var __arg3 = __refParamPtr3;
                    var __ret = __Internal.VipsLinear(__arg0, __arg1, __arg2, __arg3, n, options);
                    global::NetVips.VipsImage __result0;
                    if (__arg1 == IntPtr.Zero) __result0 = null;
                    else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                        __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
                    else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
                    @out = __result0;
                    return __ret;
                }
            }
        }

        public static int VipsLinear1(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, double a, double b, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsLinear1(__arg0, __arg1, a, b, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsRemainder(global::NetVips.VipsImage left, global::NetVips.VipsImage right, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(left, null) ? global::System.IntPtr.Zero : left.__Instance;
            var __arg1 = ReferenceEquals(right, null) ? global::System.IntPtr.Zero : right.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsRemainder(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsRemainderConst(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, ref double c, int n, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            fixed (double* __refParamPtr2 = &c)
            {
                var __arg2 = __refParamPtr2;
                var __ret = __Internal.VipsRemainderConst(__arg0, __arg1, __arg2, n, options);
                global::NetVips.VipsImage __result0;
                if (__arg1 == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                    __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
                else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
                @out = __result0;
                return __ret;
            }
        }

        public static int VipsRemainderConst1(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, double c, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsRemainderConst1(__arg0, __arg1, c, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsInvert(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsInvert(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsAbs(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsAbs(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsSign(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsSign(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsRound(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, global::NetVips.VipsOperationRound round, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsRound(__arg0, __arg1, round, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsFloor(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsFloor(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsCeil(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsCeil(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsRint(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsRint(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsMath(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, global::NetVips.VipsOperationMath math, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsMath(__arg0, __arg1, math, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsSin(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsSin(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsCos(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsCos(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsTan(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsTan(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsAsin(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsAsin(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsAcos(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsAcos(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsAtan(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsAtan(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsExp(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsExp(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsExp10(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsExp10(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsLog(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsLog(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsLog10(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsLog10(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsComplex(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, global::NetVips.VipsOperationComplex cmplx, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsComplex(__arg0, __arg1, cmplx, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsPolar(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsPolar(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsRect(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsRect(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsConj(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsConj(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsComplex2(global::NetVips.VipsImage left, global::NetVips.VipsImage right, out global::NetVips.VipsImage @out, global::NetVips.VipsOperationComplex2 cmplx, string[] options = null)
        {
            var __arg0 = ReferenceEquals(left, null) ? global::System.IntPtr.Zero : left.__Instance;
            var __arg1 = ReferenceEquals(right, null) ? global::System.IntPtr.Zero : right.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsComplex2(__arg0, __arg1, __arg2, cmplx, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsCrossPhase(global::NetVips.VipsImage left, global::NetVips.VipsImage right, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(left, null) ? global::System.IntPtr.Zero : left.__Instance;
            var __arg1 = ReferenceEquals(right, null) ? global::System.IntPtr.Zero : right.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsCrossPhase(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsComplexget(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, global::NetVips.VipsOperationComplexget get, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsComplexget(__arg0, __arg1, get, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsReal(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsReal(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsImag(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsImag(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsComplexform(global::NetVips.VipsImage left, global::NetVips.VipsImage right, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(left, null) ? global::System.IntPtr.Zero : left.__Instance;
            var __arg1 = ReferenceEquals(right, null) ? global::System.IntPtr.Zero : right.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsComplexform(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsRelational(global::NetVips.VipsImage left, global::NetVips.VipsImage right, out global::NetVips.VipsImage @out, global::NetVips.VipsOperationRelational relational, string[] options = null)
        {
            var __arg0 = ReferenceEquals(left, null) ? global::System.IntPtr.Zero : left.__Instance;
            var __arg1 = ReferenceEquals(right, null) ? global::System.IntPtr.Zero : right.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsRelational(__arg0, __arg1, __arg2, relational, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsEqual(global::NetVips.VipsImage left, global::NetVips.VipsImage right, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(left, null) ? global::System.IntPtr.Zero : left.__Instance;
            var __arg1 = ReferenceEquals(right, null) ? global::System.IntPtr.Zero : right.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsEqual(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsNotequal(global::NetVips.VipsImage left, global::NetVips.VipsImage right, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(left, null) ? global::System.IntPtr.Zero : left.__Instance;
            var __arg1 = ReferenceEquals(right, null) ? global::System.IntPtr.Zero : right.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsNotequal(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsLess(global::NetVips.VipsImage left, global::NetVips.VipsImage right, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(left, null) ? global::System.IntPtr.Zero : left.__Instance;
            var __arg1 = ReferenceEquals(right, null) ? global::System.IntPtr.Zero : right.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsLess(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsLesseq(global::NetVips.VipsImage left, global::NetVips.VipsImage right, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(left, null) ? global::System.IntPtr.Zero : left.__Instance;
            var __arg1 = ReferenceEquals(right, null) ? global::System.IntPtr.Zero : right.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsLesseq(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsMore(global::NetVips.VipsImage left, global::NetVips.VipsImage right, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(left, null) ? global::System.IntPtr.Zero : left.__Instance;
            var __arg1 = ReferenceEquals(right, null) ? global::System.IntPtr.Zero : right.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsMore(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsMoreeq(global::NetVips.VipsImage left, global::NetVips.VipsImage right, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(left, null) ? global::System.IntPtr.Zero : left.__Instance;
            var __arg1 = ReferenceEquals(right, null) ? global::System.IntPtr.Zero : right.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsMoreeq(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsRelationalConst(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, global::NetVips.VipsOperationRelational relational, ref double c, int n, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            fixed (double* __refParamPtr3 = &c)
            {
                var __arg3 = __refParamPtr3;
                var __ret = __Internal.VipsRelationalConst(__arg0, __arg1, relational, __arg3, n, options);
                global::NetVips.VipsImage __result0;
                if (__arg1 == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                    __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
                else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
                @out = __result0;
                return __ret;
            }
        }

        public static int VipsEqualConst(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, ref double c, int n, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            fixed (double* __refParamPtr2 = &c)
            {
                var __arg2 = __refParamPtr2;
                var __ret = __Internal.VipsEqualConst(__arg0, __arg1, __arg2, n, options);
                global::NetVips.VipsImage __result0;
                if (__arg1 == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                    __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
                else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
                @out = __result0;
                return __ret;
            }
        }

        public static int VipsNotequalConst(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, ref double c, int n, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            fixed (double* __refParamPtr2 = &c)
            {
                var __arg2 = __refParamPtr2;
                var __ret = __Internal.VipsNotequalConst(__arg0, __arg1, __arg2, n, options);
                global::NetVips.VipsImage __result0;
                if (__arg1 == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                    __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
                else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
                @out = __result0;
                return __ret;
            }
        }

        public static int VipsLessConst(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, ref double c, int n, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            fixed (double* __refParamPtr2 = &c)
            {
                var __arg2 = __refParamPtr2;
                var __ret = __Internal.VipsLessConst(__arg0, __arg1, __arg2, n, options);
                global::NetVips.VipsImage __result0;
                if (__arg1 == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                    __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
                else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
                @out = __result0;
                return __ret;
            }
        }

        public static int VipsLesseqConst(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, ref double c, int n, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            fixed (double* __refParamPtr2 = &c)
            {
                var __arg2 = __refParamPtr2;
                var __ret = __Internal.VipsLesseqConst(__arg0, __arg1, __arg2, n, options);
                global::NetVips.VipsImage __result0;
                if (__arg1 == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                    __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
                else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
                @out = __result0;
                return __ret;
            }
        }

        public static int VipsMoreConst(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, ref double c, int n, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            fixed (double* __refParamPtr2 = &c)
            {
                var __arg2 = __refParamPtr2;
                var __ret = __Internal.VipsMoreConst(__arg0, __arg1, __arg2, n, options);
                global::NetVips.VipsImage __result0;
                if (__arg1 == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                    __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
                else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
                @out = __result0;
                return __ret;
            }
        }

        public static int VipsMoreeqConst(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, ref double c, int n, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            fixed (double* __refParamPtr2 = &c)
            {
                var __arg2 = __refParamPtr2;
                var __ret = __Internal.VipsMoreeqConst(__arg0, __arg1, __arg2, n, options);
                global::NetVips.VipsImage __result0;
                if (__arg1 == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                    __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
                else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
                @out = __result0;
                return __ret;
            }
        }

        public static int VipsRelationalConst1(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, global::NetVips.VipsOperationRelational relational, double c, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsRelationalConst1(__arg0, __arg1, relational, c, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsEqualConst1(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, double c, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsEqualConst1(__arg0, __arg1, c, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsNotequalConst1(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, double c, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsNotequalConst1(__arg0, __arg1, c, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsLessConst1(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, double c, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsLessConst1(__arg0, __arg1, c, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsLesseqConst1(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, double c, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsLesseqConst1(__arg0, __arg1, c, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsMoreConst1(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, double c, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsMoreConst1(__arg0, __arg1, c, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsMoreeqConst1(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, double c, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsMoreeqConst1(__arg0, __arg1, c, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsBoolean(global::NetVips.VipsImage left, global::NetVips.VipsImage right, out global::NetVips.VipsImage @out, global::NetVips.VipsOperationBoolean boolean, string[] options = null)
        {
            var __arg0 = ReferenceEquals(left, null) ? global::System.IntPtr.Zero : left.__Instance;
            var __arg1 = ReferenceEquals(right, null) ? global::System.IntPtr.Zero : right.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsBoolean(__arg0, __arg1, __arg2, boolean, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsAndimage(global::NetVips.VipsImage left, global::NetVips.VipsImage right, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(left, null) ? global::System.IntPtr.Zero : left.__Instance;
            var __arg1 = ReferenceEquals(right, null) ? global::System.IntPtr.Zero : right.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsAndimage(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsOrimage(global::NetVips.VipsImage left, global::NetVips.VipsImage right, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(left, null) ? global::System.IntPtr.Zero : left.__Instance;
            var __arg1 = ReferenceEquals(right, null) ? global::System.IntPtr.Zero : right.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsOrimage(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsEorimage(global::NetVips.VipsImage left, global::NetVips.VipsImage right, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(left, null) ? global::System.IntPtr.Zero : left.__Instance;
            var __arg1 = ReferenceEquals(right, null) ? global::System.IntPtr.Zero : right.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsEorimage(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsLshift(global::NetVips.VipsImage left, global::NetVips.VipsImage right, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(left, null) ? global::System.IntPtr.Zero : left.__Instance;
            var __arg1 = ReferenceEquals(right, null) ? global::System.IntPtr.Zero : right.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsLshift(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsRshift(global::NetVips.VipsImage left, global::NetVips.VipsImage right, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(left, null) ? global::System.IntPtr.Zero : left.__Instance;
            var __arg1 = ReferenceEquals(right, null) ? global::System.IntPtr.Zero : right.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsRshift(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsBooleanConst(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, global::NetVips.VipsOperationBoolean boolean, ref double c, int n, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            fixed (double* __refParamPtr3 = &c)
            {
                var __arg3 = __refParamPtr3;
                var __ret = __Internal.VipsBooleanConst(__arg0, __arg1, boolean, __arg3, n, options);
                global::NetVips.VipsImage __result0;
                if (__arg1 == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                    __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
                else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
                @out = __result0;
                return __ret;
            }
        }

        public static int VipsAndimageConst(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, ref double c, int n, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            fixed (double* __refParamPtr2 = &c)
            {
                var __arg2 = __refParamPtr2;
                var __ret = __Internal.VipsAndimageConst(__arg0, __arg1, __arg2, n, options);
                global::NetVips.VipsImage __result0;
                if (__arg1 == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                    __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
                else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
                @out = __result0;
                return __ret;
            }
        }

        public static int VipsOrimageConst(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, ref double c, int n, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            fixed (double* __refParamPtr2 = &c)
            {
                var __arg2 = __refParamPtr2;
                var __ret = __Internal.VipsOrimageConst(__arg0, __arg1, __arg2, n, options);
                global::NetVips.VipsImage __result0;
                if (__arg1 == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                    __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
                else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
                @out = __result0;
                return __ret;
            }
        }

        public static int VipsEorimageConst(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, ref double c, int n, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            fixed (double* __refParamPtr2 = &c)
            {
                var __arg2 = __refParamPtr2;
                var __ret = __Internal.VipsEorimageConst(__arg0, __arg1, __arg2, n, options);
                global::NetVips.VipsImage __result0;
                if (__arg1 == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                    __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
                else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
                @out = __result0;
                return __ret;
            }
        }

        public static int VipsLshiftConst(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, ref double c, int n, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            fixed (double* __refParamPtr2 = &c)
            {
                var __arg2 = __refParamPtr2;
                var __ret = __Internal.VipsLshiftConst(__arg0, __arg1, __arg2, n, options);
                global::NetVips.VipsImage __result0;
                if (__arg1 == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                    __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
                else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
                @out = __result0;
                return __ret;
            }
        }

        public static int VipsRshiftConst(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, ref double c, int n, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            fixed (double* __refParamPtr2 = &c)
            {
                var __arg2 = __refParamPtr2;
                var __ret = __Internal.VipsRshiftConst(__arg0, __arg1, __arg2, n, options);
                global::NetVips.VipsImage __result0;
                if (__arg1 == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                    __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
                else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
                @out = __result0;
                return __ret;
            }
        }

        public static int VipsBooleanConst1(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, global::NetVips.VipsOperationBoolean boolean, double c, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsBooleanConst1(__arg0, __arg1, boolean, c, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsAndimageConst1(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, double c, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsAndimageConst1(__arg0, __arg1, c, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsOrimageConst1(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, double c, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsOrimageConst1(__arg0, __arg1, c, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsEorimageConst1(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, double c, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsEorimageConst1(__arg0, __arg1, c, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsLshiftConst1(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, double c, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsLshiftConst1(__arg0, __arg1, c, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsRshiftConst1(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, double c, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsRshiftConst1(__arg0, __arg1, c, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsMath2(global::NetVips.VipsImage left, global::NetVips.VipsImage right, out global::NetVips.VipsImage @out, global::NetVips.VipsOperationMath2 math2, string[] options = null)
        {
            var __arg0 = ReferenceEquals(left, null) ? global::System.IntPtr.Zero : left.__Instance;
            var __arg1 = ReferenceEquals(right, null) ? global::System.IntPtr.Zero : right.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsMath2(__arg0, __arg1, __arg2, math2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsPow(global::NetVips.VipsImage left, global::NetVips.VipsImage right, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(left, null) ? global::System.IntPtr.Zero : left.__Instance;
            var __arg1 = ReferenceEquals(right, null) ? global::System.IntPtr.Zero : right.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsPow(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsWop(global::NetVips.VipsImage left, global::NetVips.VipsImage right, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(left, null) ? global::System.IntPtr.Zero : left.__Instance;
            var __arg1 = ReferenceEquals(right, null) ? global::System.IntPtr.Zero : right.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsWop(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsMath2Const(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, global::NetVips.VipsOperationMath2 math2, ref double c, int n, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            fixed (double* __refParamPtr3 = &c)
            {
                var __arg3 = __refParamPtr3;
                var __ret = __Internal.VipsMath2Const(__arg0, __arg1, math2, __arg3, n, options);
                global::NetVips.VipsImage __result0;
                if (__arg1 == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                    __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
                else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
                @out = __result0;
                return __ret;
            }
        }

        public static int VipsPowConst(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, ref double c, int n, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            fixed (double* __refParamPtr2 = &c)
            {
                var __arg2 = __refParamPtr2;
                var __ret = __Internal.VipsPowConst(__arg0, __arg1, __arg2, n, options);
                global::NetVips.VipsImage __result0;
                if (__arg1 == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                    __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
                else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
                @out = __result0;
                return __ret;
            }
        }

        public static int VipsWopConst(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, ref double c, int n, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            fixed (double* __refParamPtr2 = &c)
            {
                var __arg2 = __refParamPtr2;
                var __ret = __Internal.VipsWopConst(__arg0, __arg1, __arg2, n, options);
                global::NetVips.VipsImage __result0;
                if (__arg1 == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                    __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
                else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
                @out = __result0;
                return __ret;
            }
        }

        public static int VipsMath2Const1(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, global::NetVips.VipsOperationMath2 math2, double c, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsMath2Const1(__arg0, __arg1, math2, c, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsPowConst1(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, double c, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsPowConst1(__arg0, __arg1, c, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsWopConst1(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, double c, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsWopConst1(__arg0, __arg1, c, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsAvg(global::NetVips.VipsImage @in, ref double @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            fixed (double* __refParamPtr1 = &@out)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.VipsAvg(__arg0, __arg1, options);
                return __ret;
            }
        }

        public static int VipsDeviate(global::NetVips.VipsImage @in, ref double @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            fixed (double* __refParamPtr1 = &@out)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.VipsDeviate(__arg0, __arg1, options);
                return __ret;
            }
        }

        public static int VipsMin(global::NetVips.VipsImage @in, ref double @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            fixed (double* __refParamPtr1 = &@out)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.VipsMin(__arg0, __arg1, options);
                return __ret;
            }
        }

        public static int VipsMax(global::NetVips.VipsImage @in, ref double @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            fixed (double* __refParamPtr1 = &@out)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.VipsMax(__arg0, __arg1, options);
                return __ret;
            }
        }

        public static int VipsStats(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsStats(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsMeasure(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, int h, int v, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsMeasure(__arg0, __arg1, h, v, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsFindTrim(global::NetVips.VipsImage @in, ref int left, ref int top, ref int width, ref int height, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            fixed (int* __refParamPtr1 = &left)
            {
                var __arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &top)
                {
                    var __arg2 = __refParamPtr2;
                    fixed (int* __refParamPtr3 = &width)
                    {
                        var __arg3 = __refParamPtr3;
                        fixed (int* __refParamPtr4 = &height)
                        {
                            var __arg4 = __refParamPtr4;
                            var __ret = __Internal.VipsFindTrim(__arg0, __arg1, __arg2, __arg3, __arg4, options);
                            return __ret;
                        }
                    }
                }
            }
        }

        public static int VipsGetpoint(global::NetVips.VipsImage @in, double** vector, ref int n, int x, int y, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            fixed (int* __refParamPtr2 = &n)
            {
                var __arg2 = __refParamPtr2;
                var __ret = __Internal.VipsGetpoint(__arg0, vector, __arg2, x, y, options);
                return __ret;
            }
        }

        public static int VipsHistFind(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsHistFind(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsHistFindNdim(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsHistFindNdim(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsHistFindIndexed(global::NetVips.VipsImage @in, global::NetVips.VipsImage index, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            var __arg1 = ReferenceEquals(index, null) ? global::System.IntPtr.Zero : index.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsHistFindIndexed(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsHoughLine(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsHoughLine(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsHoughCircle(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsHoughCircle(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsProject(global::NetVips.VipsImage @in, global::NetVips.VipsImage columns, global::NetVips.VipsImage rows, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            var __arg1 = ReferenceEquals(columns, null) ? global::System.IntPtr.Zero : columns.__Instance;
            var __arg2 = ReferenceEquals(rows, null) ? global::System.IntPtr.Zero : rows.__Instance;
            var __ret = __Internal.VipsProject(__arg0, __arg1, __arg2, options);
            return __ret;
        }

        public static int VipsProfile(global::NetVips.VipsImage @in, global::NetVips.VipsImage columns, global::NetVips.VipsImage rows, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            var __arg1 = ReferenceEquals(columns, null) ? global::System.IntPtr.Zero : columns.__Instance;
            var __arg2 = ReferenceEquals(rows, null) ? global::System.IntPtr.Zero : rows.__Instance;
            var __ret = __Internal.VipsProfile(__arg0, __arg1, __arg2, options);
            return __ret;
        }
    }

    public enum VipsExtend
    {
        VIPS_EXTEND_BLACK = 0,
        VIPS_EXTEND_COPY = 1,
        VIPS_EXTEND_REPEAT = 2,
        VIPS_EXTEND_MIRROR = 3,
        VIPS_EXTEND_WHITE = 4,
        VIPS_EXTEND_BACKGROUND = 5,
        VIPS_EXTEND_LAST = 6
    }

    public enum VipsCompassDirection
    {
        VIPS_COMPASS_DIRECTION_CENTRE = 0,
        VIPS_COMPASS_DIRECTION_NORTH = 1,
        VIPS_COMPASS_DIRECTION_EAST = 2,
        VIPS_COMPASS_DIRECTION_SOUTH = 3,
        VIPS_COMPASS_DIRECTION_WEST = 4,
        VIPS_COMPASS_DIRECTION_NORTH_EAST = 5,
        VIPS_COMPASS_DIRECTION_SOUTH_EAST = 6,
        VIPS_COMPASS_DIRECTION_SOUTH_WEST = 7,
        VIPS_COMPASS_DIRECTION_NORTH_WEST = 8,
        VIPS_COMPASS_DIRECTION_LAST = 9
    }

    public enum VipsDirection
    {
        VIPS_DIRECTION_HORIZONTAL = 0,
        VIPS_DIRECTION_VERTICAL = 1,
        VIPS_DIRECTION_LAST = 2
    }

    public enum VipsAlign
    {
        VIPS_ALIGN_LOW = 0,
        VIPS_ALIGN_CENTRE = 1,
        VIPS_ALIGN_HIGH = 2,
        VIPS_ALIGN_LAST = 3
    }

    public enum VipsAngle
    {
        VIPS_ANGLE_D0 = 0,
        VIPS_ANGLE_D90 = 1,
        VIPS_ANGLE_D180 = 2,
        VIPS_ANGLE_D270 = 3,
        VIPS_ANGLE_LAST = 4
    }

    public enum VipsAngle45
    {
        VIPS_ANGLE45D0 = 0,
        VIPS_ANGLE45D45 = 1,
        VIPS_ANGLE45D90 = 2,
        VIPS_ANGLE45D135 = 3,
        VIPS_ANGLE45D180 = 4,
        VIPS_ANGLE45D225 = 5,
        VIPS_ANGLE45D270 = 6,
        VIPS_ANGLE45D315 = 7,
        VIPS_ANGLE45LAST = 8
    }

    public enum VipsInteresting
    {
        VIPS_INTERESTING_NONE = 0,
        VIPS_INTERESTING_CENTRE = 1,
        VIPS_INTERESTING_ENTROPY = 2,
        VIPS_INTERESTING_ATTENTION = 3,
        VIPS_INTERESTING_LAST = 4
    }

    public enum VipsBlendMode
    {
        VIPS_BLEND_MODE_CLEAR = 0,
        VIPS_BLEND_MODE_SOURCE = 1,
        VIPS_BLEND_MODE_OVER = 2,
        VIPS_BLEND_MODE_IN = 3,
        VIPS_BLEND_MODE_OUT = 4,
        VIPS_BLEND_MODE_ATOP = 5,
        VIPS_BLEND_MODE_DEST = 6,
        VIPS_BLEND_MODE_DEST_OVER = 7,
        VIPS_BLEND_MODE_DEST_IN = 8,
        VIPS_BLEND_MODE_DEST_OUT = 9,
        VIPS_BLEND_MODE_DEST_ATOP = 10,
        VIPS_BLEND_MODE_XOR = 11,
        VIPS_BLEND_MODE_ADD = 12,
        VIPS_BLEND_MODE_SATURATE = 13,
        VIPS_BLEND_MODE_MULTIPLY = 14,
        VIPS_BLEND_MODE_SCREEN = 15,
        VIPS_BLEND_MODE_OVERLAY = 16,
        VIPS_BLEND_MODE_DARKEN = 17,
        VIPS_BLEND_MODE_LIGHTEN = 18,
        VIPS_BLEND_MODE_COLOUR_DODGE = 19,
        VIPS_BLEND_MODE_COLOUR_BURN = 20,
        VIPS_BLEND_MODE_HARD_LIGHT = 21,
        VIPS_BLEND_MODE_SOFT_LIGHT = 22,
        VIPS_BLEND_MODE_DIFFERENCE = 23,
        VIPS_BLEND_MODE_EXCLUSION = 24,
        VIPS_BLEND_MODE_LAST = 25
    }

    public unsafe partial class conversion
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_copy")]
            internal static extern int VipsCopy(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_tilecache")]
            internal static extern int VipsTilecache(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_linecache")]
            internal static extern int VipsLinecache(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_sequential")]
            internal static extern int VipsSequential(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_cache")]
            internal static extern int VipsCache(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_copy_file")]
            internal static extern int VipsCopyFile(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_embed")]
            internal static extern int VipsEmbed(global::System.IntPtr @in, global::System.IntPtr @out, int x, int y, int width, int height, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_gravity")]
            internal static extern int VipsGravity(global::System.IntPtr @in, global::System.IntPtr @out, global::NetVips.VipsCompassDirection direction, int width, int height, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_flip")]
            internal static extern int VipsFlip(global::System.IntPtr @in, global::System.IntPtr @out, global::NetVips.VipsDirection direction, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_insert")]
            internal static extern int VipsInsert(global::System.IntPtr main, global::System.IntPtr sub, global::System.IntPtr @out, int x, int y, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_join")]
            internal static extern int VipsJoin(global::System.IntPtr in1, global::System.IntPtr in2, global::System.IntPtr @out, global::NetVips.VipsDirection direction, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_arrayjoin")]
            internal static extern int VipsArrayjoin(global::System.IntPtr @in, global::System.IntPtr @out, int n, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_extract_area")]
            internal static extern int VipsExtractArea(global::System.IntPtr @in, global::System.IntPtr @out, int left, int top, int width, int height, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_crop")]
            internal static extern int VipsCrop(global::System.IntPtr @in, global::System.IntPtr @out, int left, int top, int width, int height, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_smartcrop")]
            internal static extern int VipsSmartcrop(global::System.IntPtr @in, global::System.IntPtr @out, int width, int height, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_extract_band")]
            internal static extern int VipsExtractBand(global::System.IntPtr @in, global::System.IntPtr @out, int band, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_replicate")]
            internal static extern int VipsReplicate(global::System.IntPtr @in, global::System.IntPtr @out, int across, int down, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_grid")]
            internal static extern int VipsGrid(global::System.IntPtr @in, global::System.IntPtr @out, int tile_height, int across, int down, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_wrap")]
            internal static extern int VipsWrap(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_rot")]
            internal static extern int VipsRot(global::System.IntPtr @in, global::System.IntPtr @out, global::NetVips.VipsAngle angle, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_rot90")]
            internal static extern int VipsRot90(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_rot180")]
            internal static extern int VipsRot180(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_rot270")]
            internal static extern int VipsRot270(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_rot45")]
            internal static extern int VipsRot45(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_autorot_get_angle")]
            internal static extern global::NetVips.VipsAngle VipsAutorotGetAngle(global::System.IntPtr image);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_autorot_remove_angle")]
            internal static extern void VipsAutorotRemoveAngle(global::System.IntPtr image);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_autorot")]
            internal static extern int VipsAutorot(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_zoom")]
            internal static extern int VipsZoom(global::System.IntPtr @in, global::System.IntPtr @out, int xfac, int yfac, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_subsample")]
            internal static extern int VipsSubsample(global::System.IntPtr @in, global::System.IntPtr @out, int xfac, int yfac, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_cast")]
            internal static extern int VipsCast(global::System.IntPtr @in, global::System.IntPtr @out, global::NetVips.VipsBandFormat format, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_cast_uchar")]
            internal static extern int VipsCastUchar(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_cast_char")]
            internal static extern int VipsCastChar(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_cast_ushort")]
            internal static extern int VipsCastUshort(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_cast_short")]
            internal static extern int VipsCastShort(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_cast_uint")]
            internal static extern int VipsCastUint(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_cast_int")]
            internal static extern int VipsCastInt(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_cast_float")]
            internal static extern int VipsCastFloat(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_cast_double")]
            internal static extern int VipsCastDouble(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_cast_complex")]
            internal static extern int VipsCastComplex(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_cast_dpcomplex")]
            internal static extern int VipsCastDpcomplex(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_scale")]
            internal static extern int VipsScale(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_msb")]
            internal static extern int VipsMsb(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_byteswap")]
            internal static extern int VipsByteswap(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_bandjoin")]
            internal static extern int VipsBandjoin(global::System.IntPtr @in, global::System.IntPtr @out, int n, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_bandjoin2")]
            internal static extern int VipsBandjoin2(global::System.IntPtr in1, global::System.IntPtr in2, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_bandjoin_const")]
            internal static extern int VipsBandjoinConst(global::System.IntPtr @in, global::System.IntPtr @out, double* c, int n, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_bandjoin_const1")]
            internal static extern int VipsBandjoinConst1(global::System.IntPtr @in, global::System.IntPtr @out, double c, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_bandrank")]
            internal static extern int VipsBandrank(global::System.IntPtr @in, global::System.IntPtr @out, int n, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_bandfold")]
            internal static extern int VipsBandfold(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_bandunfold")]
            internal static extern int VipsBandunfold(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_bandbool")]
            internal static extern int VipsBandbool(global::System.IntPtr @in, global::System.IntPtr @out, global::NetVips.VipsOperationBoolean boolean, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_bandand")]
            internal static extern int VipsBandand(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_bandor")]
            internal static extern int VipsBandor(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_bandeor")]
            internal static extern int VipsBandeor(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_bandmean")]
            internal static extern int VipsBandmean(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_recomb")]
            internal static extern int VipsRecomb(global::System.IntPtr @in, global::System.IntPtr @out, global::System.IntPtr m, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_ifthenelse")]
            internal static extern int VipsIfthenelse(global::System.IntPtr cond, global::System.IntPtr in1, global::System.IntPtr in2, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_flatten")]
            internal static extern int VipsFlatten(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_addalpha")]
            internal static extern int VipsAddalpha(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_premultiply")]
            internal static extern int VipsPremultiply(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_unpremultiply")]
            internal static extern int VipsUnpremultiply(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_composite")]
            internal static extern int VipsComposite(global::System.IntPtr @in, global::System.IntPtr @out, int n, int* mode, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_composite2")]
            internal static extern int VipsComposite2(global::System.IntPtr @base, global::System.IntPtr overlay, global::System.IntPtr @out, global::NetVips.VipsBlendMode mode1, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_falsecolour")]
            internal static extern int VipsFalsecolour(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_gamma")]
            internal static extern int VipsGamma(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);
        }

        public static int VipsCopy(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsCopy(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsTilecache(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsTilecache(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsLinecache(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsLinecache(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsSequential(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsSequential(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsCache(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsCache(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsCopyFile(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsCopyFile(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsEmbed(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, int x, int y, int width, int height, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsEmbed(__arg0, __arg1, x, y, width, height, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsGravity(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, global::NetVips.VipsCompassDirection direction, int width, int height, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsGravity(__arg0, __arg1, direction, width, height, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsFlip(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, global::NetVips.VipsDirection direction, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsFlip(__arg0, __arg1, direction, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsInsert(global::NetVips.VipsImage main, global::NetVips.VipsImage sub, out global::NetVips.VipsImage @out, int x, int y, string[] options = null)
        {
            var __arg0 = ReferenceEquals(main, null) ? global::System.IntPtr.Zero : main.__Instance;
            var __arg1 = ReferenceEquals(sub, null) ? global::System.IntPtr.Zero : sub.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsInsert(__arg0, __arg1, __arg2, x, y, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsJoin(global::NetVips.VipsImage in1, global::NetVips.VipsImage in2, out global::NetVips.VipsImage @out, global::NetVips.VipsDirection direction, string[] options = null)
        {
            var __arg0 = ReferenceEquals(in1, null) ? global::System.IntPtr.Zero : in1.__Instance;
            var __arg1 = ReferenceEquals(in2, null) ? global::System.IntPtr.Zero : in2.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsJoin(__arg0, __arg1, __arg2, direction, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsArrayjoin(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, int n, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsArrayjoin(__arg0, __arg1, n, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsExtractArea(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, int left, int top, int width, int height, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsExtractArea(__arg0, __arg1, left, top, width, height, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsCrop(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, int left, int top, int width, int height, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsCrop(__arg0, __arg1, left, top, width, height, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsSmartcrop(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, int width, int height, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsSmartcrop(__arg0, __arg1, width, height, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsExtractBand(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, int band, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsExtractBand(__arg0, __arg1, band, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsReplicate(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, int across, int down, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsReplicate(__arg0, __arg1, across, down, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsGrid(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, int tile_height, int across, int down, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsGrid(__arg0, __arg1, tile_height, across, down, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsWrap(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsWrap(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsRot(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, global::NetVips.VipsAngle angle, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsRot(__arg0, __arg1, angle, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsRot90(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsRot90(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsRot180(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsRot180(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsRot270(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsRot270(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsRot45(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsRot45(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static global::NetVips.VipsAngle VipsAutorotGetAngle(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsAutorotGetAngle(__arg0);
            return __ret;
        }

        public static void VipsAutorotRemoveAngle(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            __Internal.VipsAutorotRemoveAngle(__arg0);
        }

        public static int VipsAutorot(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsAutorot(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsZoom(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, int xfac, int yfac, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsZoom(__arg0, __arg1, xfac, yfac, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsSubsample(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, int xfac, int yfac, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsSubsample(__arg0, __arg1, xfac, yfac, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsCast(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, global::NetVips.VipsBandFormat format, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsCast(__arg0, __arg1, format, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsCastUchar(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsCastUchar(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsCastChar(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsCastChar(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsCastUshort(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsCastUshort(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsCastShort(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsCastShort(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsCastUint(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsCastUint(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsCastInt(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsCastInt(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsCastFloat(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsCastFloat(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsCastDouble(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsCastDouble(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsCastComplex(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsCastComplex(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsCastDpcomplex(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsCastDpcomplex(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsScale(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsScale(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsMsb(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsMsb(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsByteswap(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsByteswap(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsBandjoin(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, int n, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsBandjoin(__arg0, __arg1, n, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsBandjoin2(global::NetVips.VipsImage in1, global::NetVips.VipsImage in2, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(in1, null) ? global::System.IntPtr.Zero : in1.__Instance;
            var __arg1 = ReferenceEquals(in2, null) ? global::System.IntPtr.Zero : in2.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsBandjoin2(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsBandjoinConst(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, ref double c, int n, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            fixed (double* __refParamPtr2 = &c)
            {
                var __arg2 = __refParamPtr2;
                var __ret = __Internal.VipsBandjoinConst(__arg0, __arg1, __arg2, n, options);
                global::NetVips.VipsImage __result0;
                if (__arg1 == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                    __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
                else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
                @out = __result0;
                return __ret;
            }
        }

        public static int VipsBandjoinConst1(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, double c, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsBandjoinConst1(__arg0, __arg1, c, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsBandrank(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, int n, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsBandrank(__arg0, __arg1, n, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsBandfold(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsBandfold(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsBandunfold(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsBandunfold(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsBandbool(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, global::NetVips.VipsOperationBoolean boolean, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsBandbool(__arg0, __arg1, boolean, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsBandand(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsBandand(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsBandor(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsBandor(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsBandeor(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsBandeor(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsBandmean(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsBandmean(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsRecomb(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, global::NetVips.VipsImage m, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __arg2 = ReferenceEquals(m, null) ? global::System.IntPtr.Zero : m.__Instance;
            var __ret = __Internal.VipsRecomb(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsIfthenelse(global::NetVips.VipsImage cond, global::NetVips.VipsImage in1, global::NetVips.VipsImage in2, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(cond, null) ? global::System.IntPtr.Zero : cond.__Instance;
            var __arg1 = ReferenceEquals(in1, null) ? global::System.IntPtr.Zero : in1.__Instance;
            var __arg2 = ReferenceEquals(in2, null) ? global::System.IntPtr.Zero : in2.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg3 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsIfthenelse(__arg0, __arg1, __arg2, __arg3, options);
            global::NetVips.VipsImage __result0;
            if (__arg3 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg3))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg3];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg3);
            @out = __result0;
            return __ret;
        }

        public static int VipsFlatten(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsFlatten(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsAddalpha(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsAddalpha(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsPremultiply(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsPremultiply(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsUnpremultiply(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsUnpremultiply(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsComposite(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, int n, ref int mode, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            fixed (int* __refParamPtr3 = &mode)
            {
                var __arg3 = __refParamPtr3;
                var __ret = __Internal.VipsComposite(__arg0, __arg1, n, __arg3, options);
                global::NetVips.VipsImage __result0;
                if (__arg1 == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                    __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
                else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
                @out = __result0;
                return __ret;
            }
        }

        public static int VipsComposite2(global::NetVips.VipsImage @base, global::NetVips.VipsImage overlay, out global::NetVips.VipsImage @out, global::NetVips.VipsBlendMode mode1, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@base, null) ? global::System.IntPtr.Zero : @base.__Instance;
            var __arg1 = ReferenceEquals(overlay, null) ? global::System.IntPtr.Zero : overlay.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsComposite2(__arg0, __arg1, __arg2, mode1, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsFalsecolour(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsFalsecolour(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsGamma(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsGamma(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }
    }

    public enum VipsCombine
    {
        VIPS_COMBINE_MAX = 0,
        VIPS_COMBINE_SUM = 1,
        VIPS_COMBINE_MIN = 2,
        VIPS_COMBINE_LAST = 3
    }

    public unsafe partial class convolution
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_conv")]
            internal static extern int VipsConv(global::System.IntPtr @in, global::System.IntPtr @out, global::System.IntPtr mask, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_convf")]
            internal static extern int VipsConvf(global::System.IntPtr @in, global::System.IntPtr @out, global::System.IntPtr mask, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_convi")]
            internal static extern int VipsConvi(global::System.IntPtr @in, global::System.IntPtr @out, global::System.IntPtr mask, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_conva")]
            internal static extern int VipsConva(global::System.IntPtr @in, global::System.IntPtr @out, global::System.IntPtr mask, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_convsep")]
            internal static extern int VipsConvsep(global::System.IntPtr @in, global::System.IntPtr @out, global::System.IntPtr mask, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_convasep")]
            internal static extern int VipsConvasep(global::System.IntPtr @in, global::System.IntPtr @out, global::System.IntPtr mask, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_compass")]
            internal static extern int VipsCompass(global::System.IntPtr @in, global::System.IntPtr @out, global::System.IntPtr mask, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_gaussblur")]
            internal static extern int VipsGaussblur(global::System.IntPtr @in, global::System.IntPtr @out, double sigma, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_sharpen")]
            internal static extern int VipsSharpen(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_spcor")]
            internal static extern int VipsSpcor(global::System.IntPtr @in, global::System.IntPtr @ref, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_fastcor")]
            internal static extern int VipsFastcor(global::System.IntPtr @in, global::System.IntPtr @ref, global::System.IntPtr @out, string[] options);
        }

        public static int VipsConv(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, global::NetVips.VipsImage mask, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __arg2 = ReferenceEquals(mask, null) ? global::System.IntPtr.Zero : mask.__Instance;
            var __ret = __Internal.VipsConv(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsConvf(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, global::NetVips.VipsImage mask, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __arg2 = ReferenceEquals(mask, null) ? global::System.IntPtr.Zero : mask.__Instance;
            var __ret = __Internal.VipsConvf(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsConvi(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, global::NetVips.VipsImage mask, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __arg2 = ReferenceEquals(mask, null) ? global::System.IntPtr.Zero : mask.__Instance;
            var __ret = __Internal.VipsConvi(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsConva(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, global::NetVips.VipsImage mask, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __arg2 = ReferenceEquals(mask, null) ? global::System.IntPtr.Zero : mask.__Instance;
            var __ret = __Internal.VipsConva(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsConvsep(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, global::NetVips.VipsImage mask, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __arg2 = ReferenceEquals(mask, null) ? global::System.IntPtr.Zero : mask.__Instance;
            var __ret = __Internal.VipsConvsep(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsConvasep(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, global::NetVips.VipsImage mask, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __arg2 = ReferenceEquals(mask, null) ? global::System.IntPtr.Zero : mask.__Instance;
            var __ret = __Internal.VipsConvasep(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsCompass(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, global::NetVips.VipsImage mask, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __arg2 = ReferenceEquals(mask, null) ? global::System.IntPtr.Zero : mask.__Instance;
            var __ret = __Internal.VipsCompass(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsGaussblur(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, double sigma, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsGaussblur(__arg0, __arg1, sigma, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsSharpen(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsSharpen(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsSpcor(global::NetVips.VipsImage @in, global::NetVips.VipsImage @ref, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            var __arg1 = ReferenceEquals(@ref, null) ? global::System.IntPtr.Zero : @ref.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsSpcor(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsFastcor(global::NetVips.VipsImage @in, global::NetVips.VipsImage @ref, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            var __arg1 = ReferenceEquals(@ref, null) ? global::System.IntPtr.Zero : @ref.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsFastcor(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }
    }

    public enum VipsOperationMorphology
    {
        VIPS_OPERATION_MORPHOLOGY_ERODE = 0,
        VIPS_OPERATION_MORPHOLOGY_DILATE = 1,
        VIPS_OPERATION_MORPHOLOGY_LAST = 2
    }

    public unsafe partial class morphology
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_morph")]
            internal static extern int VipsMorph(global::System.IntPtr @in, global::System.IntPtr @out, global::System.IntPtr mask, global::NetVips.VipsOperationMorphology morph, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_rank")]
            internal static extern int VipsRank(global::System.IntPtr @in, global::System.IntPtr @out, int width, int height, int index, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_median")]
            internal static extern int VipsMedian(global::System.IntPtr @in, global::System.IntPtr @out, int size, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_countlines")]
            internal static extern int VipsCountlines(global::System.IntPtr @in, double* nolines, global::NetVips.VipsDirection direction, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_labelregions")]
            internal static extern int VipsLabelregions(global::System.IntPtr @in, global::System.IntPtr mask, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_fill_nearest")]
            internal static extern int VipsFillNearest(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);
        }

        public static int VipsMorph(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, global::NetVips.VipsImage mask, global::NetVips.VipsOperationMorphology morph, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __arg2 = ReferenceEquals(mask, null) ? global::System.IntPtr.Zero : mask.__Instance;
            var __ret = __Internal.VipsMorph(__arg0, __arg1, __arg2, morph, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsRank(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, int width, int height, int index, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsRank(__arg0, __arg1, width, height, index, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsMedian(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, int size, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsMedian(__arg0, __arg1, size, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsCountlines(global::NetVips.VipsImage @in, ref double nolines, global::NetVips.VipsDirection direction, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            fixed (double* __refParamPtr1 = &nolines)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.VipsCountlines(__arg0, __arg1, direction, options);
                return __ret;
            }
        }

        public static int VipsLabelregions(global::NetVips.VipsImage @in, global::NetVips.VipsImage mask, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            var __arg1 = ReferenceEquals(mask, null) ? global::System.IntPtr.Zero : mask.__Instance;
            var __ret = __Internal.VipsLabelregions(__arg0, __arg1, options);
            return __ret;
        }

        public static int VipsFillNearest(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsFillNearest(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }
    }

    public unsafe partial class mosaicing
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_merge")]
            internal static extern int VipsMerge(global::System.IntPtr @ref, global::System.IntPtr sec, global::System.IntPtr @out, global::NetVips.VipsDirection direction, int dx, int dy, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_mosaic")]
            internal static extern int VipsMosaic(global::System.IntPtr @ref, global::System.IntPtr sec, global::System.IntPtr @out, global::NetVips.VipsDirection direction, int xref, int yref, int xsec, int ysec, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_mosaic1")]
            internal static extern int VipsMosaic1(global::System.IntPtr @ref, global::System.IntPtr sec, global::System.IntPtr @out, global::NetVips.VipsDirection direction, int xr1, int yr1, int xs1, int ys1, int xr2, int yr2, int xs2, int ys2, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_match")]
            internal static extern int VipsMatch(global::System.IntPtr @ref, global::System.IntPtr sec, global::System.IntPtr @out, int xr1, int yr1, int xs1, int ys1, int xr2, int yr2, int xs2, int ys2, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_globalbalance")]
            internal static extern int VipsGlobalbalance(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_remosaic")]
            internal static extern int VipsRemosaic(global::System.IntPtr @in, global::System.IntPtr @out, [MarshalAs(UnmanagedType.LPStr)] string old_str, [MarshalAs(UnmanagedType.LPStr)] string new_str, string[] options);
        }

        public static int VipsMerge(global::NetVips.VipsImage @ref, global::NetVips.VipsImage sec, out global::NetVips.VipsImage @out, global::NetVips.VipsDirection direction, int dx, int dy, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@ref, null) ? global::System.IntPtr.Zero : @ref.__Instance;
            var __arg1 = ReferenceEquals(sec, null) ? global::System.IntPtr.Zero : sec.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsMerge(__arg0, __arg1, __arg2, direction, dx, dy, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsMosaic(global::NetVips.VipsImage @ref, global::NetVips.VipsImage sec, out global::NetVips.VipsImage @out, global::NetVips.VipsDirection direction, int xref, int yref, int xsec, int ysec, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@ref, null) ? global::System.IntPtr.Zero : @ref.__Instance;
            var __arg1 = ReferenceEquals(sec, null) ? global::System.IntPtr.Zero : sec.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsMosaic(__arg0, __arg1, __arg2, direction, xref, yref, xsec, ysec, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsMosaic1(global::NetVips.VipsImage @ref, global::NetVips.VipsImage sec, out global::NetVips.VipsImage @out, global::NetVips.VipsDirection direction, int xr1, int yr1, int xs1, int ys1, int xr2, int yr2, int xs2, int ys2, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@ref, null) ? global::System.IntPtr.Zero : @ref.__Instance;
            var __arg1 = ReferenceEquals(sec, null) ? global::System.IntPtr.Zero : sec.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsMosaic1(__arg0, __arg1, __arg2, direction, xr1, yr1, xs1, ys1, xr2, yr2, xs2, ys2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsMatch(global::NetVips.VipsImage @ref, global::NetVips.VipsImage sec, out global::NetVips.VipsImage @out, int xr1, int yr1, int xs1, int ys1, int xr2, int yr2, int xs2, int ys2, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@ref, null) ? global::System.IntPtr.Zero : @ref.__Instance;
            var __arg1 = ReferenceEquals(sec, null) ? global::System.IntPtr.Zero : sec.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsMatch(__arg0, __arg1, __arg2, xr1, yr1, xs1, ys1, xr2, yr2, xs2, ys2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsGlobalbalance(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsGlobalbalance(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsRemosaic(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string old_str, string new_str, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsRemosaic(__arg0, __arg1, old_str, new_str, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }
    }

    public unsafe partial class histogram
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_maplut")]
            internal static extern int VipsMaplut(global::System.IntPtr @in, global::System.IntPtr @out, global::System.IntPtr lut, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_percent")]
            internal static extern int VipsPercent(global::System.IntPtr @in, double percent, int* threshold, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_stdif")]
            internal static extern int VipsStdif(global::System.IntPtr @in, global::System.IntPtr @out, int width, int height, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_hist_cum")]
            internal static extern int VipsHistCum(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_hist_norm")]
            internal static extern int VipsHistNorm(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_hist_equal")]
            internal static extern int VipsHistEqual(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_hist_plot")]
            internal static extern int VipsHistPlot(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_hist_match")]
            internal static extern int VipsHistMatch(global::System.IntPtr @in, global::System.IntPtr @ref, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_hist_local")]
            internal static extern int VipsHistLocal(global::System.IntPtr @in, global::System.IntPtr @out, int width, int height, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_hist_ismonotonic")]
            internal static extern int VipsHistIsmonotonic(global::System.IntPtr @in, int* @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_hist_entropy")]
            internal static extern int VipsHistEntropy(global::System.IntPtr @in, double* @out, string[] options);
        }

        public static int VipsMaplut(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, global::NetVips.VipsImage lut, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __arg2 = ReferenceEquals(lut, null) ? global::System.IntPtr.Zero : lut.__Instance;
            var __ret = __Internal.VipsMaplut(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsPercent(global::NetVips.VipsImage @in, double percent, ref int threshold, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            fixed (int* __refParamPtr2 = &threshold)
            {
                var __arg2 = __refParamPtr2;
                var __ret = __Internal.VipsPercent(__arg0, percent, __arg2, options);
                return __ret;
            }
        }

        public static int VipsStdif(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, int width, int height, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsStdif(__arg0, __arg1, width, height, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsHistCum(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsHistCum(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsHistNorm(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsHistNorm(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsHistEqual(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsHistEqual(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsHistPlot(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsHistPlot(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsHistMatch(global::NetVips.VipsImage @in, global::NetVips.VipsImage @ref, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            var __arg1 = ReferenceEquals(@ref, null) ? global::System.IntPtr.Zero : @ref.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsHistMatch(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsHistLocal(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, int width, int height, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsHistLocal(__arg0, __arg1, width, height, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsHistIsmonotonic(global::NetVips.VipsImage @in, ref int @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            fixed (int* __refParamPtr1 = &@out)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.VipsHistIsmonotonic(__arg0, __arg1, options);
                return __ret;
            }
        }

        public static int VipsHistEntropy(global::NetVips.VipsImage @in, ref double @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            fixed (double* __refParamPtr1 = &@out)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.VipsHistEntropy(__arg0, __arg1, options);
                return __ret;
            }
        }
    }

    public unsafe partial class freqfilt
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_fwfft")]
            internal static extern int VipsFwfft(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_invfft")]
            internal static extern int VipsInvfft(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_freqmult")]
            internal static extern int VipsFreqmult(global::System.IntPtr @in, global::System.IntPtr mask, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_spectrum")]
            internal static extern int VipsSpectrum(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_phasecor")]
            internal static extern int VipsPhasecor(global::System.IntPtr in1, global::System.IntPtr in2, global::System.IntPtr @out, string[] options);
        }

        public static int VipsFwfft(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsFwfft(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsInvfft(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsInvfft(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsFreqmult(global::NetVips.VipsImage @in, global::NetVips.VipsImage mask, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            var __arg1 = ReferenceEquals(mask, null) ? global::System.IntPtr.Zero : mask.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsFreqmult(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsSpectrum(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsSpectrum(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsPhasecor(global::NetVips.VipsImage in1, global::NetVips.VipsImage in2, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(in1, null) ? global::System.IntPtr.Zero : in1.__Instance;
            var __arg1 = ReferenceEquals(in2, null) ? global::System.IntPtr.Zero : in2.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsPhasecor(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }
    }

    public enum VipsKernel
    {
        VIPS_KERNEL_NEAREST = 0,
        VIPS_KERNEL_LINEAR = 1,
        VIPS_KERNEL_CUBIC = 2,
        VIPS_KERNEL_LANCZOS2 = 3,
        VIPS_KERNEL_LANCZOS3 = 4,
        VIPS_KERNEL_LAST = 5
    }

    public enum VipsSize
    {
        VIPS_SIZE_BOTH = 0,
        VIPS_SIZE_UP = 1,
        VIPS_SIZE_DOWN = 2,
        VIPS_SIZE_FORCE = 3,
        VIPS_SIZE_LAST = 4
    }

    public unsafe partial class resample
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_shrink")]
            internal static extern int VipsShrink(global::System.IntPtr @in, global::System.IntPtr @out, double hshrink, double vshrink, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_shrinkh")]
            internal static extern int VipsShrinkh(global::System.IntPtr @in, global::System.IntPtr @out, int hshrink, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_shrinkv")]
            internal static extern int VipsShrinkv(global::System.IntPtr @in, global::System.IntPtr @out, int vshrink, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_reduce")]
            internal static extern int VipsReduce(global::System.IntPtr @in, global::System.IntPtr @out, double hshrink, double vshrink, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_reduceh")]
            internal static extern int VipsReduceh(global::System.IntPtr @in, global::System.IntPtr @out, double hshrink, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_reducev")]
            internal static extern int VipsReducev(global::System.IntPtr @in, global::System.IntPtr @out, double vshrink, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_thumbnail")]
            internal static extern int VipsThumbnail([MarshalAs(UnmanagedType.LPStr)] string filename, global::System.IntPtr @out, int width, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_thumbnail_buffer")]
            internal static extern int VipsThumbnailBuffer(global::System.IntPtr buf, ulong len, global::System.IntPtr @out, int width, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_thumbnail_image")]
            internal static extern int VipsThumbnailImage(global::System.IntPtr @in, global::System.IntPtr @out, int width, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_similarity")]
            internal static extern int VipsSimilarity(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_affine")]
            internal static extern int VipsAffine(global::System.IntPtr @in, global::System.IntPtr @out, double a, double b, double c, double d, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_resize")]
            internal static extern int VipsResize(global::System.IntPtr @in, global::System.IntPtr @out, double scale, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_mapim")]
            internal static extern int VipsMapim(global::System.IntPtr @in, global::System.IntPtr @out, global::System.IntPtr index, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_quadratic")]
            internal static extern int VipsQuadratic(global::System.IntPtr @in, global::System.IntPtr @out, global::System.IntPtr coeff, string[] options);
        }

        public static int VipsShrink(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, double hshrink, double vshrink, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsShrink(__arg0, __arg1, hshrink, vshrink, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsShrinkh(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, int hshrink, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsShrinkh(__arg0, __arg1, hshrink, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsShrinkv(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, int vshrink, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsShrinkv(__arg0, __arg1, vshrink, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsReduce(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, double hshrink, double vshrink, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsReduce(__arg0, __arg1, hshrink, vshrink, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsReduceh(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, double hshrink, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsReduceh(__arg0, __arg1, hshrink, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsReducev(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, double vshrink, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsReducev(__arg0, __arg1, vshrink, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsThumbnail(string filename, out global::NetVips.VipsImage @out, int width, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsThumbnail(filename, __arg1, width, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsThumbnailBuffer(global::System.IntPtr buf, ulong len, out global::NetVips.VipsImage @out, int width, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsThumbnailBuffer(buf, len, __arg2, width, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsThumbnailImage(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, int width, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsThumbnailImage(__arg0, __arg1, width, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsSimilarity(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsSimilarity(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsAffine(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, double a, double b, double c, double d, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsAffine(__arg0, __arg1, a, b, c, d, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsResize(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, double scale, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsResize(__arg0, __arg1, scale, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsMapim(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, global::NetVips.VipsImage index, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __arg2 = ReferenceEquals(index, null) ? global::System.IntPtr.Zero : index.__Instance;
            var __ret = __Internal.VipsMapim(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsQuadratic(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, global::NetVips.VipsImage coeff, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __arg2 = ReferenceEquals(coeff, null) ? global::System.IntPtr.Zero : coeff.__Instance;
            var __ret = __Internal.VipsQuadratic(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }
    }

    public enum VipsIntent
    {
        VIPS_INTENT_PERCEPTUAL = 0,
        VIPS_INTENT_RELATIVE = 1,
        VIPS_INTENT_SATURATION = 2,
        VIPS_INTENT_ABSOLUTE = 3,
        VIPS_INTENT_LAST = 4
    }

    public enum VipsPCS
    {
        VIPS_PCS_LAB = 0,
        VIPS_PCS_XYZ = 1,
        VIPS_PCS_LAST = 2
    }

    public unsafe partial class colour
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_colourspace_issupported")]
            internal static extern int VipsColourspaceIssupported(global::System.IntPtr image);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_colourspace")]
            internal static extern int VipsColourspace(global::System.IntPtr @in, global::System.IntPtr @out, global::NetVips.VipsInterpretation space, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_LabQ2sRGB")]
            internal static extern int VipsLabQ2sRGB(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_rad2float")]
            internal static extern int VipsRad2float(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_float2rad")]
            internal static extern int VipsFloat2rad(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_LabS2LabQ")]
            internal static extern int VipsLabS2LabQ(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_LabQ2LabS")]
            internal static extern int VipsLabQ2LabS(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_LabQ2Lab")]
            internal static extern int VipsLabQ2Lab(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_Lab2LabQ")]
            internal static extern int VipsLab2LabQ(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_LCh2Lab")]
            internal static extern int VipsLCh2Lab(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_Lab2LCh")]
            internal static extern int VipsLab2LCh(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_Yxy2Lab")]
            internal static extern int VipsYxy2Lab(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_CMC2XYZ")]
            internal static extern int VipsCMC2XYZ(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_Lab2XYZ")]
            internal static extern int VipsLab2XYZ(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_XYZ2Lab")]
            internal static extern int VipsXYZ2Lab(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_XYZ2scRGB")]
            internal static extern int VipsXYZ2scRGB(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_scRGB2sRGB")]
            internal static extern int VipsScRGB2sRGB(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_scRGB2BW")]
            internal static extern int VipsScRGB2BW(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_sRGB2scRGB")]
            internal static extern int VipsSRGB2scRGB(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_scRGB2XYZ")]
            internal static extern int VipsScRGB2XYZ(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_HSV2sRGB")]
            internal static extern int VipsHSV2sRGB(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_sRGB2HSV")]
            internal static extern int VipsSRGB2HSV(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_LCh2CMC")]
            internal static extern int VipsLCh2CMC(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_CMC2LCh")]
            internal static extern int VipsCMC2LCh(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_XYZ2Yxy")]
            internal static extern int VipsXYZ2Yxy(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_Yxy2XYZ")]
            internal static extern int VipsYxy2XYZ(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_LabS2Lab")]
            internal static extern int VipsLabS2Lab(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_Lab2LabS")]
            internal static extern int VipsLab2LabS(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_icc_present")]
            internal static extern int VipsIccPresent();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_icc_transform")]
            internal static extern int VipsIccTransform(global::System.IntPtr @in, global::System.IntPtr @out, [MarshalAs(UnmanagedType.LPStr)] string output_profile, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_icc_import")]
            internal static extern int VipsIccImport(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_icc_export")]
            internal static extern int VipsIccExport(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_icc_ac2rc")]
            internal static extern int VipsIccAc2rc(global::System.IntPtr @in, global::System.IntPtr @out, [MarshalAs(UnmanagedType.LPStr)] string profile_filename);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_dE76")]
            internal static extern int VipsDE76(global::System.IntPtr left, global::System.IntPtr right, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_dE00")]
            internal static extern int VipsDE00(global::System.IntPtr left, global::System.IntPtr right, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_dECMC")]
            internal static extern int VipsDECMC(global::System.IntPtr left, global::System.IntPtr right, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_col_Lab2XYZ")]
            internal static extern void VipsColLab2XYZ(float L, float a, float b, float* X, float* Y, float* Z);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_col_XYZ2Lab")]
            internal static extern void VipsColXYZ2Lab(float X, float Y, float Z, float* L, float* a, float* b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_col_ab2h")]
            internal static extern double VipsColAb2h(double a, double b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_col_ab2Ch")]
            internal static extern void VipsColAb2Ch(float a, float b, float* C, float* h);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_col_Ch2ab")]
            internal static extern void VipsColCh2ab(float C, float h, float* a, float* b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_col_L2Lcmc")]
            internal static extern float VipsColL2Lcmc(float L);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_col_C2Ccmc")]
            internal static extern float VipsColC2Ccmc(float C);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_col_Ch2hcmc")]
            internal static extern float VipsColCh2hcmc(float C, float h);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_col_make_tables_CMC")]
            internal static extern void VipsColMakeTablesCMC();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_col_Lcmc2L")]
            internal static extern float VipsColLcmc2L(float Lcmc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_col_Ccmc2C")]
            internal static extern float VipsColCcmc2C(float Ccmc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_col_Chcmc2h")]
            internal static extern float VipsColChcmc2h(float C, float hcmc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_col_sRGB2scRGB_8")]
            internal static extern int VipsColSRGB2scRGB_8(int r, int g, int b, float* R, float* G, float* B);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_col_sRGB2scRGB_16")]
            internal static extern int VipsColSRGB2scRGB_16(int r, int g, int b, float* R, float* G, float* B);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_col_sRGB2scRGB_8_noclip")]
            internal static extern int VipsColSRGB2scRGB_8Noclip(int r, int g, int b, float* R, float* G, float* B);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_col_sRGB2scRGB_16_noclip")]
            internal static extern int VipsColSRGB2scRGB_16Noclip(int r, int g, int b, float* R, float* G, float* B);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_col_scRGB2XYZ")]
            internal static extern int VipsColScRGB2XYZ(float R, float G, float B, float* X, float* Y, float* Z);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_col_XYZ2scRGB")]
            internal static extern int VipsColXYZ2scRGB(float X, float Y, float Z, float* R, float* G, float* B);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_col_scRGB2sRGB_8")]
            internal static extern int VipsColScRGB2sRGB_8(float R, float G, float B, int* r, int* g, int* b, int* og);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_col_scRGB2sRGB_16")]
            internal static extern int VipsColScRGB2sRGB_16(float R, float G, float B, int* r, int* g, int* b, int* og);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_col_scRGB2BW_16")]
            internal static extern int VipsColScRGB2BW_16(float R, float G, float B, int* g, int* og);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_col_scRGB2BW_8")]
            internal static extern int VipsColScRGB2BW_8(float R, float G, float B, int* g, int* og);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_pythagoras")]
            internal static extern float VipsPythagoras(float L1, float a1, float b1, float L2, float a2, float b2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_col_dE00")]
            internal static extern float VipsColDE00(float L1, float a1, float b1, float L2, float a2, float b2);
        }

        public static int VipsColourspaceIssupported(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsColourspaceIssupported(__arg0);
            return __ret;
        }

        public static int VipsColourspace(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, global::NetVips.VipsInterpretation space, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsColourspace(__arg0, __arg1, space, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsLabQ2sRGB(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsLabQ2sRGB(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsRad2float(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsRad2float(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsFloat2rad(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsFloat2rad(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsLabS2LabQ(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsLabS2LabQ(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsLabQ2LabS(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsLabQ2LabS(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsLabQ2Lab(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsLabQ2Lab(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsLab2LabQ(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsLab2LabQ(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsLCh2Lab(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsLCh2Lab(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsLab2LCh(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsLab2LCh(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsYxy2Lab(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsYxy2Lab(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsCMC2XYZ(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsCMC2XYZ(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsLab2XYZ(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsLab2XYZ(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsXYZ2Lab(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsXYZ2Lab(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsXYZ2scRGB(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsXYZ2scRGB(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsScRGB2sRGB(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsScRGB2sRGB(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsScRGB2BW(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsScRGB2BW(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsSRGB2scRGB(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsSRGB2scRGB(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsScRGB2XYZ(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsScRGB2XYZ(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsHSV2sRGB(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsHSV2sRGB(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsSRGB2HSV(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsSRGB2HSV(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsLCh2CMC(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsLCh2CMC(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsCMC2LCh(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsCMC2LCh(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsXYZ2Yxy(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsXYZ2Yxy(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsYxy2XYZ(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsYxy2XYZ(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsLabS2Lab(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsLabS2Lab(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsLab2LabS(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsLab2LabS(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsIccPresent()
        {
            var __ret = __Internal.VipsIccPresent();
            return __ret;
        }

        public static int VipsIccTransform(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string output_profile, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsIccTransform(__arg0, __arg1, output_profile, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsIccImport(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsIccImport(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsIccExport(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsIccExport(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsIccAc2rc(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string profile_filename)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsIccAc2rc(__arg0, __arg1, profile_filename);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsDE76(global::NetVips.VipsImage left, global::NetVips.VipsImage right, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(left, null) ? global::System.IntPtr.Zero : left.__Instance;
            var __arg1 = ReferenceEquals(right, null) ? global::System.IntPtr.Zero : right.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsDE76(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsDE00(global::NetVips.VipsImage left, global::NetVips.VipsImage right, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(left, null) ? global::System.IntPtr.Zero : left.__Instance;
            var __arg1 = ReferenceEquals(right, null) ? global::System.IntPtr.Zero : right.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsDE00(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static int VipsDECMC(global::NetVips.VipsImage left, global::NetVips.VipsImage right, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(left, null) ? global::System.IntPtr.Zero : left.__Instance;
            var __arg1 = ReferenceEquals(right, null) ? global::System.IntPtr.Zero : right.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsDECMC(__arg0, __arg1, __arg2, options);
            global::NetVips.VipsImage __result0;
            if (__arg2 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg2))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg2];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg2);
            @out = __result0;
            return __ret;
        }

        public static void VipsColLab2XYZ(float L, float a, float b, ref float X, ref float Y, ref float Z)
        {
            fixed (float* __refParamPtr3 = &X)
            {
                var __arg3 = __refParamPtr3;
                fixed (float* __refParamPtr4 = &Y)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (float* __refParamPtr5 = &Z)
                    {
                        var __arg5 = __refParamPtr5;
                        __Internal.VipsColLab2XYZ(L, a, b, __arg3, __arg4, __arg5);
                    }
                }
            }
        }

        public static void VipsColXYZ2Lab(float X, float Y, float Z, ref float L, ref float a, ref float b)
        {
            fixed (float* __refParamPtr3 = &L)
            {
                var __arg3 = __refParamPtr3;
                fixed (float* __refParamPtr4 = &a)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (float* __refParamPtr5 = &b)
                    {
                        var __arg5 = __refParamPtr5;
                        __Internal.VipsColXYZ2Lab(X, Y, Z, __arg3, __arg4, __arg5);
                    }
                }
            }
        }

        public static double VipsColAb2h(double a, double b)
        {
            var __ret = __Internal.VipsColAb2h(a, b);
            return __ret;
        }

        public static void VipsColAb2Ch(float a, float b, ref float C, ref float h)
        {
            fixed (float* __refParamPtr2 = &C)
            {
                var __arg2 = __refParamPtr2;
                fixed (float* __refParamPtr3 = &h)
                {
                    var __arg3 = __refParamPtr3;
                    __Internal.VipsColAb2Ch(a, b, __arg2, __arg3);
                }
            }
        }

        public static void VipsColCh2ab(float C, float h, ref float a, ref float b)
        {
            fixed (float* __refParamPtr2 = &a)
            {
                var __arg2 = __refParamPtr2;
                fixed (float* __refParamPtr3 = &b)
                {
                    var __arg3 = __refParamPtr3;
                    __Internal.VipsColCh2ab(C, h, __arg2, __arg3);
                }
            }
        }

        public static float VipsColL2Lcmc(float L)
        {
            var __ret = __Internal.VipsColL2Lcmc(L);
            return __ret;
        }

        public static float VipsColC2Ccmc(float C)
        {
            var __ret = __Internal.VipsColC2Ccmc(C);
            return __ret;
        }

        public static float VipsColCh2hcmc(float C, float h)
        {
            var __ret = __Internal.VipsColCh2hcmc(C, h);
            return __ret;
        }

        public static void VipsColMakeTablesCMC()
        {
            __Internal.VipsColMakeTablesCMC();
        }

        public static float VipsColLcmc2L(float Lcmc)
        {
            var __ret = __Internal.VipsColLcmc2L(Lcmc);
            return __ret;
        }

        public static float VipsColCcmc2C(float Ccmc)
        {
            var __ret = __Internal.VipsColCcmc2C(Ccmc);
            return __ret;
        }

        public static float VipsColChcmc2h(float C, float hcmc)
        {
            var __ret = __Internal.VipsColChcmc2h(C, hcmc);
            return __ret;
        }

        public static int VipsColSRGB2scRGB_8(int r, int g, int b, ref float R, ref float G, ref float B)
        {
            fixed (float* __refParamPtr3 = &R)
            {
                var __arg3 = __refParamPtr3;
                fixed (float* __refParamPtr4 = &G)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (float* __refParamPtr5 = &B)
                    {
                        var __arg5 = __refParamPtr5;
                        var __ret = __Internal.VipsColSRGB2scRGB_8(r, g, b, __arg3, __arg4, __arg5);
                        return __ret;
                    }
                }
            }
        }

        public static int VipsColSRGB2scRGB_16(int r, int g, int b, ref float R, ref float G, ref float B)
        {
            fixed (float* __refParamPtr3 = &R)
            {
                var __arg3 = __refParamPtr3;
                fixed (float* __refParamPtr4 = &G)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (float* __refParamPtr5 = &B)
                    {
                        var __arg5 = __refParamPtr5;
                        var __ret = __Internal.VipsColSRGB2scRGB_16(r, g, b, __arg3, __arg4, __arg5);
                        return __ret;
                    }
                }
            }
        }

        public static int VipsColSRGB2scRGB_8Noclip(int r, int g, int b, ref float R, ref float G, ref float B)
        {
            fixed (float* __refParamPtr3 = &R)
            {
                var __arg3 = __refParamPtr3;
                fixed (float* __refParamPtr4 = &G)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (float* __refParamPtr5 = &B)
                    {
                        var __arg5 = __refParamPtr5;
                        var __ret = __Internal.VipsColSRGB2scRGB_8Noclip(r, g, b, __arg3, __arg4, __arg5);
                        return __ret;
                    }
                }
            }
        }

        public static int VipsColSRGB2scRGB_16Noclip(int r, int g, int b, ref float R, ref float G, ref float B)
        {
            fixed (float* __refParamPtr3 = &R)
            {
                var __arg3 = __refParamPtr3;
                fixed (float* __refParamPtr4 = &G)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (float* __refParamPtr5 = &B)
                    {
                        var __arg5 = __refParamPtr5;
                        var __ret = __Internal.VipsColSRGB2scRGB_16Noclip(r, g, b, __arg3, __arg4, __arg5);
                        return __ret;
                    }
                }
            }
        }

        public static int VipsColScRGB2XYZ(float R, float G, float B, ref float X, ref float Y, ref float Z)
        {
            fixed (float* __refParamPtr3 = &X)
            {
                var __arg3 = __refParamPtr3;
                fixed (float* __refParamPtr4 = &Y)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (float* __refParamPtr5 = &Z)
                    {
                        var __arg5 = __refParamPtr5;
                        var __ret = __Internal.VipsColScRGB2XYZ(R, G, B, __arg3, __arg4, __arg5);
                        return __ret;
                    }
                }
            }
        }

        public static int VipsColXYZ2scRGB(float X, float Y, float Z, ref float R, ref float G, ref float B)
        {
            fixed (float* __refParamPtr3 = &R)
            {
                var __arg3 = __refParamPtr3;
                fixed (float* __refParamPtr4 = &G)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (float* __refParamPtr5 = &B)
                    {
                        var __arg5 = __refParamPtr5;
                        var __ret = __Internal.VipsColXYZ2scRGB(X, Y, Z, __arg3, __arg4, __arg5);
                        return __ret;
                    }
                }
            }
        }

        public static int VipsColScRGB2sRGB_8(float R, float G, float B, ref int r, ref int g, ref int b, ref int og)
        {
            fixed (int* __refParamPtr3 = &r)
            {
                var __arg3 = __refParamPtr3;
                fixed (int* __refParamPtr4 = &g)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (int* __refParamPtr5 = &b)
                    {
                        var __arg5 = __refParamPtr5;
                        fixed (int* __refParamPtr6 = &og)
                        {
                            var __arg6 = __refParamPtr6;
                            var __ret = __Internal.VipsColScRGB2sRGB_8(R, G, B, __arg3, __arg4, __arg5, __arg6);
                            return __ret;
                        }
                    }
                }
            }
        }

        public static int VipsColScRGB2sRGB_16(float R, float G, float B, ref int r, ref int g, ref int b, ref int og)
        {
            fixed (int* __refParamPtr3 = &r)
            {
                var __arg3 = __refParamPtr3;
                fixed (int* __refParamPtr4 = &g)
                {
                    var __arg4 = __refParamPtr4;
                    fixed (int* __refParamPtr5 = &b)
                    {
                        var __arg5 = __refParamPtr5;
                        fixed (int* __refParamPtr6 = &og)
                        {
                            var __arg6 = __refParamPtr6;
                            var __ret = __Internal.VipsColScRGB2sRGB_16(R, G, B, __arg3, __arg4, __arg5, __arg6);
                            return __ret;
                        }
                    }
                }
            }
        }

        public static int VipsColScRGB2BW_16(float R, float G, float B, ref int g, ref int og)
        {
            fixed (int* __refParamPtr3 = &g)
            {
                var __arg3 = __refParamPtr3;
                fixed (int* __refParamPtr4 = &og)
                {
                    var __arg4 = __refParamPtr4;
                    var __ret = __Internal.VipsColScRGB2BW_16(R, G, B, __arg3, __arg4);
                    return __ret;
                }
            }
        }

        public static int VipsColScRGB2BW_8(float R, float G, float B, ref int g, ref int og)
        {
            fixed (int* __refParamPtr3 = &g)
            {
                var __arg3 = __refParamPtr3;
                fixed (int* __refParamPtr4 = &og)
                {
                    var __arg4 = __refParamPtr4;
                    var __ret = __Internal.VipsColScRGB2BW_8(R, G, B, __arg3, __arg4);
                    return __ret;
                }
            }
        }

        public static float VipsPythagoras(float L1, float a1, float b1, float L2, float a2, float b2)
        {
            var __ret = __Internal.VipsPythagoras(L1, a1, b1, L2, a2, b2);
            return __ret;
        }

        public static float VipsColDE00(float L1, float a1, float b1, float L2, float a2, float b2)
        {
            var __ret = __Internal.VipsColDE00(L1, a1, b1, L2, a2, b2);
            return __ret;
        }
    }

    public enum VipsCombineMode
    {
        VIPS_COMBINE_MODE_SET = 0,
        VIPS_COMBINE_MODE_ADD = 1,
        VIPS_COMBINE_MODE_LAST = 2
    }

    public unsafe partial class draw
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_draw_rect")]
            internal static extern int VipsDrawRect(global::System.IntPtr image, double* ink, int n, int left, int top, int width, int height, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_draw_rect1")]
            internal static extern int VipsDrawRect1(global::System.IntPtr image, double ink, int left, int top, int width, int height, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_draw_point")]
            internal static extern int VipsDrawPoint(global::System.IntPtr image, double* ink, int n, int x, int y, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_draw_point1")]
            internal static extern int VipsDrawPoint1(global::System.IntPtr image, double ink, int x, int y, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_draw_image")]
            internal static extern int VipsDrawImage(global::System.IntPtr image, global::System.IntPtr sub, int x, int y, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_draw_mask")]
            internal static extern int VipsDrawMask(global::System.IntPtr image, double* ink, int n, global::System.IntPtr mask, int x, int y, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_draw_mask1")]
            internal static extern int VipsDrawMask1(global::System.IntPtr image, double ink, global::System.IntPtr mask, int x, int y, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_draw_line")]
            internal static extern int VipsDrawLine(global::System.IntPtr image, double* ink, int n, int x1, int y1, int x2, int y2, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_draw_line1")]
            internal static extern int VipsDrawLine1(global::System.IntPtr image, double ink, int x1, int y1, int x2, int y2, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_draw_circle")]
            internal static extern int VipsDrawCircle(global::System.IntPtr image, double* ink, int n, int cx, int cy, int radius, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_draw_circle1")]
            internal static extern int VipsDrawCircle1(global::System.IntPtr image, double ink, int cx, int cy, int radius, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_draw_flood")]
            internal static extern int VipsDrawFlood(global::System.IntPtr image, double* ink, int n, int x, int y, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_draw_flood1")]
            internal static extern int VipsDrawFlood1(global::System.IntPtr image, double ink, int x, int y, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_draw_smudge")]
            internal static extern int VipsDrawSmudge(global::System.IntPtr image, int left, int top, int width, int height, string[] options);
        }

        public static int VipsDrawRect(global::NetVips.VipsImage image, ref double ink, int n, int left, int top, int width, int height, string[] options = null)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            fixed (double* __refParamPtr1 = &ink)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.VipsDrawRect(__arg0, __arg1, n, left, top, width, height, options);
                return __ret;
            }
        }

        public static int VipsDrawRect1(global::NetVips.VipsImage image, double ink, int left, int top, int width, int height, string[] options = null)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsDrawRect1(__arg0, ink, left, top, width, height, options);
            return __ret;
        }

        public static int VipsDrawPoint(global::NetVips.VipsImage image, ref double ink, int n, int x, int y, string[] options = null)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            fixed (double* __refParamPtr1 = &ink)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.VipsDrawPoint(__arg0, __arg1, n, x, y, options);
                return __ret;
            }
        }

        public static int VipsDrawPoint1(global::NetVips.VipsImage image, double ink, int x, int y, string[] options = null)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsDrawPoint1(__arg0, ink, x, y, options);
            return __ret;
        }

        public static int VipsDrawImage(global::NetVips.VipsImage image, global::NetVips.VipsImage sub, int x, int y, string[] options = null)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __arg1 = ReferenceEquals(sub, null) ? global::System.IntPtr.Zero : sub.__Instance;
            var __ret = __Internal.VipsDrawImage(__arg0, __arg1, x, y, options);
            return __ret;
        }

        public static int VipsDrawMask(global::NetVips.VipsImage image, ref double ink, int n, global::NetVips.VipsImage mask, int x, int y, string[] options = null)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            fixed (double* __refParamPtr1 = &ink)
            {
                var __arg1 = __refParamPtr1;
                var __arg3 = ReferenceEquals(mask, null) ? global::System.IntPtr.Zero : mask.__Instance;
                var __ret = __Internal.VipsDrawMask(__arg0, __arg1, n, __arg3, x, y, options);
                return __ret;
            }
        }

        public static int VipsDrawMask1(global::NetVips.VipsImage image, double ink, global::NetVips.VipsImage mask, int x, int y, string[] options = null)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __arg2 = ReferenceEquals(mask, null) ? global::System.IntPtr.Zero : mask.__Instance;
            var __ret = __Internal.VipsDrawMask1(__arg0, ink, __arg2, x, y, options);
            return __ret;
        }

        public static int VipsDrawLine(global::NetVips.VipsImage image, ref double ink, int n, int x1, int y1, int x2, int y2, string[] options = null)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            fixed (double* __refParamPtr1 = &ink)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.VipsDrawLine(__arg0, __arg1, n, x1, y1, x2, y2, options);
                return __ret;
            }
        }

        public static int VipsDrawLine1(global::NetVips.VipsImage image, double ink, int x1, int y1, int x2, int y2, string[] options = null)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsDrawLine1(__arg0, ink, x1, y1, x2, y2, options);
            return __ret;
        }

        public static int VipsDrawCircle(global::NetVips.VipsImage image, ref double ink, int n, int cx, int cy, int radius, string[] options = null)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            fixed (double* __refParamPtr1 = &ink)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.VipsDrawCircle(__arg0, __arg1, n, cx, cy, radius, options);
                return __ret;
            }
        }

        public static int VipsDrawCircle1(global::NetVips.VipsImage image, double ink, int cx, int cy, int radius, string[] options = null)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsDrawCircle1(__arg0, ink, cx, cy, radius, options);
            return __ret;
        }

        public static int VipsDrawFlood(global::NetVips.VipsImage image, ref double ink, int n, int x, int y, string[] options = null)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            fixed (double* __refParamPtr1 = &ink)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.VipsDrawFlood(__arg0, __arg1, n, x, y, options);
                return __ret;
            }
        }

        public static int VipsDrawFlood1(global::NetVips.VipsImage image, double ink, int x, int y, string[] options = null)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsDrawFlood1(__arg0, ink, x, y, options);
            return __ret;
        }

        public static int VipsDrawSmudge(global::NetVips.VipsImage image, int left, int top, int width, int height, string[] options = null)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsDrawSmudge(__arg0, left, top, width, height, options);
            return __ret;
        }
    }

    public unsafe partial class create
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_black")]
            internal static extern int VipsBlack(global::System.IntPtr @out, int width, int height, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_xyz")]
            internal static extern int VipsXyz(global::System.IntPtr @out, int width, int height, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_grey")]
            internal static extern int VipsGrey(global::System.IntPtr @out, int width, int height, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_gaussmat")]
            internal static extern int VipsGaussmat(global::System.IntPtr @out, double sigma, double min_ampl, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_logmat")]
            internal static extern int VipsLogmat(global::System.IntPtr @out, double sigma, double min_ampl, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_text")]
            internal static extern int VipsText(global::System.IntPtr @out, [MarshalAs(UnmanagedType.LPStr)] string text, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_gaussnoise")]
            internal static extern int VipsGaussnoise(global::System.IntPtr @out, int width, int height, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_eye")]
            internal static extern int VipsEye(global::System.IntPtr @out, int width, int height, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_sines")]
            internal static extern int VipsSines(global::System.IntPtr @out, int width, int height, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_zone")]
            internal static extern int VipsZone(global::System.IntPtr @out, int width, int height, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_identity")]
            internal static extern int VipsIdentity(global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_buildlut")]
            internal static extern int VipsBuildlut(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_invertlut")]
            internal static extern int VipsInvertlut(global::System.IntPtr @in, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_tonelut")]
            internal static extern int VipsTonelut(global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_mask_ideal")]
            internal static extern int VipsMaskIdeal(global::System.IntPtr @out, int width, int height, double frequency_cutoff, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_mask_ideal_ring")]
            internal static extern int VipsMaskIdealRing(global::System.IntPtr @out, int width, int height, double frequency_cutoff, double ringwidth, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_mask_ideal_band")]
            internal static extern int VipsMaskIdealBand(global::System.IntPtr @out, int width, int height, double frequency_cutoff_x, double frequency_cutoff_y, double radius, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_mask_butterworth")]
            internal static extern int VipsMaskButterworth(global::System.IntPtr @out, int width, int height, double order, double frequency_cutoff, double amplitude_cutoff, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_mask_butterworth_ring")]
            internal static extern int VipsMaskButterworthRing(global::System.IntPtr @out, int width, int height, double order, double frequency_cutoff, double amplitude_cutoff, double ringwidth, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_mask_butterworth_band")]
            internal static extern int VipsMaskButterworthBand(global::System.IntPtr @out, int width, int height, double order, double frequency_cutoff_x, double frequency_cutoff_y, double radius, double amplitude_cutoff, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_mask_gaussian")]
            internal static extern int VipsMaskGaussian(global::System.IntPtr @out, int width, int height, double frequency_cutoff, double amplitude_cutoff, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_mask_gaussian_ring")]
            internal static extern int VipsMaskGaussianRing(global::System.IntPtr @out, int width, int height, double frequency_cutoff, double amplitude_cutoff, double ringwidth, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_mask_gaussian_band")]
            internal static extern int VipsMaskGaussianBand(global::System.IntPtr @out, int width, int height, double frequency_cutoff_x, double frequency_cutoff_y, double radius, double amplitude_cutoff, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_mask_fractal")]
            internal static extern int VipsMaskFractal(global::System.IntPtr @out, int width, int height, double fractal_dimension, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_fractsurf")]
            internal static extern int VipsFractsurf(global::System.IntPtr @out, int width, int height, double fractal_dimension, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_worley")]
            internal static extern int VipsWorley(global::System.IntPtr @out, int width, int height, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_perlin")]
            internal static extern int VipsPerlin(global::System.IntPtr @out, int width, int height, string[] options);
        }

        public static int VipsBlack(out global::NetVips.VipsImage @out, int width, int height, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg0 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsBlack(__arg0, width, height, options);
            global::NetVips.VipsImage __result0;
            if (__arg0 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg0))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg0];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg0);
            @out = __result0;
            return __ret;
        }

        public static int VipsXyz(out global::NetVips.VipsImage @out, int width, int height, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg0 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsXyz(__arg0, width, height, options);
            global::NetVips.VipsImage __result0;
            if (__arg0 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg0))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg0];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg0);
            @out = __result0;
            return __ret;
        }

        public static int VipsGrey(out global::NetVips.VipsImage @out, int width, int height, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg0 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsGrey(__arg0, width, height, options);
            global::NetVips.VipsImage __result0;
            if (__arg0 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg0))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg0];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg0);
            @out = __result0;
            return __ret;
        }

        public static int VipsGaussmat(out global::NetVips.VipsImage @out, double sigma, double min_ampl, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg0 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsGaussmat(__arg0, sigma, min_ampl, options);
            global::NetVips.VipsImage __result0;
            if (__arg0 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg0))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg0];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg0);
            @out = __result0;
            return __ret;
        }

        public static int VipsLogmat(out global::NetVips.VipsImage @out, double sigma, double min_ampl, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg0 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsLogmat(__arg0, sigma, min_ampl, options);
            global::NetVips.VipsImage __result0;
            if (__arg0 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg0))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg0];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg0);
            @out = __result0;
            return __ret;
        }

        public static int VipsText(out global::NetVips.VipsImage @out, string text, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg0 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsText(__arg0, text, options);
            global::NetVips.VipsImage __result0;
            if (__arg0 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg0))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg0];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg0);
            @out = __result0;
            return __ret;
        }

        public static int VipsGaussnoise(out global::NetVips.VipsImage @out, int width, int height, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg0 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsGaussnoise(__arg0, width, height, options);
            global::NetVips.VipsImage __result0;
            if (__arg0 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg0))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg0];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg0);
            @out = __result0;
            return __ret;
        }

        public static int VipsEye(out global::NetVips.VipsImage @out, int width, int height, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg0 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsEye(__arg0, width, height, options);
            global::NetVips.VipsImage __result0;
            if (__arg0 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg0))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg0];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg0);
            @out = __result0;
            return __ret;
        }

        public static int VipsSines(out global::NetVips.VipsImage @out, int width, int height, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg0 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsSines(__arg0, width, height, options);
            global::NetVips.VipsImage __result0;
            if (__arg0 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg0))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg0];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg0);
            @out = __result0;
            return __ret;
        }

        public static int VipsZone(out global::NetVips.VipsImage @out, int width, int height, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg0 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsZone(__arg0, width, height, options);
            global::NetVips.VipsImage __result0;
            if (__arg0 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg0))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg0];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg0);
            @out = __result0;
            return __ret;
        }

        public static int VipsIdentity(out global::NetVips.VipsImage @out, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg0 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsIdentity(__arg0, options);
            global::NetVips.VipsImage __result0;
            if (__arg0 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg0))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg0];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg0);
            @out = __result0;
            return __ret;
        }

        public static int VipsBuildlut(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsBuildlut(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsInvertlut(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsInvertlut(__arg0, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsTonelut(out global::NetVips.VipsImage @out, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg0 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsTonelut(__arg0, options);
            global::NetVips.VipsImage __result0;
            if (__arg0 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg0))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg0];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg0);
            @out = __result0;
            return __ret;
        }

        public static int VipsMaskIdeal(out global::NetVips.VipsImage @out, int width, int height, double frequency_cutoff, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg0 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsMaskIdeal(__arg0, width, height, frequency_cutoff, options);
            global::NetVips.VipsImage __result0;
            if (__arg0 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg0))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg0];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg0);
            @out = __result0;
            return __ret;
        }

        public static int VipsMaskIdealRing(out global::NetVips.VipsImage @out, int width, int height, double frequency_cutoff, double ringwidth, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg0 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsMaskIdealRing(__arg0, width, height, frequency_cutoff, ringwidth, options);
            global::NetVips.VipsImage __result0;
            if (__arg0 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg0))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg0];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg0);
            @out = __result0;
            return __ret;
        }

        public static int VipsMaskIdealBand(out global::NetVips.VipsImage @out, int width, int height, double frequency_cutoff_x, double frequency_cutoff_y, double radius, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg0 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsMaskIdealBand(__arg0, width, height, frequency_cutoff_x, frequency_cutoff_y, radius, options);
            global::NetVips.VipsImage __result0;
            if (__arg0 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg0))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg0];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg0);
            @out = __result0;
            return __ret;
        }

        public static int VipsMaskButterworth(out global::NetVips.VipsImage @out, int width, int height, double order, double frequency_cutoff, double amplitude_cutoff, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg0 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsMaskButterworth(__arg0, width, height, order, frequency_cutoff, amplitude_cutoff, options);
            global::NetVips.VipsImage __result0;
            if (__arg0 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg0))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg0];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg0);
            @out = __result0;
            return __ret;
        }

        public static int VipsMaskButterworthRing(out global::NetVips.VipsImage @out, int width, int height, double order, double frequency_cutoff, double amplitude_cutoff, double ringwidth, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg0 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsMaskButterworthRing(__arg0, width, height, order, frequency_cutoff, amplitude_cutoff, ringwidth, options);
            global::NetVips.VipsImage __result0;
            if (__arg0 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg0))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg0];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg0);
            @out = __result0;
            return __ret;
        }

        public static int VipsMaskButterworthBand(out global::NetVips.VipsImage @out, int width, int height, double order, double frequency_cutoff_x, double frequency_cutoff_y, double radius, double amplitude_cutoff, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg0 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsMaskButterworthBand(__arg0, width, height, order, frequency_cutoff_x, frequency_cutoff_y, radius, amplitude_cutoff, options);
            global::NetVips.VipsImage __result0;
            if (__arg0 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg0))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg0];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg0);
            @out = __result0;
            return __ret;
        }

        public static int VipsMaskGaussian(out global::NetVips.VipsImage @out, int width, int height, double frequency_cutoff, double amplitude_cutoff, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg0 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsMaskGaussian(__arg0, width, height, frequency_cutoff, amplitude_cutoff, options);
            global::NetVips.VipsImage __result0;
            if (__arg0 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg0))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg0];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg0);
            @out = __result0;
            return __ret;
        }

        public static int VipsMaskGaussianRing(out global::NetVips.VipsImage @out, int width, int height, double frequency_cutoff, double amplitude_cutoff, double ringwidth, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg0 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsMaskGaussianRing(__arg0, width, height, frequency_cutoff, amplitude_cutoff, ringwidth, options);
            global::NetVips.VipsImage __result0;
            if (__arg0 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg0))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg0];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg0);
            @out = __result0;
            return __ret;
        }

        public static int VipsMaskGaussianBand(out global::NetVips.VipsImage @out, int width, int height, double frequency_cutoff_x, double frequency_cutoff_y, double radius, double amplitude_cutoff, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg0 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsMaskGaussianBand(__arg0, width, height, frequency_cutoff_x, frequency_cutoff_y, radius, amplitude_cutoff, options);
            global::NetVips.VipsImage __result0;
            if (__arg0 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg0))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg0];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg0);
            @out = __result0;
            return __ret;
        }

        public static int VipsMaskFractal(out global::NetVips.VipsImage @out, int width, int height, double fractal_dimension, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg0 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsMaskFractal(__arg0, width, height, fractal_dimension, options);
            global::NetVips.VipsImage __result0;
            if (__arg0 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg0))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg0];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg0);
            @out = __result0;
            return __ret;
        }

        public static int VipsFractsurf(out global::NetVips.VipsImage @out, int width, int height, double fractal_dimension, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg0 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsFractsurf(__arg0, width, height, fractal_dimension, options);
            global::NetVips.VipsImage __result0;
            if (__arg0 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg0))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg0];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg0);
            @out = __result0;
            return __ret;
        }

        public static int VipsWorley(out global::NetVips.VipsImage @out, int width, int height, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg0 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsWorley(__arg0, width, height, options);
            global::NetVips.VipsImage __result0;
            if (__arg0 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg0))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg0];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg0);
            @out = __result0;
            return __ret;
        }

        public static int VipsPerlin(out global::NetVips.VipsImage @out, int width, int height, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg0 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsPerlin(__arg0, width, height, options);
            global::NetVips.VipsImage __result0;
            if (__arg0 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg0))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg0];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg0);
            @out = __result0;
            return __ret;
        }
    }

    public unsafe partial class cimg_funcs
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_gmic")]
            internal static extern int VipsGmic(global::System.IntPtr @in, global::System.IntPtr @out, int n, int padding, double x_scale, double y_scale, [MarshalAs(UnmanagedType.LPStr)] string command, string[] options);
        }

        public static int VipsGmic(global::NetVips.VipsImage @in, out global::NetVips.VipsImage @out, int n, int padding, double x_scale, double y_scale, string command, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsGmic(__arg0, __arg1, n, padding, x_scale, y_scale, command, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr ImConstructFn(global::System.IntPtr _0, global::System.IntPtr _1, global::System.IntPtr _2);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int ImGenerateFn(global::System.IntPtr @out, global::System.IntPtr seq, global::System.IntPtr a, global::System.IntPtr b);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void ImWraponeFn(global::System.IntPtr @in, global::System.IntPtr @out, int width, global::System.IntPtr a, global::System.IntPtr b);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void ImWraptwoFn(global::System.IntPtr in1, global::System.IntPtr in2, global::System.IntPtr @out, int width, global::System.IntPtr a, global::System.IntPtr b);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void ImWrapmanyFn(void** @in, global::System.IntPtr @out, int width, global::System.IntPtr a, global::System.IntPtr b);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int VipsPlotFn(global::System.IntPtr image, int x, int y, global::System.IntPtr a, global::System.IntPtr b, global::System.IntPtr c);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int ImWrapscanFn(global::System.IntPtr p, int n, global::System.IntPtr seq, global::System.IntPtr a, global::System.IntPtr b);

    public unsafe partial class vips7compat
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_new_mode")]
            internal static extern global::System.IntPtr VipsImageNewMode([MarshalAs(UnmanagedType.LPStr)] string filename, [MarshalAs(UnmanagedType.LPStr)] string mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_foreign_load")]
            internal static extern int VipsForeignLoad([MarshalAs(UnmanagedType.LPStr)] string filename, global::System.IntPtr @out, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_foreign_save")]
            internal static extern int VipsForeignSave(global::System.IntPtr @in, [MarshalAs(UnmanagedType.LPStr)] string filename, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__deprecated_open_read")]
            internal static extern global::System.IntPtr VipsDeprecatedOpenRead([MarshalAs(UnmanagedType.LPStr)] string filename, int sequential);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__deprecated_open_write")]
            internal static extern global::System.IntPtr VipsDeprecatedOpenWrite([MarshalAs(UnmanagedType.LPStr)] string filename);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__Lab2LabQ_vec")]
            internal static extern void VipsLab2LabQ_vec(byte* @out, float* @in, int width);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__LabQ2Lab_vec")]
            internal static extern void VipsLabQ2LabVec(float* @out, byte* @in, int width);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_window_ref")]
            internal static extern global::System.IntPtr VipsWindowRef(global::System.IntPtr im, int top, int height);
        }

        public static global::NetVips.VipsImage VipsImageNewMode(string filename, string mode)
        {
            var __ret = __Internal.VipsImageNewMode(filename, mode);
            global::NetVips.VipsImage __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__ret);
            return __result0;
        }

        public static int VipsForeignLoad(string filename, out global::NetVips.VipsImage @out, string[] options = null)
        {
            @out = new global::NetVips.VipsImage();
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsForeignLoad(filename, __arg1, options);
            global::NetVips.VipsImage __result0;
            if (__arg1 == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__arg1))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__arg1];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__arg1);
            @out = __result0;
            return __ret;
        }

        public static int VipsForeignSave(global::NetVips.VipsImage @in, string filename, string[] options = null)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            var __ret = __Internal.VipsForeignSave(__arg0, filename, options);
            return __ret;
        }

        public static global::NetVips.VipsImage VipsDeprecatedOpenRead(string filename, int sequential)
        {
            var __ret = __Internal.VipsDeprecatedOpenRead(filename, sequential);
            global::NetVips.VipsImage __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__ret);
            return __result0;
        }

        public static global::NetVips.VipsImage VipsDeprecatedOpenWrite(string filename)
        {
            var __ret = __Internal.VipsDeprecatedOpenWrite(filename);
            global::NetVips.VipsImage __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__ret);
            return __result0;
        }

        public static void VipsLab2LabQ_vec(byte* @out, ref float @in, int width)
        {
            fixed (float* __refParamPtr1 = &@in)
            {
                var __arg1 = __refParamPtr1;
                __Internal.VipsLab2LabQ_vec(@out, __arg1, width);
            }
        }

        public static void VipsLabQ2LabVec(ref float @out, byte* @in, int width)
        {
            fixed (float* __refParamPtr0 = &@out)
            {
                var __arg0 = __refParamPtr0;
                __Internal.VipsLabQ2LabVec(__arg0, @in, width);
            }
        }

        public static global::NetVips.VipsWindow VipsWindowRef(global::NetVips.VipsImage im, int top, int height)
        {
            var __arg0 = ReferenceEquals(im, null) ? global::System.IntPtr.Zero : im.__Instance;
            var __ret = __Internal.VipsWindowRef(__arg0, top, height);
            global::NetVips.VipsWindow __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsWindow.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsWindow) global::NetVips.VipsWindow.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsWindow.__CreateInstance(__ret);
            return __result0;
        }

        public static ulong* VipsImageSizeofBandformat
        {
            get
            {
                var __ptr = (ulong*)CppSharp.SymbolResolver.ResolveSymbol("libvips-42.dll", "vips__image_sizeof_bandformat");
                return __ptr;
            }
        }
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int ImInitObjFn(global::System.IntPtr obj, sbyte* str);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int ImDestObjFn(global::System.IntPtr obj);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int ImPrintObjFn(global::System.IntPtr obj);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int ImDispatchFn(global::System.IntPtr argv);

    public unsafe partial class dispatch
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips__input_interpolate_init")]
            internal static extern int VipsInputInterpolateInit(global::System.IntPtr obj, sbyte* str);
        }

        public static int VipsInputInterpolateInit(global::System.IntPtr obj, sbyte* str)
        {
            var __ret = __Internal.VipsInputInterpolateInit(obj, str);
            return __ret;
        }
    }

    [Flags]
    public enum VipsBBits
    {
        IM_BBITS_BYTE = 8,
        IM_BBITS_SHORT = 16,
        IM_BBITS_INT = 32,
        IM_BBITS_FLOAT = 32,
        IM_BBITS_COMPLEX = 64,
        IM_BBITS_DOUBLE = 64,
        IM_BBITS_DPCOMPLEX = 128
    }

    public unsafe partial class almostdeprecated
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_warn")]
            internal static extern void VipsWarn([MarshalAs(UnmanagedType.LPStr)] string domain, [MarshalAs(UnmanagedType.LPStr)] string fmt, string[] options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_info_set")]
            internal static extern void VipsInfoSet(int info);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_info")]
            internal static extern void VipsInfo([MarshalAs(UnmanagedType.LPStr)] string domain, [MarshalAs(UnmanagedType.LPStr)] string fmt, string[] options);
        }

        public static void VipsWarn(string domain, string fmt, string[] options = null)
        {
            __Internal.VipsWarn(domain, fmt, options);
        }

        public static void VipsInfoSet(int info)
        {
            __Internal.VipsInfoSet(info);
        }

        public static void VipsInfo(string domain, string fmt, string[] options = null)
        {
            __Internal.VipsInfo(domain, fmt, options);
        }
    }
}

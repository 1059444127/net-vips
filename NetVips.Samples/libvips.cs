// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace NetVips
{
    public unsafe partial class vips
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_init")]
            internal static extern int VipsInit([MarshalAs(UnmanagedType.LPStr)] string argv0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_leak_set")]
            internal static extern void VipsLeakSet(int leak);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_version")]
            internal static extern int VipsVersion(int flag);
        }

        public static int VipsInit(string argv0)
        {
            var __ret = __Internal.VipsInit(argv0);
            return __ret;
        }

        public static void VipsLeakSet(int leak)
        {
            __Internal.VipsLeakSet(leak);
        }

        public static int VipsVersion(int flag)
        {
            var __ret = __Internal.VipsVersion(flag);
            return __ret;
        }
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int GCompareFunc(global::System.IntPtr a, global::System.IntPtr b);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int GCompareDataFunc(global::System.IntPtr a, global::System.IntPtr b, global::System.IntPtr user_data);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int GEqualFunc(global::System.IntPtr a, global::System.IntPtr b);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GDestroyNotify(global::System.IntPtr data);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GFunc(global::System.IntPtr data, global::System.IntPtr user_data);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate uint GHashFunc(global::System.IntPtr key);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GHFunc(global::System.IntPtr key, global::System.IntPtr value, global::System.IntPtr user_data);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GFreeFunc(global::System.IntPtr data);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr GTranslateFunc([MarshalAs(UnmanagedType.LPStr)] string str, global::System.IntPtr data);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr GThreadFunc(global::System.IntPtr data);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GVoidFunc();

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GDataForeachFunc(uint key_id, global::System.IntPtr data, global::System.IntPtr user_data);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr GDuplicateFunc(global::System.IntPtr data, global::System.IntPtr user_data);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int GHRFunc(global::System.IntPtr key, global::System.IntPtr value, global::System.IntPtr user_data);

    public unsafe partial class gmem
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="g_free")]
            internal static extern void GFree(global::System.IntPtr mem);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="g_malloc")]
            internal static extern global::System.IntPtr GMalloc(ulong n_bytes);
        }

        public static void GFree(global::System.IntPtr mem)
        {
            __Internal.GFree(mem);
        }

        public static global::System.IntPtr GMalloc(ulong n_bytes)
        {
            var __ret = __Internal.GMalloc(n_bytes);
            return __ret;
        }

        public static int GMemGcFriendly
        {
            get
            {
                var __ptr = (int*)CppSharp.SymbolResolver.ResolveSymbol("libvips-42.dll", "g_mem_gc_friendly");
                return *__ptr;
            }

            set
            {
                var __ptr = (int*)CppSharp.SymbolResolver.ResolveSymbol("libvips-42.dll", "g_mem_gc_friendly");
                *__ptr = value;
            }
        }
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr GCopyFunc(global::System.IntPtr src, global::System.IntPtr data);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GHookFunc(global::System.IntPtr data);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int GHookCheckFunc(global::System.IntPtr data);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int GSourceFunc(global::System.IntPtr user_data);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GSourceDummyMarshal();

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GChildWatchFunc(global::System.IntPtr pid, int status, global::System.IntPtr user_data);

    public unsafe partial class gunicode
    {
        public partial struct __Internal
        {
        }

        public static string GUtf8Skip
        {
            get
            {
                var __ptr = (global::System.IntPtr*)CppSharp.SymbolResolver.ResolveSymbol("libvips-42.dll", "g_utf8_skip");
                return Marshal.PtrToStringAnsi(*__ptr);
            }
        }
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GPrintFunc([MarshalAs(UnmanagedType.LPStr)] string @string);

    public unsafe partial class gmessages
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="g_log_remove_handler")]
            internal static extern void GLogRemoveHandler([MarshalAs(UnmanagedType.LPStr)] string log_domain, uint handler_id);
        }

        public static void GLogRemoveHandler(string log_domain, uint handler_id)
        {
            __Internal.GLogRemoveHandler(log_domain, handler_id);
        }
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GSpawnChildSetupFunc(global::System.IntPtr user_data);

    public unsafe partial class gstrfuncs
    {
        public partial struct __Internal
        {
        }

        public static ushort* GAsciiTable
        {
            get
            {
                var __ptr = (ushort**)CppSharp.SymbolResolver.ResolveSymbol("libvips-42.dll", "g_ascii_table");
                return *__ptr;
            }
        }
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GTestFunc();

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GTestDataFunc(global::System.IntPtr user_data);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GTestFixtureFunc(global::System.IntPtr fixture, global::System.IntPtr user_data);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int GTraverseFunc(global::System.IntPtr key, global::System.IntPtr value, global::System.IntPtr data);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr GCacheNewFunc(global::System.IntPtr key);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr GCacheDupFunc(global::System.IntPtr value);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GCacheDestroyFunc(global::System.IntPtr value);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate sbyte* GCompletionFunc(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int GCompletionStrncmpFunc([MarshalAs(UnmanagedType.LPStr)] string s1, [MarshalAs(UnmanagedType.LPStr)] string s2, ulong n);

    public unsafe partial class gthread
    {
        public partial struct __Internal
        {
        }

        public static int GThreadUseDefaultImpl
        {
            get
            {
                var __ptr = (int*)CppSharp.SymbolResolver.ResolveSymbol("libvips-42.dll", "g_thread_use_default_impl");
                return *__ptr;
            }

            set
            {
                var __ptr = (int*)CppSharp.SymbolResolver.ResolveSymbol("libvips-42.dll", "g_thread_use_default_impl");
                *__ptr = value;
            }
        }

        public static Func<ulong> GThreadGettime
        {
            get
            {
                var __ptr = (global::System.IntPtr*)CppSharp.SymbolResolver.ResolveSymbol("libvips-42.dll", "g_thread_gettime");
                var __ptr0 = *__ptr;
                return (Func<ulong>)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(Func<ulong>));
            }

            set
            {
                var __ptr = (global::System.IntPtr*)CppSharp.SymbolResolver.ResolveSymbol("libvips-42.dll", "g_thread_gettime");
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public static int GThreadsGotInitialized
        {
            get
            {
                var __ptr = (int*)CppSharp.SymbolResolver.ResolveSymbol("libvips-42.dll", "g_threads_got_initialized");
                return *__ptr;
            }

            set
            {
                var __ptr = (int*)CppSharp.SymbolResolver.ResolveSymbol("libvips-42.dll", "g_threads_got_initialized");
                *__ptr = value;
            }
        }
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GObjectGetPropertyFunc(global::System.IntPtr @object, uint property_id, global::System.IntPtr value, global::System.IntPtr pspec);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GObjectSetPropertyFunc(global::System.IntPtr @object, uint property_id, global::System.IntPtr value, global::System.IntPtr pspec);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GObjectFinalizeFunc(global::System.IntPtr @object);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GWeakNotify(global::System.IntPtr data, global::System.IntPtr where_the_object_was);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GToggleNotify(global::System.IntPtr data, global::System.IntPtr @object, int is_last_ref);

    public unsafe partial class GObject : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.GTypeInstance.__Internal g_type_instance;

            [FieldOffset(8)]
            internal uint ref_count;

            [FieldOffset(16)]
            internal global::System.IntPtr qdata;
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.GObject> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.GObject>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.GObject __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.GObject(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.GObject __CreateInstance(global::NetVips.GObject.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.GObject(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.GObject.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.GObject.__Internal));
            *(global::NetVips.GObject.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GObject(global::NetVips.GObject.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GObject(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        ~GObject()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.GObject __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint RefCount
        {
            get
            {
                return ((global::NetVips.GObject.__Internal*) __Instance)->ref_count;
            }

            set
            {
                ((global::NetVips.GObject.__Internal*)__Instance)->ref_count = value;
            }
        }
    }

    public unsafe partial class GObjectClass
    {
        [StructLayout(LayoutKind.Explicit, Size = 136)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.GTypeClass.__Internal g_type_class;

            [FieldOffset(8)]
            internal global::System.IntPtr construct_properties;

            [FieldOffset(16)]
            internal global::System.IntPtr constructor;

            [FieldOffset(24)]
            internal global::System.IntPtr set_property;

            [FieldOffset(32)]
            internal global::System.IntPtr get_property;

            [FieldOffset(40)]
            internal global::System.IntPtr dispose;

            [FieldOffset(48)]
            internal global::System.IntPtr finalize;

            [FieldOffset(56)]
            internal global::System.IntPtr dispatch_properties_changed;

            [FieldOffset(64)]
            internal global::System.IntPtr notify;

            [FieldOffset(72)]
            internal global::System.IntPtr constructed;

            [FieldOffset(80)]
            internal ulong flags;

            [FieldOffset(88)]
            internal void* pdummy;
        }
    }

    public unsafe partial class gobject
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="g_object_set_property")]
            internal static extern void GObjectSetProperty(global::System.IntPtr @object, [MarshalAs(UnmanagedType.LPStr)] string property_name, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="g_object_get_property")]
            internal static extern void GObjectGetProperty(global::System.IntPtr @object, [MarshalAs(UnmanagedType.LPStr)] string property_name, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="g_object_ref")]
            internal static extern global::System.IntPtr GObjectRef(global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="g_object_unref")]
            internal static extern void GObjectUnref(global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="g_value_set_object")]
            internal static extern void GValueSetObject(global::System.IntPtr value, global::System.IntPtr v_object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="g_value_get_object")]
            internal static extern global::System.IntPtr GValueGetObject(global::System.IntPtr value);
        }

        public static void GObjectSetProperty(global::NetVips.GObject @object, string property_name, global::NetVips.GValue value)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __arg2 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            __Internal.GObjectSetProperty(__arg0, property_name, __arg2);
        }

        public static void GObjectGetProperty(global::NetVips.GObject @object, string property_name, global::NetVips.GValue value)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __arg2 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            __Internal.GObjectGetProperty(__arg0, property_name, __arg2);
        }

        public static global::System.IntPtr GObjectRef(global::System.IntPtr @object)
        {
            var __ret = __Internal.GObjectRef(@object);
            return __ret;
        }

        public static void GObjectUnref(global::System.IntPtr @object)
        {
            __Internal.GObjectUnref(@object);
        }

        public static void GValueSetObject(global::NetVips.GValue value, global::System.IntPtr v_object)
        {
            var __arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            __Internal.GValueSetObject(__arg0, v_object);
        }

        public static global::System.IntPtr GValueGetObject(global::NetVips.GValue value)
        {
            var __arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            var __ret = __Internal.GValueGetObject(__arg0);
            return __ret;
        }
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GBaseInitFunc(global::System.IntPtr g_class);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GBaseFinalizeFunc(global::System.IntPtr g_class);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GClassInitFunc(global::System.IntPtr g_class, global::System.IntPtr class_data);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GClassFinalizeFunc(global::System.IntPtr g_class, global::System.IntPtr class_data);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GInterfaceInitFunc(global::System.IntPtr g_iface, global::System.IntPtr iface_data);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GInterfaceFinalizeFunc(global::System.IntPtr g_iface, global::System.IntPtr iface_data);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int GTypeClassCacheFunc(global::System.IntPtr cache_data, global::System.IntPtr g_class);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GTypeInterfaceCheckFunc(global::System.IntPtr check_data, global::System.IntPtr g_iface);

    public unsafe partial class GTypeClass : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal ulong g_type;
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.GTypeClass> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.GTypeClass>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.GTypeClass __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.GTypeClass(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.GTypeClass __CreateInstance(global::NetVips.GTypeClass.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.GTypeClass(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.GTypeClass.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.GTypeClass.__Internal));
            *(global::NetVips.GTypeClass.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GTypeClass(global::NetVips.GTypeClass.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GTypeClass(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        ~GTypeClass()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.GTypeClass __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong GType
        {
            get
            {
                return ((global::NetVips.GTypeClass.__Internal*) __Instance)->g_type;
            }

            set
            {
                ((global::NetVips.GTypeClass.__Internal*)__Instance)->g_type = value;
            }
        }
    }

    public unsafe partial class GTypeInstance
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr g_class;
        }
    }

    public unsafe partial class gtype
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="g_type_name")]
            internal static extern global::System.IntPtr GTypeName(ulong type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="g_type_from_name")]
            internal static extern ulong GTypeFromName([MarshalAs(UnmanagedType.LPStr)] string name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="g_type_fundamental")]
            internal static extern ulong GTypeFundamental(ulong type_id);
        }

        public static string GTypeName(ulong type)
        {
            var __ret = __Internal.GTypeName(type);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static ulong GTypeFromName(string name)
        {
            var __ret = __Internal.GTypeFromName(name);
            return __ret;
        }

        public static ulong GTypeFundamental(ulong type_id)
        {
            var __ret = __Internal.GTypeFundamental(type_id);
            return __ret;
        }
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GValueTransform(global::System.IntPtr src_value, global::System.IntPtr dest_value);

    public unsafe partial class GValue : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal ulong g_type;

            [FieldOffset(8)]
            internal fixed byte data[16];
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.GValue> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.GValue>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.GValue __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.GValue(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.GValue __CreateInstance(global::NetVips.GValue.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.GValue(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.GValue.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.GValue.__Internal));
            *(global::NetVips.GValue.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GValue(global::NetVips.GValue.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GValue(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        ~GValue()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.GValue __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong GType
        {
            get
            {
                return ((global::NetVips.GValue.__Internal*) __Instance)->g_type;
            }

            set
            {
                ((global::NetVips.GValue.__Internal*)__Instance)->g_type = value;
            }
        }
    }

    public unsafe partial class gvalue
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="g_value_init")]
            internal static extern global::System.IntPtr GValueInit(global::System.IntPtr value, ulong g_type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="g_value_unset")]
            internal static extern void GValueUnset(global::System.IntPtr value);
        }

        public static global::NetVips.GValue GValueInit(global::NetVips.GValue value, ulong g_type)
        {
            var __arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            var __ret = __Internal.GValueInit(__arg0, g_type);
            global::NetVips.GValue __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.GValue.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.GValue) global::NetVips.GValue.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.GValue.__CreateInstance(__ret);
            return __result0;
        }

        public static void GValueUnset(global::NetVips.GValue value)
        {
            var __arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            __Internal.GValueUnset(__arg0);
        }
    }

    public enum GParamFlags
    {
        G_PARAM_READABLE = 1,
        G_PARAM_WRITABLE = 2,
        G_PARAM_READWRITE = 3,
        G_PARAM_CONSTRUCT = 4,
        G_PARAM_CONSTRUCT_ONLY = 8,
        G_PARAM_LAX_VALIDATION = 16,
        G_PARAM_STATIC_NAME = 32,
        G_PARAM_PRIVATE = 32,
        G_PARAM_STATIC_NICK = 64,
        G_PARAM_STATIC_BLURB = 128,
        G_PARAM_EXPLICIT_NOTIFY = 1073741824,
        G_PARAM_DEPRECATED = -2147483648
    }

    public unsafe partial class GParamSpec : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 72)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.GTypeInstance.__Internal g_type_instance;

            [FieldOffset(8)]
            internal global::System.IntPtr name;

            [FieldOffset(16)]
            internal global::NetVips.GParamFlags flags;

            [FieldOffset(24)]
            internal ulong value_type;

            [FieldOffset(32)]
            internal ulong owner_type;

            [FieldOffset(40)]
            internal global::System.IntPtr _nick;

            [FieldOffset(48)]
            internal global::System.IntPtr _blurb;

            [FieldOffset(56)]
            internal global::System.IntPtr qdata;

            [FieldOffset(64)]
            internal uint ref_count;

            [FieldOffset(68)]
            internal uint param_id;
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.GParamSpec> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.GParamSpec>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.GParamSpec __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.GParamSpec(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.GParamSpec __CreateInstance(global::NetVips.GParamSpec.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.GParamSpec(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.GParamSpec.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.GParamSpec.__Internal));
            *(global::NetVips.GParamSpec.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GParamSpec(global::NetVips.GParamSpec.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GParamSpec(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        ~GParamSpec()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.GParamSpec __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public string Name
        {
            get
            {
                return Marshal.PtrToStringAnsi(((global::NetVips.GParamSpec.__Internal*) __Instance)->name);
            }

            set
            {
                ((global::NetVips.GParamSpec.__Internal*)__Instance)->name = Marshal.StringToHGlobalAnsi(value);
            }
        }

        public ulong ValueType
        {
            get
            {
                return ((global::NetVips.GParamSpec.__Internal*) __Instance)->value_type;
            }

            set
            {
                ((global::NetVips.GParamSpec.__Internal*)__Instance)->value_type = value;
            }
        }

        public ulong OwnerType
        {
            get
            {
                return ((global::NetVips.GParamSpec.__Internal*) __Instance)->owner_type;
            }

            set
            {
                ((global::NetVips.GParamSpec.__Internal*)__Instance)->owner_type = value;
            }
        }

        public char* Nick
        {
            get
            {
                return (char*) ((global::NetVips.GParamSpec.__Internal*) __Instance)->_nick;
            }

            set
            {
                ((global::NetVips.GParamSpec.__Internal*)__Instance)->_nick = (global::System.IntPtr) (sbyte*) value;
            }
        }

        public char* Blurb
        {
            get
            {
                return (char*) ((global::NetVips.GParamSpec.__Internal*) __Instance)->_blurb;
            }

            set
            {
                ((global::NetVips.GParamSpec.__Internal*)__Instance)->_blurb = (global::System.IntPtr) (sbyte*) value;
            }
        }

        public uint RefCount
        {
            get
            {
                return ((global::NetVips.GParamSpec.__Internal*) __Instance)->ref_count;
            }

            set
            {
                ((global::NetVips.GParamSpec.__Internal*)__Instance)->ref_count = value;
            }
        }

        public uint ParamId
        {
            get
            {
                return ((global::NetVips.GParamSpec.__Internal*) __Instance)->param_id;
            }

            set
            {
                ((global::NetVips.GParamSpec.__Internal*)__Instance)->param_id = value;
            }
        }
    }

    public unsafe partial class gparam
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="g_param_spec_get_blurb")]
            internal static extern global::System.IntPtr GParamSpecGetBlurb(global::System.IntPtr pspec);
        }

        public static string GParamSpecGetBlurb(global::NetVips.GParamSpec pspec)
        {
            var __arg0 = ReferenceEquals(pspec, null) ? global::System.IntPtr.Zero : pspec.__Instance;
            var __ret = __Internal.GParamSpecGetBlurb(__arg0);
            return Marshal.PtrToStringAnsi(__ret);
        }
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GCallback();

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr GBoxedCopyFunc(global::System.IntPtr boxed);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void GBoxedFreeFunc(global::System.IntPtr boxed);

    public unsafe partial class genums
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="g_value_set_enum")]
            internal static extern void GValueSetEnum(global::System.IntPtr value, int v_enum);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="g_value_get_enum")]
            internal static extern int GValueGetEnum(global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="g_value_set_flags")]
            internal static extern void GValueSetFlags(global::System.IntPtr value, uint v_flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="g_value_get_flags")]
            internal static extern uint GValueGetFlags(global::System.IntPtr value);
        }

        public static void GValueSetEnum(global::NetVips.GValue value, int v_enum)
        {
            var __arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            __Internal.GValueSetEnum(__arg0, v_enum);
        }

        public static int GValueGetEnum(global::NetVips.GValue value)
        {
            var __arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            var __ret = __Internal.GValueGetEnum(__arg0);
            return __ret;
        }

        public static void GValueSetFlags(global::NetVips.GValue value, uint v_flags)
        {
            var __arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            __Internal.GValueSetFlags(__arg0, v_flags);
        }

        public static uint GValueGetFlags(global::NetVips.GValue value)
        {
            var __arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            var __ret = __Internal.GValueGetFlags(__arg0);
            return __ret;
        }
    }

    public unsafe partial class gparamspecs
    {
        public partial struct __Internal
        {
        }

        public static ulong* GParamSpecTypes
        {
            get
            {
                var __ptr = (ulong**)CppSharp.SymbolResolver.ResolveSymbol("libvips-42.dll", "g_param_spec_types");
                return *__ptr;
            }

            set
            {
                var __ptr = (ulong**)CppSharp.SymbolResolver.ResolveSymbol("libvips-42.dll", "g_param_spec_types");
                *__ptr = value;
            }
        }
    }

    public unsafe partial class gvaluetypes
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="g_value_set_boolean")]
            internal static extern void GValueSetBoolean(global::System.IntPtr value, int v_boolean);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="g_value_get_boolean")]
            internal static extern int GValueGetBoolean(global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="g_value_set_int")]
            internal static extern void GValueSetInt(global::System.IntPtr value, int v_int);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="g_value_get_int")]
            internal static extern int GValueGetInt(global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="g_value_set_double")]
            internal static extern void GValueSetDouble(global::System.IntPtr value, double v_double);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="g_value_get_double")]
            internal static extern double GValueGetDouble(global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="g_value_set_string")]
            internal static extern void GValueSetString(global::System.IntPtr value, [MarshalAs(UnmanagedType.LPStr)] string v_string);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="g_value_get_string")]
            internal static extern global::System.IntPtr GValueGetString(global::System.IntPtr value);
        }

        public static void GValueSetBoolean(global::NetVips.GValue value, int v_boolean)
        {
            var __arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            __Internal.GValueSetBoolean(__arg0, v_boolean);
        }

        public static int GValueGetBoolean(global::NetVips.GValue value)
        {
            var __arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            var __ret = __Internal.GValueGetBoolean(__arg0);
            return __ret;
        }

        public static void GValueSetInt(global::NetVips.GValue value, int v_int)
        {
            var __arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            __Internal.GValueSetInt(__arg0, v_int);
        }

        public static int GValueGetInt(global::NetVips.GValue value)
        {
            var __arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            var __ret = __Internal.GValueGetInt(__arg0);
            return __ret;
        }

        public static void GValueSetDouble(global::NetVips.GValue value, double v_double)
        {
            var __arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            __Internal.GValueSetDouble(__arg0, v_double);
        }

        public static double GValueGetDouble(global::NetVips.GValue value)
        {
            var __arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            var __ret = __Internal.GValueGetDouble(__arg0);
            return __ret;
        }

        public static void GValueSetString(global::NetVips.GValue value, string v_string)
        {
            var __arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            __Internal.GValueSetString(__arg0, v_string);
        }

        public static string GValueGetString(global::NetVips.GValue value)
        {
            var __arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            var __ret = __Internal.GValueGetString(__arg0);
            return Marshal.PtrToStringAnsi(__ret);
        }
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int VipsCallbackFn(global::System.IntPtr a, global::System.IntPtr b);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr VipsSListMap2Fn(global::System.IntPtr item, global::System.IntPtr a, global::System.IntPtr b);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr VipsSListMap4Fn(global::System.IntPtr item, global::System.IntPtr a, global::System.IntPtr b, global::System.IntPtr c, global::System.IntPtr d);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr VipsSListFold2Fn(global::System.IntPtr item, global::System.IntPtr a, global::System.IntPtr b, global::System.IntPtr c);

    public unsafe partial class basic
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_path_filename7")]
            internal static extern sbyte* VipsPathFilename7([MarshalAs(UnmanagedType.LPStr)] string path);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_path_mode7")]
            internal static extern sbyte* VipsPathMode7([MarshalAs(UnmanagedType.LPStr)] string path);
        }

        public static char* VipsPathFilename7(string path)
        {
            var __ret = __Internal.VipsPathFilename7(path);
            return (char*) __ret;
        }

        public static char* VipsPathMode7(string path)
        {
            var __ret = __Internal.VipsPathMode7(path);
            return (char*) __ret;
        }
    }

    public unsafe partial class util
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_enum_from_nick")]
            internal static extern int VipsEnumFromNick([MarshalAs(UnmanagedType.LPStr)] string domain, ulong type, [MarshalAs(UnmanagedType.LPStr)] string str);
        }

        public static int VipsEnumFromNick(string domain, ulong type, string str)
        {
            var __ret = __Internal.VipsEnumFromNick(domain, type, str);
            return __ret;
        }
    }

    [Flags]
    public enum VipsArgumentFlags
    {
        VIPS_ARGUMENT_NONE = 0,
        VIPS_ARGUMENT_REQUIRED = 1,
        VIPS_ARGUMENT_CONSTRUCT = 2,
        VIPS_ARGUMENT_SET_ONCE = 4,
        VIPS_ARGUMENT_SET_ALWAYS = 8,
        VIPS_ARGUMENT_INPUT = 16,
        VIPS_ARGUMENT_OUTPUT = 32,
        VIPS_ARGUMENT_DEPRECATED = 64,
        VIPS_ARGUMENT_MODIFY = 128
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr VipsArgumentMapFn(global::System.IntPtr @object, global::System.IntPtr pspec, global::System.IntPtr argument_class, global::System.IntPtr argument_instance, global::System.IntPtr a, global::System.IntPtr b);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr VipsArgumentClassMapFn(global::System.IntPtr object_class, global::System.IntPtr pspec, global::System.IntPtr argument_class, global::System.IntPtr a, global::System.IntPtr b);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr VipsObjectSetArguments(global::System.IntPtr @object, global::System.IntPtr a, global::System.IntPtr b);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr VipsTypeMapFn(ulong type, global::System.IntPtr a);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr VipsTypeMap2Fn(ulong type, global::System.IntPtr a, global::System.IntPtr b);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr VipsClassMapFn(global::System.IntPtr cls, global::System.IntPtr a);

    public unsafe partial class VipsObject : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.GObject.__Internal parent_instance;

            [FieldOffset(24)]
            internal int constructed;

            [FieldOffset(28)]
            internal int static_object;

            [FieldOffset(32)]
            internal global::System.IntPtr argument_table;

            [FieldOffset(40)]
            internal global::System.IntPtr nickname;

            [FieldOffset(48)]
            internal global::System.IntPtr description;

            [FieldOffset(56)]
            internal int preclose;

            [FieldOffset(60)]
            internal int close;

            [FieldOffset(64)]
            internal int postclose;

            [FieldOffset(72)]
            internal ulong local_memory;
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsObject> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsObject>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsObject __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsObject(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsObject __CreateInstance(global::NetVips.VipsObject.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsObject(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsObject.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsObject.__Internal));
            *(global::NetVips.VipsObject.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsObject(global::NetVips.VipsObject.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsObject(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        ~VipsObject()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsObject __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NetVips.GObject ParentInstance
        {
            get
            {
                return global::NetVips.GObject.__CreateInstance(new global::System.IntPtr(&((global::NetVips.VipsObject.__Internal*) __Instance)->parent_instance));
            }

            set
            {
                ((global::NetVips.VipsObject.__Internal*)__Instance)->parent_instance = ReferenceEquals(value, null) ? new global::NetVips.GObject.__Internal() : *(global::NetVips.GObject.__Internal*) value.__Instance;
            }
        }

        public int Constructed
        {
            get
            {
                return ((global::NetVips.VipsObject.__Internal*) __Instance)->constructed;
            }

            set
            {
                ((global::NetVips.VipsObject.__Internal*)__Instance)->constructed = value;
            }
        }

        public int StaticObject
        {
            get
            {
                return ((global::NetVips.VipsObject.__Internal*) __Instance)->static_object;
            }

            set
            {
                ((global::NetVips.VipsObject.__Internal*)__Instance)->static_object = value;
            }
        }

        public char* Nickname
        {
            get
            {
                return (char*) ((global::NetVips.VipsObject.__Internal*) __Instance)->nickname;
            }

            set
            {
                ((global::NetVips.VipsObject.__Internal*)__Instance)->nickname = (global::System.IntPtr) (sbyte*) value;
            }
        }

        public char* Description
        {
            get
            {
                return (char*) ((global::NetVips.VipsObject.__Internal*) __Instance)->description;
            }

            set
            {
                ((global::NetVips.VipsObject.__Internal*)__Instance)->description = (global::System.IntPtr) (sbyte*) value;
            }
        }

        public int Preclose
        {
            get
            {
                return ((global::NetVips.VipsObject.__Internal*) __Instance)->preclose;
            }

            set
            {
                ((global::NetVips.VipsObject.__Internal*)__Instance)->preclose = value;
            }
        }

        public int Close
        {
            get
            {
                return ((global::NetVips.VipsObject.__Internal*) __Instance)->close;
            }

            set
            {
                ((global::NetVips.VipsObject.__Internal*)__Instance)->close = value;
            }
        }

        public int Postclose
        {
            get
            {
                return ((global::NetVips.VipsObject.__Internal*) __Instance)->postclose;
            }

            set
            {
                ((global::NetVips.VipsObject.__Internal*)__Instance)->postclose = value;
            }
        }

        public ulong LocalMemory
        {
            get
            {
                return ((global::NetVips.VipsObject.__Internal*) __Instance)->local_memory;
            }

            set
            {
                ((global::NetVips.VipsObject.__Internal*)__Instance)->local_memory = value;
            }
        }
    }

    public unsafe partial class VipsObjectClass : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 328)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.GObjectClass.__Internal parent_class;

            [FieldOffset(136)]
            internal global::System.IntPtr build;

            [FieldOffset(144)]
            internal global::System.IntPtr postbuild;

            [FieldOffset(152)]
            internal global::System.IntPtr summary_class;

            [FieldOffset(160)]
            internal global::System.IntPtr summary;

            [FieldOffset(168)]
            internal global::System.IntPtr dump;

            [FieldOffset(176)]
            internal global::System.IntPtr sanity;

            [FieldOffset(184)]
            internal global::System.IntPtr rewind;

            [FieldOffset(192)]
            internal global::System.IntPtr preclose;

            [FieldOffset(200)]
            internal global::System.IntPtr close;

            [FieldOffset(208)]
            internal global::System.IntPtr postclose;

            [FieldOffset(216)]
            internal global::System.IntPtr new_from_string;

            [FieldOffset(224)]
            internal global::System.IntPtr to_string;

            [FieldOffset(232)]
            internal int output_needs_arg;

            [FieldOffset(240)]
            internal global::System.IntPtr output_to_arg;

            [FieldOffset(248)]
            internal global::System.IntPtr nickname;

            [FieldOffset(256)]
            internal global::System.IntPtr description;

            [FieldOffset(264)]
            internal global::System.IntPtr argument_table;

            [FieldOffset(272)]
            internal global::System.IntPtr argument_table_traverse;

            [FieldOffset(280)]
            internal ulong argument_table_traverse_gtype;

            [FieldOffset(288)]
            internal int deprecated;

            [FieldOffset(296)]
            internal global::System.IntPtr _vips_reserved1;

            [FieldOffset(304)]
            internal global::System.IntPtr _vips_reserved2;

            [FieldOffset(312)]
            internal global::System.IntPtr _vips_reserved3;

            [FieldOffset(320)]
            internal global::System.IntPtr _vips_reserved4;
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsObjectClass> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsObjectClass>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsObjectClass __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsObjectClass(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsObjectClass __CreateInstance(global::NetVips.VipsObjectClass.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsObjectClass(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsObjectClass.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsObjectClass.__Internal));
            *(global::NetVips.VipsObjectClass.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsObjectClass(global::NetVips.VipsObjectClass.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsObjectClass(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        ~VipsObjectClass()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsObjectClass __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int OutputNeedsArg
        {
            get
            {
                return ((global::NetVips.VipsObjectClass.__Internal*) __Instance)->output_needs_arg;
            }

            set
            {
                ((global::NetVips.VipsObjectClass.__Internal*)__Instance)->output_needs_arg = value;
            }
        }

        public string Nickname
        {
            get
            {
                return Marshal.PtrToStringAnsi(((global::NetVips.VipsObjectClass.__Internal*) __Instance)->nickname);
            }

            set
            {
                ((global::NetVips.VipsObjectClass.__Internal*)__Instance)->nickname = Marshal.StringToHGlobalAnsi(value);
            }
        }

        public string Description
        {
            get
            {
                return Marshal.PtrToStringAnsi(((global::NetVips.VipsObjectClass.__Internal*) __Instance)->description);
            }

            set
            {
                ((global::NetVips.VipsObjectClass.__Internal*)__Instance)->description = Marshal.StringToHGlobalAnsi(value);
            }
        }

        public ulong ArgumentTableTraverseGtype
        {
            get
            {
                return ((global::NetVips.VipsObjectClass.__Internal*) __Instance)->argument_table_traverse_gtype;
            }

            set
            {
                ((global::NetVips.VipsObjectClass.__Internal*)__Instance)->argument_table_traverse_gtype = value;
            }
        }

        public int Deprecated
        {
            get
            {
                return ((global::NetVips.VipsObjectClass.__Internal*) __Instance)->deprecated;
            }

            set
            {
                ((global::NetVips.VipsObjectClass.__Internal*)__Instance)->deprecated = value;
            }
        }
    }

    public unsafe partial class VipsArgument : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr pspec;
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsArgument> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsArgument>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsArgument __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsArgument(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsArgument __CreateInstance(global::NetVips.VipsArgument.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsArgument(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsArgument.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsArgument.__Internal));
            *(global::NetVips.VipsArgument.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsArgument(global::NetVips.VipsArgument.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsArgument(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        ~VipsArgument()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsArgument __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NetVips.GParamSpec Pspec
        {
            get
            {
                global::NetVips.GParamSpec __result0;
                if (((global::NetVips.VipsArgument.__Internal*) __Instance)->pspec == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.GParamSpec.NativeToManagedMap.ContainsKey(((global::NetVips.VipsArgument.__Internal*) __Instance)->pspec))
                    __result0 = (global::NetVips.GParamSpec) global::NetVips.GParamSpec.NativeToManagedMap[((global::NetVips.VipsArgument.__Internal*) __Instance)->pspec];
                else __result0 = global::NetVips.GParamSpec.__CreateInstance(((global::NetVips.VipsArgument.__Internal*) __Instance)->pspec);
                return __result0;
            }

            set
            {
                ((global::NetVips.VipsArgument.__Internal*)__Instance)->pspec = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class VipsArgumentClass : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 32)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.VipsArgument.__Internal parent;

            [FieldOffset(8)]
            internal global::System.IntPtr object_class;

            [FieldOffset(16)]
            internal global::NetVips.VipsArgumentFlags flags;

            [FieldOffset(20)]
            internal int priority;

            [FieldOffset(24)]
            internal uint offset;
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsArgumentClass> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsArgumentClass>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsArgumentClass __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsArgumentClass(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsArgumentClass __CreateInstance(global::NetVips.VipsArgumentClass.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsArgumentClass(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsArgumentClass.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsArgumentClass.__Internal));
            *(global::NetVips.VipsArgumentClass.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsArgumentClass(global::NetVips.VipsArgumentClass.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsArgumentClass(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        ~VipsArgumentClass()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsArgumentClass __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NetVips.VipsArgument Parent
        {
            get
            {
                return global::NetVips.VipsArgument.__CreateInstance(new global::System.IntPtr(&((global::NetVips.VipsArgumentClass.__Internal*) __Instance)->parent));
            }

            set
            {
                ((global::NetVips.VipsArgumentClass.__Internal*)__Instance)->parent = ReferenceEquals(value, null) ? new global::NetVips.VipsArgument.__Internal() : *(global::NetVips.VipsArgument.__Internal*) value.__Instance;
            }
        }

        public global::NetVips.VipsObjectClass ObjectClass
        {
            get
            {
                global::NetVips.VipsObjectClass __result0;
                if (((global::NetVips.VipsArgumentClass.__Internal*) __Instance)->object_class == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsObjectClass.NativeToManagedMap.ContainsKey(((global::NetVips.VipsArgumentClass.__Internal*) __Instance)->object_class))
                    __result0 = (global::NetVips.VipsObjectClass) global::NetVips.VipsObjectClass.NativeToManagedMap[((global::NetVips.VipsArgumentClass.__Internal*) __Instance)->object_class];
                else __result0 = global::NetVips.VipsObjectClass.__CreateInstance(((global::NetVips.VipsArgumentClass.__Internal*) __Instance)->object_class);
                return __result0;
            }

            set
            {
                ((global::NetVips.VipsArgumentClass.__Internal*)__Instance)->object_class = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public int Priority
        {
            get
            {
                return ((global::NetVips.VipsArgumentClass.__Internal*) __Instance)->priority;
            }

            set
            {
                ((global::NetVips.VipsArgumentClass.__Internal*)__Instance)->priority = value;
            }
        }

        public uint Offset
        {
            get
            {
                return ((global::NetVips.VipsArgumentClass.__Internal*) __Instance)->offset;
            }

            set
            {
                ((global::NetVips.VipsArgumentClass.__Internal*)__Instance)->offset = value;
            }
        }
    }

    public unsafe partial class VipsArgumentInstance : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.VipsArgument.__Internal parent;

            [FieldOffset(8)]
            internal global::System.IntPtr argument_class;

            [FieldOffset(16)]
            internal global::System.IntPtr @object;

            [FieldOffset(24)]
            internal int assigned;

            [FieldOffset(28)]
            internal uint close_id;

            [FieldOffset(32)]
            internal uint invalidate_id;
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsArgumentInstance> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsArgumentInstance>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsArgumentInstance __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsArgumentInstance(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsArgumentInstance __CreateInstance(global::NetVips.VipsArgumentInstance.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsArgumentInstance(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsArgumentInstance.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsArgumentInstance.__Internal));
            *(global::NetVips.VipsArgumentInstance.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsArgumentInstance(global::NetVips.VipsArgumentInstance.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsArgumentInstance(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        ~VipsArgumentInstance()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsArgumentInstance __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NetVips.VipsArgument Parent
        {
            get
            {
                return global::NetVips.VipsArgument.__CreateInstance(new global::System.IntPtr(&((global::NetVips.VipsArgumentInstance.__Internal*) __Instance)->parent));
            }

            set
            {
                ((global::NetVips.VipsArgumentInstance.__Internal*)__Instance)->parent = ReferenceEquals(value, null) ? new global::NetVips.VipsArgument.__Internal() : *(global::NetVips.VipsArgument.__Internal*) value.__Instance;
            }
        }

        public global::NetVips.VipsArgumentClass ArgumentClass
        {
            get
            {
                global::NetVips.VipsArgumentClass __result0;
                if (((global::NetVips.VipsArgumentInstance.__Internal*) __Instance)->argument_class == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsArgumentClass.NativeToManagedMap.ContainsKey(((global::NetVips.VipsArgumentInstance.__Internal*) __Instance)->argument_class))
                    __result0 = (global::NetVips.VipsArgumentClass) global::NetVips.VipsArgumentClass.NativeToManagedMap[((global::NetVips.VipsArgumentInstance.__Internal*) __Instance)->argument_class];
                else __result0 = global::NetVips.VipsArgumentClass.__CreateInstance(((global::NetVips.VipsArgumentInstance.__Internal*) __Instance)->argument_class);
                return __result0;
            }

            set
            {
                ((global::NetVips.VipsArgumentInstance.__Internal*)__Instance)->argument_class = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::NetVips.VipsObject Object
        {
            get
            {
                global::NetVips.VipsObject __result0;
                if (((global::NetVips.VipsArgumentInstance.__Internal*) __Instance)->@object == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsObject.NativeToManagedMap.ContainsKey(((global::NetVips.VipsArgumentInstance.__Internal*) __Instance)->@object))
                    __result0 = (global::NetVips.VipsObject) global::NetVips.VipsObject.NativeToManagedMap[((global::NetVips.VipsArgumentInstance.__Internal*) __Instance)->@object];
                else __result0 = global::NetVips.VipsObject.__CreateInstance(((global::NetVips.VipsArgumentInstance.__Internal*) __Instance)->@object);
                return __result0;
            }

            set
            {
                ((global::NetVips.VipsArgumentInstance.__Internal*)__Instance)->@object = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public int Assigned
        {
            get
            {
                return ((global::NetVips.VipsArgumentInstance.__Internal*) __Instance)->assigned;
            }

            set
            {
                ((global::NetVips.VipsArgumentInstance.__Internal*)__Instance)->assigned = value;
            }
        }

        public uint CloseId
        {
            get
            {
                return ((global::NetVips.VipsArgumentInstance.__Internal*) __Instance)->close_id;
            }

            set
            {
                ((global::NetVips.VipsArgumentInstance.__Internal*)__Instance)->close_id = value;
            }
        }

        public uint InvalidateId
        {
            get
            {
                return ((global::NetVips.VipsArgumentInstance.__Internal*) __Instance)->invalidate_id;
            }

            set
            {
                ((global::NetVips.VipsArgumentInstance.__Internal*)__Instance)->invalidate_id = value;
            }
        }
    }

    public unsafe partial class @object
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_argument_map")]
            internal static extern global::System.IntPtr VipsArgumentMap(global::System.IntPtr @object, global::System.IntPtr fn, global::System.IntPtr a, global::System.IntPtr b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_object_get_argument")]
            internal static extern int VipsObjectGetArgument(global::System.IntPtr @object, [MarshalAs(UnmanagedType.LPStr)] string name, global::System.IntPtr pspec, global::System.IntPtr argument_class, global::System.IntPtr argument_instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_object_set_from_string")]
            internal static extern int VipsObjectSetFromString(global::System.IntPtr @object, [MarshalAs(UnmanagedType.LPStr)] string @string);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_type_map")]
            internal static extern global::System.IntPtr VipsTypeMap(ulong @base, global::System.IntPtr fn, global::System.IntPtr a, global::System.IntPtr b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_type_find")]
            internal static extern ulong VipsTypeFind([MarshalAs(UnmanagedType.LPStr)] string basename, [MarshalAs(UnmanagedType.LPStr)] string nickname);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_nickname_find")]
            internal static extern global::System.IntPtr VipsNicknameFind(ulong type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_object_print_all")]
            internal static extern void VipsObjectPrintAll();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_object_unref_outputs")]
            internal static extern void VipsObjectUnrefOutputs(global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_object_get_description")]
            internal static extern global::System.IntPtr VipsObjectGetDescription(global::System.IntPtr @object);
        }

        public static global::System.IntPtr VipsArgumentMap(global::NetVips.VipsObject @object, global::NetVips.VipsArgumentMapFn fn, global::System.IntPtr a, global::System.IntPtr b)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __arg1 = fn == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fn);
            var __ret = __Internal.VipsArgumentMap(__arg0, __arg1, a, b);
            return __ret;
        }

        public static int VipsObjectGetArgument(global::NetVips.VipsObject @object, string name, global::NetVips.GParamSpec pspec, global::NetVips.VipsArgumentClass argument_class, global::NetVips.VipsArgumentInstance argument_instance)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __arg2 = ReferenceEquals(pspec, null) ? global::System.IntPtr.Zero : pspec.__Instance;
            var __arg3 = ReferenceEquals(argument_class, null) ? global::System.IntPtr.Zero : argument_class.__Instance;
            var __arg4 = ReferenceEquals(argument_instance, null) ? global::System.IntPtr.Zero : argument_instance.__Instance;
            var __ret = __Internal.VipsObjectGetArgument(__arg0, name, __arg2, __arg3, __arg4);
            return __ret;
        }

        public static int VipsObjectSetFromString(global::NetVips.VipsObject @object, string @string)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = __Internal.VipsObjectSetFromString(__arg0, @string);
            return __ret;
        }

        public static global::System.IntPtr VipsTypeMap(ulong @base, global::NetVips.VipsTypeMap2Fn fn, global::System.IntPtr a, global::System.IntPtr b)
        {
            var __arg1 = fn == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fn);
            var __ret = __Internal.VipsTypeMap(@base, __arg1, a, b);
            return __ret;
        }

        public static ulong VipsTypeFind(string basename, string nickname)
        {
            var __ret = __Internal.VipsTypeFind(basename, nickname);
            return __ret;
        }

        public static string VipsNicknameFind(ulong type)
        {
            var __ret = __Internal.VipsNicknameFind(type);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static void VipsObjectPrintAll()
        {
            __Internal.VipsObjectPrintAll();
        }

        public static void VipsObjectUnrefOutputs(global::NetVips.VipsObject @object)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            __Internal.VipsObjectUnrefOutputs(__arg0);
        }

        public static string VipsObjectGetDescription(global::NetVips.VipsObject @object)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = __Internal.VipsObjectGetDescription(__arg0);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static int VipsArgumentId
        {
            get
            {
                var __ptr = (int*)CppSharp.SymbolResolver.ResolveSymbol("libvips-42.dll", "_vips__argument_id");
                return *__ptr;
            }

            set
            {
                var __ptr = (int*)CppSharp.SymbolResolver.ResolveSymbol("libvips-42.dll", "_vips__argument_id");
                *__ptr = value;
            }
        }
    }

    public unsafe partial class type
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_value_get_ref_string")]
            internal static extern global::System.IntPtr VipsValueGetRefString(global::System.IntPtr value, ulong* length);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_value_get_blob")]
            internal static extern global::System.IntPtr VipsValueGetBlob(global::System.IntPtr value, ulong* length);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_value_set_blob")]
            internal static extern void VipsValueSetBlob(global::System.IntPtr value, global::System.IntPtr free_fn, global::System.IntPtr data, ulong length);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_value_get_array_double")]
            internal static extern double* VipsValueGetArrayDouble(global::System.IntPtr value, int* n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_value_set_array_double")]
            internal static extern void VipsValueSetArrayDouble(global::System.IntPtr value, double* array, int n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_value_get_array_int")]
            internal static extern int* VipsValueGetArrayInt(global::System.IntPtr value, int* n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_value_set_array_int")]
            internal static extern void VipsValueSetArrayInt(global::System.IntPtr value, int* array, int n);
        }

        public static string VipsValueGetRefString(global::NetVips.GValue value, ref ulong length)
        {
            var __arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            fixed (ulong* __refParamPtr1 = &length)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.VipsValueGetRefString(__arg0, __arg1);
                return Marshal.PtrToStringAnsi(__ret);
            }
        }

        public static global::System.IntPtr VipsValueGetBlob(global::NetVips.GValue value, ref ulong length)
        {
            var __arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            fixed (ulong* __refParamPtr1 = &length)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.VipsValueGetBlob(__arg0, __arg1);
                return __ret;
            }
        }

        public static void VipsValueSetBlob(global::NetVips.GValue value, global::NetVips.VipsCallbackFn free_fn, global::System.IntPtr data, ulong length)
        {
            var __arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            var __arg1 = free_fn == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(free_fn);
            __Internal.VipsValueSetBlob(__arg0, __arg1, data, length);
        }

        public static double* VipsValueGetArrayDouble(global::NetVips.GValue value, ref int n)
        {
            var __arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            fixed (int* __refParamPtr1 = &n)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.VipsValueGetArrayDouble(__arg0, __arg1);
                return __ret;
            }
        }

        public static void VipsValueSetArrayDouble(global::NetVips.GValue value, ref double array, int n)
        {
            var __arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            fixed (double* __refParamPtr1 = &array)
            {
                var __arg1 = __refParamPtr1;
                __Internal.VipsValueSetArrayDouble(__arg0, __arg1, n);
            }
        }

        public static int* VipsValueGetArrayInt(global::NetVips.GValue value, ref int n)
        {
            var __arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            fixed (int* __refParamPtr1 = &n)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.VipsValueGetArrayInt(__arg0, __arg1);
                return __ret;
            }
        }

        public static void VipsValueSetArrayInt(global::NetVips.GValue value, ref int array, int n)
        {
            var __arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            fixed (int* __refParamPtr1 = &array)
            {
                var __arg1 = __refParamPtr1;
                __Internal.VipsValueSetArrayInt(__arg0, __arg1, n);
            }
        }
    }

    public enum VipsBandFormat
    {
        VIPS_FORMAT_NOTSET = -1,
        VIPS_FORMAT_UCHAR = 0,
        VIPS_FORMAT_CHAR = 1,
        VIPS_FORMAT_USHORT = 2,
        VIPS_FORMAT_SHORT = 3,
        VIPS_FORMAT_UINT = 4,
        VIPS_FORMAT_INT = 5,
        VIPS_FORMAT_FLOAT = 6,
        VIPS_FORMAT_COMPLEX = 7,
        VIPS_FORMAT_DOUBLE = 8,
        VIPS_FORMAT_DPCOMPLEX = 9,
        VIPS_FORMAT_LAST = 10
    }

    public enum VipsCoding
    {
        VIPS_CODING_ERROR = -1,
        VIPS_CODING_NONE = 0,
        VIPS_CODING_LABQ = 2,
        VIPS_CODING_RAD = 6,
        VIPS_CODING_LAST = 7
    }

    public enum VipsInterpretation
    {
        VIPS_INTERPRETATION_ERROR = -1,
        VIPS_INTERPRETATION_MULTIBAND = 0,
        VIPS_INTERPRETATION_B_W = 1,
        VIPS_INTERPRETATION_HISTOGRAM = 10,
        VIPS_INTERPRETATION_XYZ = 12,
        VIPS_INTERPRETATION_LAB = 13,
        VIPS_INTERPRETATION_CMYK = 15,
        VIPS_INTERPRETATION_LABQ = 16,
        VIPS_INTERPRETATION_RGB = 17,
        VIPS_INTERPRETATION_CMC = 18,
        VIPS_INTERPRETATION_LCH = 19,
        VIPS_INTERPRETATION_LABS = 21,
        VIPS_INTERPRETATION_sRGB = 22,
        VIPS_INTERPRETATION_YXY = 23,
        VIPS_INTERPRETATION_FOURIER = 24,
        VIPS_INTERPRETATION_RGB16 = 25,
        VIPS_INTERPRETATION_GREY16 = 26,
        VIPS_INTERPRETATION_MATRIX = 27,
        VIPS_INTERPRETATION_scRGB = 28,
        VIPS_INTERPRETATION_HSV = 29,
        VIPS_INTERPRETATION_LAST = 30
    }

    public enum VipsImageType
    {
        VIPS_IMAGE_ERROR = -1,
        VIPS_IMAGE_NONE = 0,
        VIPS_IMAGE_SETBUF = 1,
        VIPS_IMAGE_SETBUF_FOREIGN = 2,
        VIPS_IMAGE_OPENIN = 3,
        VIPS_IMAGE_MMAPIN = 4,
        VIPS_IMAGE_MMAPINRW = 5,
        VIPS_IMAGE_OPENOUT = 6,
        VIPS_IMAGE_PARTIAL = 7
    }

    public enum VipsDemandStyle
    {
        VIPS_DEMAND_STYLE_ERROR = -1,
        VIPS_DEMAND_STYLE_SMALLTILE = 0,
        VIPS_DEMAND_STYLE_FATSTRIP = 1,
        VIPS_DEMAND_STYLE_THINSTRIP = 2,
        VIPS_DEMAND_STYLE_ANY = 3
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr VipsStartFn(global::System.IntPtr @out, global::System.IntPtr a, global::System.IntPtr b);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int VipsStopFn(global::System.IntPtr seq, global::System.IntPtr a, global::System.IntPtr b);

    public unsafe partial class VipsImage : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 392)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.VipsObject.__Internal parent_instance;

            [FieldOffset(80)]
            internal int Xsize;

            [FieldOffset(84)]
            internal int Ysize;

            [FieldOffset(88)]
            internal int Bands;

            [FieldOffset(92)]
            internal global::NetVips.VipsBandFormat BandFmt;

            [FieldOffset(96)]
            internal global::NetVips.VipsCoding Coding;

            [FieldOffset(100)]
            internal global::NetVips.VipsInterpretation Type;

            [FieldOffset(104)]
            internal double Xres;

            [FieldOffset(112)]
            internal double Yres;

            [FieldOffset(120)]
            internal int Xoffset;

            [FieldOffset(124)]
            internal int Yoffset;

            [FieldOffset(128)]
            internal int Length;

            [FieldOffset(132)]
            internal short Compression;

            [FieldOffset(134)]
            internal short Level;

            [FieldOffset(136)]
            internal int Bbits;

            [FieldOffset(144)]
            internal global::System.IntPtr time;

            [FieldOffset(152)]
            internal global::System.IntPtr Hist;

            [FieldOffset(160)]
            internal global::System.IntPtr filename;

            [FieldOffset(168)]
            internal global::System.IntPtr data;

            [FieldOffset(176)]
            internal int kill;

            [FieldOffset(180)]
            internal float Xres_float;

            [FieldOffset(184)]
            internal float Yres_float;

            [FieldOffset(192)]
            internal global::System.IntPtr mode;

            [FieldOffset(200)]
            internal global::NetVips.VipsImageType dtype;

            [FieldOffset(204)]
            internal int fd;

            [FieldOffset(208)]
            internal global::System.IntPtr baseaddr;

            [FieldOffset(216)]
            internal ulong length;

            [FieldOffset(224)]
            internal uint magic;

            [FieldOffset(232)]
            internal global::System.IntPtr start_fn;

            [FieldOffset(240)]
            internal global::System.IntPtr generate_fn;

            [FieldOffset(248)]
            internal global::System.IntPtr stop_fn;

            [FieldOffset(256)]
            internal global::System.IntPtr client1;

            [FieldOffset(264)]
            internal global::System.IntPtr client2;

            [FieldOffset(272)]
            internal global::System.IntPtr sslock;

            [FieldOffset(280)]
            internal global::System.IntPtr regions;

            [FieldOffset(288)]
            internal global::NetVips.VipsDemandStyle dhint;

            [FieldOffset(296)]
            internal global::System.IntPtr meta;

            [FieldOffset(304)]
            internal global::System.IntPtr meta_traverse;

            [FieldOffset(312)]
            internal long sizeof_header;

            [FieldOffset(320)]
            internal global::System.IntPtr windows;

            [FieldOffset(328)]
            internal global::System.IntPtr upstream;

            [FieldOffset(336)]
            internal global::System.IntPtr downstream;

            [FieldOffset(344)]
            internal int serial;

            [FieldOffset(352)]
            internal global::System.IntPtr history_list;

            [FieldOffset(360)]
            internal global::System.IntPtr progress_signal;

            [FieldOffset(368)]
            internal long file_length;

            [FieldOffset(376)]
            internal int hint_set;

            [FieldOffset(380)]
            internal int delete_on_close;

            [FieldOffset(384)]
            internal global::System.IntPtr delete_on_close_filename;
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsImage> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsImage>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsImage __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsImage(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsImage __CreateInstance(global::NetVips.VipsImage.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsImage(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsImage.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsImage.__Internal));
            *(global::NetVips.VipsImage.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsImage(global::NetVips.VipsImage.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsImage(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        ~VipsImage()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsImage __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NetVips.VipsObject ParentInstance
        {
            get
            {
                return global::NetVips.VipsObject.__CreateInstance(new global::System.IntPtr(&((global::NetVips.VipsImage.__Internal*) __Instance)->parent_instance));
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->parent_instance = ReferenceEquals(value, null) ? new global::NetVips.VipsObject.__Internal() : *(global::NetVips.VipsObject.__Internal*) value.__Instance;
            }
        }

        public int Xsize
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->Xsize;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->Xsize = value;
            }
        }

        public int Ysize
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->Ysize;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->Ysize = value;
            }
        }

        public int Bands
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->Bands;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->Bands = value;
            }
        }

        public double Xres
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->Xres;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->Xres = value;
            }
        }

        public double Yres
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->Yres;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->Yres = value;
            }
        }

        public int Xoffset
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->Xoffset;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->Xoffset = value;
            }
        }

        public int Yoffset
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->Yoffset;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->Yoffset = value;
            }
        }

        public int Length
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->Length;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->Length = value;
            }
        }

        public short Compression
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->Compression;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->Compression = value;
            }
        }

        public short Level
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->Level;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->Level = value;
            }
        }

        public int Bbits
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->Bbits;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->Bbits = value;
            }
        }

        public char* Hist
        {
            get
            {
                return (char*) ((global::NetVips.VipsImage.__Internal*) __Instance)->Hist;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->Hist = (global::System.IntPtr) (sbyte*) value;
            }
        }

        public char* Filename
        {
            get
            {
                return (char*) ((global::NetVips.VipsImage.__Internal*) __Instance)->filename;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->filename = (global::System.IntPtr) (sbyte*) value;
            }
        }

        public byte* Data
        {
            get
            {
                return (byte*) ((global::NetVips.VipsImage.__Internal*) __Instance)->data;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->data = (global::System.IntPtr) value;
            }
        }

        public int Kill
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->kill;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->kill = value;
            }
        }

        public float XresFloat
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->Xres_float;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->Xres_float = value;
            }
        }

        public float YresFloat
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->Yres_float;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->Yres_float = value;
            }
        }

        public char* Mode
        {
            get
            {
                return (char*) ((global::NetVips.VipsImage.__Internal*) __Instance)->mode;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->mode = (global::System.IntPtr) (sbyte*) value;
            }
        }

        public int Fd
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->fd;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->fd = value;
            }
        }

        public global::System.IntPtr Baseaddr
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->baseaddr;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->baseaddr = (global::System.IntPtr) value;
            }
        }

        public ulong length
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->length;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->length = value;
            }
        }

        public uint Magic
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->magic;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->magic = value;
            }
        }

        public global::NetVips.VipsStartFn StartFn
        {
            get
            {
                var __ptr0 = ((global::NetVips.VipsImage.__Internal*) __Instance)->start_fn;
                return __ptr0 == IntPtr.Zero? null : (global::NetVips.VipsStartFn) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::NetVips.VipsStartFn));
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->start_fn = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::NetVips.VipsStopFn StopFn
        {
            get
            {
                var __ptr0 = ((global::NetVips.VipsImage.__Internal*) __Instance)->stop_fn;
                return __ptr0 == IntPtr.Zero? null : (global::NetVips.VipsStopFn) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::NetVips.VipsStopFn));
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->stop_fn = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::System.IntPtr Client1
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->client1;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->client1 = (global::System.IntPtr) value;
            }
        }

        public global::System.IntPtr Client2
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->client2;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->client2 = (global::System.IntPtr) value;
            }
        }

        public long SizeofHeader
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->sizeof_header;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->sizeof_header = value;
            }
        }

        public int Serial
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->serial;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->serial = value;
            }
        }

        public global::NetVips.VipsImage ProgressSignal
        {
            get
            {
                global::NetVips.VipsImage __result0;
                if (((global::NetVips.VipsImage.__Internal*) __Instance)->progress_signal == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(((global::NetVips.VipsImage.__Internal*) __Instance)->progress_signal))
                    __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[((global::NetVips.VipsImage.__Internal*) __Instance)->progress_signal];
                else __result0 = global::NetVips.VipsImage.__CreateInstance(((global::NetVips.VipsImage.__Internal*) __Instance)->progress_signal);
                return __result0;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->progress_signal = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public long FileLength
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->file_length;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->file_length = value;
            }
        }

        public int HintSet
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->hint_set;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->hint_set = value;
            }
        }

        public int DeleteOnClose
        {
            get
            {
                return ((global::NetVips.VipsImage.__Internal*) __Instance)->delete_on_close;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->delete_on_close = value;
            }
        }

        public char* DeleteOnCloseFilename
        {
            get
            {
                return (char*) ((global::NetVips.VipsImage.__Internal*) __Instance)->delete_on_close_filename;
            }

            set
            {
                ((global::NetVips.VipsImage.__Internal*)__Instance)->delete_on_close_filename = (global::System.IntPtr) (sbyte*) value;
            }
        }
    }

    public unsafe partial class image
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_filename_get_filename")]
            internal static extern sbyte* VipsFilenameGetFilename([MarshalAs(UnmanagedType.LPStr)] string vips_filename);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_filename_get_options")]
            internal static extern sbyte* VipsFilenameGetOptions([MarshalAs(UnmanagedType.LPStr)] string vips_filename);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_new_matrix_from_array")]
            internal static extern global::System.IntPtr VipsImageNewMatrixFromArray(int width, int height, double* array, int size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_new_temp_file")]
            internal static extern global::System.IntPtr VipsImageNewTempFile([MarshalAs(UnmanagedType.LPStr)] string format);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_write")]
            internal static extern int VipsImageWrite(global::System.IntPtr image, global::System.IntPtr @out);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_write_to_memory")]
            internal static extern global::System.IntPtr VipsImageWriteToMemory(global::System.IntPtr @in, ulong* size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_copy_memory")]
            internal static extern global::System.IntPtr VipsImageCopyMemory(global::System.IntPtr image);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_value_get_array_image")]
            internal static extern global::System.IntPtr VipsValueGetArrayImage(global::System.IntPtr value, int* n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_value_set_array_image")]
            internal static extern void VipsValueSetArrayImage(global::System.IntPtr value, int n);
        }

        public static char* VipsFilenameGetFilename(string vips_filename)
        {
            var __ret = __Internal.VipsFilenameGetFilename(vips_filename);
            return (char*) __ret;
        }

        public static char* VipsFilenameGetOptions(string vips_filename)
        {
            var __ret = __Internal.VipsFilenameGetOptions(vips_filename);
            return (char*) __ret;
        }

        public static global::NetVips.VipsImage VipsImageNewMatrixFromArray(int width, int height, ref double array, int size)
        {
            fixed (double* __refParamPtr2 = &array)
            {
                var __arg2 = __refParamPtr2;
                var __ret = __Internal.VipsImageNewMatrixFromArray(width, height, __arg2, size);
                global::NetVips.VipsImage __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__ret];
                else __result0 = global::NetVips.VipsImage.__CreateInstance(__ret);
                return __result0;
            }
        }

        public static global::NetVips.VipsImage VipsImageNewTempFile(string format)
        {
            var __ret = __Internal.VipsImageNewTempFile(format);
            global::NetVips.VipsImage __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__ret);
            return __result0;
        }

        public static int VipsImageWrite(global::NetVips.VipsImage image, global::NetVips.VipsImage @out)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __arg1 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            var __ret = __Internal.VipsImageWrite(__arg0, __arg1);
            return __ret;
        }

        public static global::System.IntPtr VipsImageWriteToMemory(global::NetVips.VipsImage @in, ref ulong size)
        {
            var __arg0 = ReferenceEquals(@in, null) ? global::System.IntPtr.Zero : @in.__Instance;
            fixed (ulong* __refParamPtr1 = &size)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.VipsImageWriteToMemory(__arg0, __arg1);
                return __ret;
            }
        }

        public static global::NetVips.VipsImage VipsImageCopyMemory(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageCopyMemory(__arg0);
            global::NetVips.VipsImage __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsImage.__CreateInstance(__ret);
            return __result0;
        }

        public static global::NetVips.VipsImage VipsValueGetArrayImage(global::NetVips.GValue value, ref int n)
        {
            var __arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            fixed (int* __refParamPtr1 = &n)
            {
                var __arg1 = __refParamPtr1;
                var __ret = __Internal.VipsValueGetArrayImage(__arg0, __arg1);
                global::NetVips.VipsImage __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::NetVips.VipsImage.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::NetVips.VipsImage) global::NetVips.VipsImage.NativeToManagedMap[__ret];
                else __result0 = global::NetVips.VipsImage.__CreateInstance(__ret);
                return __result0;
            }
        }

        public static void VipsValueSetArrayImage(global::NetVips.GValue value, int n)
        {
            var __arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            __Internal.VipsValueSetArrayImage(__arg0, n);
        }
    }

    public unsafe partial class error
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_error_buffer")]
            internal static extern global::System.IntPtr VipsErrorBuffer();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_error_clear")]
            internal static extern void VipsErrorClear();
        }

        public static string VipsErrorBuffer()
        {
            var __ret = __Internal.VipsErrorBuffer();
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static void VipsErrorClear()
        {
            __Internal.VipsErrorClear();
        }
    }

    public unsafe partial class VipsInterpolate : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.VipsObject.__Internal parent_object;
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsInterpolate> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsInterpolate>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsInterpolate __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsInterpolate(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsInterpolate __CreateInstance(global::NetVips.VipsInterpolate.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsInterpolate(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsInterpolate.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsInterpolate.__Internal));
            *(global::NetVips.VipsInterpolate.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsInterpolate(global::NetVips.VipsInterpolate.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsInterpolate(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        ~VipsInterpolate()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsInterpolate __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NetVips.VipsObject ParentObject
        {
            get
            {
                return global::NetVips.VipsObject.__CreateInstance(new global::System.IntPtr(&((global::NetVips.VipsInterpolate.__Internal*) __Instance)->parent_object));
            }

            set
            {
                ((global::NetVips.VipsInterpolate.__Internal*)__Instance)->parent_object = ReferenceEquals(value, null) ? new global::NetVips.VipsObject.__Internal() : *(global::NetVips.VipsObject.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class interpolate
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_interpolate_new")]
            internal static extern global::System.IntPtr VipsInterpolateNew([MarshalAs(UnmanagedType.LPStr)] string nickname);
        }

        public static global::NetVips.VipsInterpolate VipsInterpolateNew(string nickname)
        {
            var __ret = __Internal.VipsInterpolateNew(nickname);
            global::NetVips.VipsInterpolate __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsInterpolate.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsInterpolate) global::NetVips.VipsInterpolate.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsInterpolate.__CreateInstance(__ret);
            return __result0;
        }
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int VipsThreadpoolProgressFn(global::System.IntPtr a);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr VipsImageMapFn(global::System.IntPtr image, [MarshalAs(UnmanagedType.LPStr)] string name, global::System.IntPtr value, global::System.IntPtr a);

    public unsafe partial class header
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_set")]
            internal static extern void VipsImageSet(global::System.IntPtr image, [MarshalAs(UnmanagedType.LPStr)] string name, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_get")]
            internal static extern int VipsImageGet(global::System.IntPtr image, [MarshalAs(UnmanagedType.LPStr)] string name, global::System.IntPtr value_copy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_get_typeof")]
            internal static extern ulong VipsImageGetTypeof(global::System.IntPtr image, [MarshalAs(UnmanagedType.LPStr)] string name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_remove")]
            internal static extern int VipsImageRemove(global::System.IntPtr image, [MarshalAs(UnmanagedType.LPStr)] string name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_image_get_fields")]
            internal static extern sbyte** VipsImageGetFields(global::System.IntPtr image);
        }

        public static void VipsImageSet(global::NetVips.VipsImage image, string name, global::NetVips.GValue value)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __arg2 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            __Internal.VipsImageSet(__arg0, name, __arg2);
        }

        public static int VipsImageGet(global::NetVips.VipsImage image, string name, global::NetVips.GValue value_copy)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __arg2 = ReferenceEquals(value_copy, null) ? global::System.IntPtr.Zero : value_copy.__Instance;
            var __ret = __Internal.VipsImageGet(__arg0, name, __arg2);
            return __ret;
        }

        public static ulong VipsImageGetTypeof(global::NetVips.VipsImage image, string name)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageGetTypeof(__arg0, name);
            return __ret;
        }

        public static int VipsImageRemove(global::NetVips.VipsImage image, string name)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageRemove(__arg0, name);
            return __ret;
        }

        public static char** VipsImageGetFields(global::NetVips.VipsImage image)
        {
            var __arg0 = ReferenceEquals(image, null) ? global::System.IntPtr.Zero : image.__Instance;
            var __ret = __Internal.VipsImageGetFields(__arg0);
            return (char**) __ret;
        }
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int VipsOperationBuildFn(global::System.IntPtr @object);

    public unsafe partial class VipsOperation : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 96)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NetVips.VipsObject.__Internal parent_instance;

            [FieldOffset(80)]
            internal uint hash;

            [FieldOffset(84)]
            internal int found_hash;

            [FieldOffset(88)]
            internal int pixels;
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsOperation> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NetVips.VipsOperation>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::NetVips.VipsOperation __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::NetVips.VipsOperation(native.ToPointer(), skipVTables);
        }

        internal static global::NetVips.VipsOperation __CreateInstance(global::NetVips.VipsOperation.__Internal native, bool skipVTables = false)
        {
            return new global::NetVips.VipsOperation(native, skipVTables);
        }

        private static void* __CopyValue(global::NetVips.VipsOperation.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NetVips.VipsOperation.__Internal));
            *(global::NetVips.VipsOperation.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VipsOperation(global::NetVips.VipsOperation.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VipsOperation(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        ~VipsOperation()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NetVips.VipsOperation __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NetVips.VipsObject ParentInstance
        {
            get
            {
                return global::NetVips.VipsObject.__CreateInstance(new global::System.IntPtr(&((global::NetVips.VipsOperation.__Internal*) __Instance)->parent_instance));
            }

            set
            {
                ((global::NetVips.VipsOperation.__Internal*)__Instance)->parent_instance = ReferenceEquals(value, null) ? new global::NetVips.VipsObject.__Internal() : *(global::NetVips.VipsObject.__Internal*) value.__Instance;
            }
        }

        public uint Hash
        {
            get
            {
                return ((global::NetVips.VipsOperation.__Internal*) __Instance)->hash;
            }

            set
            {
                ((global::NetVips.VipsOperation.__Internal*)__Instance)->hash = value;
            }
        }

        public int FoundHash
        {
            get
            {
                return ((global::NetVips.VipsOperation.__Internal*) __Instance)->found_hash;
            }

            set
            {
                ((global::NetVips.VipsOperation.__Internal*)__Instance)->found_hash = value;
            }
        }

        public int Pixels
        {
            get
            {
                return ((global::NetVips.VipsOperation.__Internal*) __Instance)->pixels;
            }

            set
            {
                ((global::NetVips.VipsOperation.__Internal*)__Instance)->pixels = value;
            }
        }
    }

    public unsafe partial class operation
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_operation_new")]
            internal static extern global::System.IntPtr VipsOperationNew([MarshalAs(UnmanagedType.LPStr)] string name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_cache_operation_build")]
            internal static extern global::System.IntPtr VipsCacheOperationBuild(global::System.IntPtr operation);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_cache_set_max")]
            internal static extern void VipsCacheSetMax(int max);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_cache_set_max_mem")]
            internal static extern void VipsCacheSetMaxMem(ulong max_mem);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_cache_set_max_files")]
            internal static extern void VipsCacheSetMaxFiles(int max_files);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_cache_set_trace")]
            internal static extern void VipsCacheSetTrace(int trace);
        }

        public static global::NetVips.VipsOperation VipsOperationNew(string name)
        {
            var __ret = __Internal.VipsOperationNew(name);
            global::NetVips.VipsOperation __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsOperation.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsOperation) global::NetVips.VipsOperation.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsOperation.__CreateInstance(__ret);
            return __result0;
        }

        public static global::NetVips.VipsOperation VipsCacheOperationBuild(global::NetVips.VipsOperation operation)
        {
            var __arg0 = ReferenceEquals(operation, null) ? global::System.IntPtr.Zero : operation.__Instance;
            var __ret = __Internal.VipsCacheOperationBuild(__arg0);
            global::NetVips.VipsOperation __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::NetVips.VipsOperation.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::NetVips.VipsOperation) global::NetVips.VipsOperation.NativeToManagedMap[__ret];
            else __result0 = global::NetVips.VipsOperation.__CreateInstance(__ret);
            return __result0;
        }

        public static void VipsCacheSetMax(int max)
        {
            __Internal.VipsCacheSetMax(max);
        }

        public static void VipsCacheSetMaxMem(ulong max_mem)
        {
            __Internal.VipsCacheSetMaxMem(max_mem);
        }

        public static void VipsCacheSetMaxFiles(int max_files)
        {
            __Internal.VipsCacheSetMaxFiles(max_files);
        }

        public static void VipsCacheSetTrace(int trace)
        {
            __Internal.VipsCacheSetTrace(trace);
        }
    }

    public unsafe partial class foreign
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_foreign_find_load")]
            internal static extern global::System.IntPtr VipsForeignFindLoad([MarshalAs(UnmanagedType.LPStr)] string filename);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_foreign_find_load_buffer")]
            internal static extern global::System.IntPtr VipsForeignFindLoadBuffer(global::System.IntPtr data, ulong size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_foreign_find_save")]
            internal static extern global::System.IntPtr VipsForeignFindSave([MarshalAs(UnmanagedType.LPStr)] string filename);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_foreign_find_save_buffer")]
            internal static extern global::System.IntPtr VipsForeignFindSaveBuffer([MarshalAs(UnmanagedType.LPStr)] string suffix);
        }

        public static string VipsForeignFindLoad(string filename)
        {
            var __ret = __Internal.VipsForeignFindLoad(filename);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static string VipsForeignFindLoadBuffer(global::System.IntPtr data, ulong size)
        {
            var __ret = __Internal.VipsForeignFindLoadBuffer(data, size);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static string VipsForeignFindSave(string filename)
        {
            var __ret = __Internal.VipsForeignFindSave(filename);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static string VipsForeignFindSaveBuffer(string suffix)
        {
            var __ret = __Internal.VipsForeignFindSaveBuffer(suffix);
            return Marshal.PtrToStringAnsi(__ret);
        }
    }

    public unsafe partial class enumtypes
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_blend_mode_get_type")]
            internal static extern ulong VipsBlendModeGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_interpretation_get_type")]
            internal static extern ulong VipsInterpretationGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_band_format_get_type")]
            internal static extern ulong VipsBandFormatGetType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvips-42.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="vips_operation_flags_get_type")]
            internal static extern ulong VipsOperationFlagsGetType();
        }

        public static ulong VipsBlendModeGetType()
        {
            var __ret = __Internal.VipsBlendModeGetType();
            return __ret;
        }

        public static ulong VipsInterpretationGetType()
        {
            var __ret = __Internal.VipsInterpretationGetType();
            return __ret;
        }

        public static ulong VipsBandFormatGetType()
        {
            var __ret = __Internal.VipsBandFormatGetType();
            return __ret;
        }

        public static ulong VipsOperationFlagsGetType()
        {
            var __ret = __Internal.VipsOperationFlagsGetType();
            return __ret;
        }
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr ImConstructFn(global::System.IntPtr _0, global::System.IntPtr _1, global::System.IntPtr _2);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void ImWraponeFn(global::System.IntPtr @in, global::System.IntPtr @out, int width, global::System.IntPtr a, global::System.IntPtr b);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void ImWraptwoFn(global::System.IntPtr in1, global::System.IntPtr in2, global::System.IntPtr @out, int width, global::System.IntPtr a, global::System.IntPtr b);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void ImWrapmanyFn(void** @in, global::System.IntPtr @out, int width, global::System.IntPtr a, global::System.IntPtr b);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int VipsPlotFn(global::System.IntPtr image, int x, int y, global::System.IntPtr a, global::System.IntPtr b, global::System.IntPtr c);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int ImWrapscanFn(global::System.IntPtr p, int n, global::System.IntPtr seq, global::System.IntPtr a, global::System.IntPtr b);

    public unsafe partial class vips7compat
    {
        public partial struct __Internal
        {
        }

        public static ulong* VipsImageSizeofBandformat
        {
            get
            {
                var __ptr = (ulong*)CppSharp.SymbolResolver.ResolveSymbol("libvips-42.dll", "vips__image_sizeof_bandformat");
                return __ptr;
            }
        }
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int ImInitObjFn(global::System.IntPtr obj, sbyte* str);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int ImDestObjFn(global::System.IntPtr obj);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int ImPrintObjFn(global::System.IntPtr obj);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int ImDispatchFn(global::System.IntPtr argv);
}
